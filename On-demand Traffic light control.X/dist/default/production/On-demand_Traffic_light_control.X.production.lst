

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Oct 16 16:02:06 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    70                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    71                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    72   000000                     
    73                           ; Generated 23/03/2023 GMT
    74                           ; 
    75                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution. Publication is not required when
    89                           ;        this file is used in an embedded application.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC18F4620 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107   000000                     
   108                           	psect	idataCOMRAM
   109   002544                     __pidataCOMRAM:
   110                           	callstack 0
   111                           
   112                           ;initializer for _latx
   113   002544  89                 	db	137
   114   002545  0F                 	db	15
   115   002546  8A                 	db	138
   116   002547  0F                 	db	15
   117   002548  8B                 	db	139
   118   002549  0F                 	db	15
   119   00254A  8C                 	db	140
   120   00254B  0F                 	db	15
   121   00254C  8D                 	db	141
   122   00254D  0F                 	db	15
   123                           
   124                           ;initializer for _trisx
   125   00254E  92                 	db	146
   126   00254F  0F                 	db	15
   127   002550  93                 	db	147
   128   002551  0F                 	db	15
   129   002552  94                 	db	148
   130   002553  0F                 	db	15
   131   002554  95                 	db	149
   132   002555  0F                 	db	15
   133   002556  96                 	db	150
   134   002557  0F                 	db	15
   135                           
   136                           ;initializer for _RB7_Flag
   137   002558  01                 	db	1
   138                           
   139                           ;initializer for _RB6_Flag
   140   002559  01                 	db	1
   141                           
   142                           ;initializer for _RB5_Flag
   143   00255A  01                 	db	1
   144                           
   145                           ;initializer for _RB4_Flag
   146   00255B  01                 	db	1
   147                           
   148                           ;initializer for _n
   149   00255C  04                 	db	4
   150                           
   151                           ;initializer for _lcd
   152   00255D  29                 	db	41
   153   00255E  31                 	db	49
   154   00255F  09                 	db	9
   155   002560  11                 	db	17
   156   002561  19                 	db	25
   157   002562  21                 	db	33
   158                           
   159                           ;initializer for _seg_green
   160   002563  23                 	db	35
   161   002564  2B                 	db	43
   162   002565  33                 	db	51
   163   002566  3B                 	db	59
   164   002567  00                 	db	0
   165                           
   166                           ;initializer for _seg_red
   167   002568  03                 	db	3
   168   002569  0B                 	db	11
   169   00256A  13                 	db	19
   170   00256B  1B                 	db	27
   171   00256C  00                 	db	0
   172                           
   173                           ;initializer for _pedestrian_led_green
   174   00256D  2A                 	db	42
   175   00256E  00                 	db	0
   176                           
   177                           ;initializer for _pedestrian_led_yellow
   178   00256F  22                 	db	34
   179   002570  00                 	db	0
   180                           
   181                           ;initializer for _pedestrian_led_red
   182   002571  1A                 	db	26
   183   002572  00                 	db	0
   184                           
   185                           ;initializer for _car_led_green
   186   002573  12                 	db	18
   187   002574  00                 	db	0
   188                           
   189                           ;initializer for _car_led_yellow
   190   002575  0A                 	db	10
   191   002576  00                 	db	0
   192                           
   193                           ;initializer for _car_led_red
   194   002577  02                 	db	2
   195   002578  00                 	db	0
   196                           
   197                           	psect	idataBANK0
   198   002579                     __pidataBANK0:
   199                           	callstack 0
   200                           
   201                           ;initializer for _portx
   202   002579  80                 	db	128
   203   00257A  0F                 	db	15
   204   00257B  81                 	db	129
   205   00257C  0F                 	db	15
   206   00257D  82                 	db	130
   207   00257E  0F                 	db	15
   208   00257F  83                 	db	131
   209   002580  0F                 	db	15
   210   002581  84                 	db	132
   211   002582  0F                 	db	15
   212                           
   213                           ;initializer for _customChar4
   214   002583  08                 	db	8
   215   002584  0C                 	db	12
   216   002585  1E                 	db	30
   217   002586  1F                 	db	31
   218   002587  1E                 	db	30
   219   002588  0C                 	db	12
   220   002589  08                 	db	8
   221   00258A  00                 	db	0
   222                           
   223                           ;initializer for _customChar3
   224   00258B  00                 	db	0
   225   00258C  00                 	db	0
   226   00258D  1F                 	db	31
   227   00258E  1F                 	db	31
   228   00258F  1F                 	db	31
   229   002590  00                 	db	0
   230   002591  00                 	db	0
   231   002592  00                 	db	0
   232                           
   233                           ;initializer for _customChar2
   234   002593  1F                 	db	31
   235   002594  03                 	db	3
   236   002595  05                 	db	5
   237   002596  19                 	db	25
   238   002597  01                 	db	1
   239   002598  01                 	db	1
   240   002599  1F                 	db	31
   241   00259A  00                 	db	0
   242                           
   243                           ;initializer for _customChar1
   244   00259B  1F                 	db	31
   245   00259C  10                 	db	16
   246   00259D  10                 	db	16
   247   00259E  13                 	db	19
   248   00259F  14                 	db	20
   249   0025A0  18                 	db	24
   250   0025A1  1F                 	db	31
   251   0025A2  00                 	db	0
   252                           
   253                           ;initializer for _MY_INT0
   254   0025A3  82                 	db	low _APP_INT_ISR
   255   0025A4  20                 	db	high _APP_INT_ISR
   256   0025A5  01                 	db	1
   257   0025A6  01                 	db	1
   258   0025A7  00                 	db	0
   259   0025A8  00                 	db	0
   260   000000                     _INTCON2bits	set	4081
   261                           
   262                           	psect	nvCOMRAM
   263   00007B                     __pnvCOMRAM:
   264                           	callstack 0
   265   00007B                     _counter:
   266                           	callstack 0
   267   00007B                     	ds	1
   268                           
   269                           	psect	nvBANK0
   270   0000B3                     __pnvBANK0:
   271                           	callstack 0
   272   0000B3                     _ret:
   273                           	callstack 0
   274   0000B3                     	ds	1
   275   000000                     _PORTCbits	set	3970
   276   000000                     _PORTBbits	set	3969
   277   000000                     _PORTE	set	3972
   278   000000                     _PORTD	set	3971
   279   000000                     _PORTC	set	3970
   280   000000                     _PORTB	set	3969
   281   000000                     _PORTA	set	3968
   282   000000                     _LATA	set	3977
   283   000000                     _TRISA	set	3986
   284   000000                     _INTCON3bits	set	4080
   285   000000                     _INTCONbits	set	4082
   286   000000                     _TRISE	set	3990
   287   000000                     _TRISD	set	3989
   288   000000                     _TRISC	set	3988
   289   000000                     _TRISB	set	3987
   290   000000                     _LATE	set	3981
   291   000000                     _LATD	set	3980
   292   000000                     _LATC	set	3979
   293   000000                     _LATB	set	3978
   294                           
   295                           	psect	smallconst
   296   001000                     __psmallconst:
   297                           	callstack 0
   298   001000  00                 	db	0
   299   001001                     STR_5:
   300   001001  4D                 	db	77	;'M'
   301   001002  4F                 	db	79	;'O'
   302   001003  56                 	db	86	;'V'
   303   001004  45                 	db	69	;'E'
   304   001005  20                 	db	32
   305   001006  20                 	db	32
   306   001007  20                 	db	32
   307   001008  20                 	db	32
   308   001009  00                 	db	0
   309   00100A                     STR_4:
   310   00100A  53                 	db	83	;'S'
   311   00100B  54                 	db	84	;'T'
   312   00100C  4F                 	db	79	;'O'
   313   00100D  50                 	db	80	;'P'
   314   00100E  20                 	db	32
   315   00100F  20                 	db	32
   316   001010  20                 	db	32
   317   001011  20                 	db	32
   318   001012  00                 	db	0
   319   001013                     STR_6:
   320   001013  57                 	db	87	;'W'
   321   001014  41                 	db	65	;'A'
   322   001015  49                 	db	73	;'I'
   323   001016  54                 	db	84	;'T'
   324   001017  2E                 	db	46
   325   001018  2E                 	db	46
   326   001019  2E                 	db	46
   327   00101A  20                 	db	32
   328   00101B  00                 	db	0
   329   00101C                     STR_7:
   330   00101C  48                 	db	72	;'H'
   331   00101D  41                 	db	65	;'A'
   332   00101E  52                 	db	82	;'R'
   333   00101F  52                 	db	82	;'R'
   334   001020  59                 	db	89	;'Y'
   335   001021  20                 	db	32
   336   001022  55                 	db	85	;'U'
   337   001023  50                 	db	80	;'P'
   338   001024  00                 	db	0
   339   001025                     STR_1:
   340   001025  25                 	db	37
   341   001026  69                 	db	105	;'i'
   342   001027  00                 	db	0
   343   001028  00                 	db	0	; dummy byte at the end
   344   000000                     
   345                           ; #config settings
   346                           
   347                           	psect	cinit
   348   00219C                     __pcinit:
   349                           	callstack 0
   350   00219C                     start_initialization:
   351                           	callstack 0
   352   00219C                     __initialization:
   353                           	callstack 0
   354                           
   355                           ; Initialize objects allocated to BANK0 (48 bytes)
   356                           ; load TBLPTR registers with __pidataBANK0
   357   00219C  0E79               	movlw	low __pidataBANK0
   358   00219E  6EF6               	movwf	tblptrl,c
   359   0021A0  0E25               	movlw	high __pidataBANK0
   360   0021A2  6EF7               	movwf	tblptrh,c
   361   0021A4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   362   0021A6  6EF8               	movwf	tblptru,c
   363   0021A8  EE00  F080         	lfsr	0,__pdataBANK0
   364   0021AC  EE10 F030          	lfsr	1,48
   365   0021B0                     copy_data0:
   366   0021B0  0009               	tblrd		*+
   367   0021B2  CFF5 FFEE          	movff	tablat,postinc0
   368   0021B6  50E5               	movf	postdec1,w,c
   369   0021B8  50E1               	movf	fsr1l,w,c
   370   0021BA  E1FA               	bnz	copy_data0
   371                           
   372                           ; Initialize objects allocated to COMRAM (53 bytes)
   373                           ; load TBLPTR registers with __pidataCOMRAM
   374   0021BC  0E44               	movlw	low __pidataCOMRAM
   375   0021BE  6EF6               	movwf	tblptrl,c
   376   0021C0  0E25               	movlw	high __pidataCOMRAM
   377   0021C2  6EF7               	movwf	tblptrh,c
   378   0021C4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   379   0021C6  6EF8               	movwf	tblptru,c
   380   0021C8  EE00  F001         	lfsr	0,__pdataCOMRAM
   381   0021CC  EE10 F035          	lfsr	1,53
   382   0021D0                     copy_data1:
   383   0021D0  0009               	tblrd		*+
   384   0021D2  CFF5 FFEE          	movff	tablat,postinc0
   385   0021D6  50E5               	movf	postdec1,w,c
   386   0021D8  50E1               	movf	fsr1l,w,c
   387   0021DA  E1FA               	bnz	copy_data1
   388                           
   389                           ; Clear objects allocated to COMRAM (26 bytes)
   390   0021DC  EE00  F061         	lfsr	0,__pbssCOMRAM
   391   0021E0  0E1A               	movlw	26
   392   0021E2                     clear_0:
   393   0021E2  6AEE               	clrf	postinc0,c
   394   0021E4  06E8               	decf	wreg,f,c
   395   0021E6  E1FD               	bnz	clear_0
   396   0021E8                     end_of_initialization:
   397                           	callstack 0
   398   0021E8                     __end_of__initialization:
   399                           	callstack 0
   400   0021E8  907C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   401   0021EA  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   402   0021EC  0100               	movlb	0
   403   0021EE  EF60  F009         	goto	_main	;jump to C main() function
   404                           
   405                           	psect	bssCOMRAM
   406   000061                     __pbssCOMRAM:
   407                           	callstack 0
   408   000061                     _RB7_InterruptHandler_low:
   409                           	callstack 0
   410   000061                     	ds	2
   411   000063                     _RB7_InterruptHandler_high:
   412                           	callstack 0
   413   000063                     	ds	2
   414   000065                     _RB6_InterruptHandler_low:
   415                           	callstack 0
   416   000065                     	ds	2
   417   000067                     _RB6_InterruptHandler_high:
   418                           	callstack 0
   419   000067                     	ds	2
   420   000069                     _RB5_InterruptHandler_low:
   421                           	callstack 0
   422   000069                     	ds	2
   423   00006B                     _RB5_InterruptHandler_high:
   424                           	callstack 0
   425   00006B                     	ds	2
   426   00006D                     _RB4_InterruptHandler_low:
   427                           	callstack 0
   428   00006D                     	ds	2
   429   00006F                     _RB4_InterruptHandler_high:
   430                           	callstack 0
   431   00006F                     	ds	2
   432   000071                     _INT2_InterruptHandler:
   433                           	callstack 0
   434   000071                     	ds	2
   435   000073                     _INT1_InterruptHandler:
   436                           	callstack 0
   437   000073                     	ds	2
   438   000075                     _INT0_InterruptHandler:
   439                           	callstack 0
   440   000075                     	ds	2
   441   000077                     _flag_mode:
   442                           	callstack 0
   443   000077                     	ds	1
   444   000078                     lcd_send_custom_char@counter:
   445                           	callstack 0
   446   000078                     	ds	1
   447   000079                     seven_segment_write@counter:
   448                           	callstack 0
   449   000079                     	ds	1
   450   00007A                     seven_segment_init@counter:
   451                           	callstack 0
   452   00007A                     	ds	1
   453                           
   454                           	psect	dataCOMRAM
   455   000001                     __pdataCOMRAM:
   456                           	callstack 0
   457   000001                     _latx:
   458                           	callstack 0
   459   000001                     	ds	10
   460   00000B                     _trisx:
   461                           	callstack 0
   462   00000B                     	ds	10
   463   000015                     _RB7_Flag:
   464                           	callstack 0
   465   000015                     	ds	1
   466   000016                     _RB6_Flag:
   467                           	callstack 0
   468   000016                     	ds	1
   469   000017                     _RB5_Flag:
   470                           	callstack 0
   471   000017                     	ds	1
   472   000018                     _RB4_Flag:
   473                           	callstack 0
   474   000018                     	ds	1
   475   000019                     _n:
   476                           	callstack 0
   477   000019                     	ds	1
   478   00001A                     _lcd:
   479                           	callstack 0
   480   00001A                     	ds	6
   481   000020                     _seg_green:
   482                           	callstack 0
   483   000020                     	ds	5
   484   000025                     _seg_red:
   485                           	callstack 0
   486   000025                     	ds	5
   487   00002A                     _pedestrian_led_green:
   488                           	callstack 0
   489   00002A                     	ds	2
   490   00002C                     _pedestrian_led_yellow:
   491                           	callstack 0
   492   00002C                     	ds	2
   493   00002E                     _pedestrian_led_red:
   494                           	callstack 0
   495   00002E                     	ds	2
   496   000030                     _car_led_green:
   497                           	callstack 0
   498   000030                     	ds	2
   499   000032                     _car_led_yellow:
   500                           	callstack 0
   501   000032                     	ds	2
   502   000034                     _car_led_red:
   503                           	callstack 0
   504   000034                     	ds	2
   505                           
   506                           	psect	dataBANK0
   507   000080                     __pdataBANK0:
   508                           	callstack 0
   509   000080                     _portx:
   510                           	callstack 0
   511   000080                     	ds	10
   512   00008A                     _customChar4:
   513                           	callstack 0
   514   00008A                     	ds	8
   515   000092                     _customChar3:
   516                           	callstack 0
   517   000092                     	ds	8
   518   00009A                     _customChar2:
   519                           	callstack 0
   520   00009A                     	ds	8
   521   0000A2                     _customChar1:
   522                           	callstack 0
   523   0000A2                     	ds	8
   524   0000AA                     _MY_INT0:
   525                           	callstack 0
   526   0000AA                     	ds	6
   527                           
   528                           	psect	cstackBANK0
   529   0000B0                     __pcstackBANK0:
   530                           	callstack 0
   531   0000B0                     lcd_send_custom_char@gpio_ret:
   532                           	callstack 0
   533                           
   534                           ; 1 bytes @ 0x0
   535   0000B0                     	ds	1
   536   0000B1                     lcd_send_custom_char@lcd_ret:
   537                           	callstack 0
   538                           
   539                           ; 1 bytes @ 0x1
   540   0000B1                     	ds	1
   541   0000B2                     lcd_send_custom_char@ret:
   542                           	callstack 0
   543                           
   544                           ; 1 bytes @ 0x2
   545   0000B2                     	ds	1
   546                           
   547                           	psect	cstackCOMRAM
   548   000036                     __pcstackCOMRAM:
   549                           	callstack 0
   550   000036                     RB4_ISR@RB4_Source:
   551                           	callstack 0
   552   000036                     RB5_ISR@RB5_Source:
   553                           	callstack 0
   554   000036                     RB6_ISR@RB6_Source:
   555                           	callstack 0
   556   000036                     RB7_ISR@RB7_Source:
   557                           	callstack 0
   558                           
   559                           ; 1 bytes @ 0x0
   560   000036                     	ds	1
   561   000037                     ??_InterruptManager:
   562                           
   563                           ; 1 bytes @ 0x1
   564   000037                     	ds	2
   565   000039                     gpio_pin_direction_init@pin:
   566                           	callstack 0
   567   000039                     gpio_pin_logic_write@pin:
   568                           	callstack 0
   569   000039                     gpio_pin_toggle_logic@pin:
   570                           	callstack 0
   571   000039                     interrupt_INTx_enable@_interrupt:
   572                           	callstack 0
   573   000039                     interrupt_INTx_disable@_interrupt:
   574                           	callstack 0
   575   000039                     interrupt_INTx_clear_flag@_interrupt:
   576                           	callstack 0
   577   000039                     interrupt_INTx_edge_init@_interrupt:
   578                           	callstack 0
   579   000039                     INT0_set_InterruptHandler@InterruptHandler:
   580                           	callstack 0
   581   000039                     INT1_set_InterruptHandler@InterruptHandler:
   582                           	callstack 0
   583   000039                     INT2_set_InterruptHandler@InterruptHandler:
   584                           	callstack 0
   585                           
   586                           ; 2 bytes @ 0x3
   587   000039                     	ds	1
   588   00003A                     ??_gpio_pin_toggle_logic:
   589   00003A                     ??_interrupt_INTx_disable:
   590   00003A                     ??_interrupt_INTx_clear_flag:
   591   00003A                     ??_interrupt_INTx_edge_init:
   592   00003A                     ??_interrupt_INTx_enable:
   593   00003A                     gpio_pin_direction_init@pin_direction:
   594                           	callstack 0
   595   00003A                     gpio_pin_logic_write@pin_logic:
   596                           	callstack 0
   597                           
   598                           ; 1 bytes @ 0x4
   599   00003A                     	ds	1
   600   00003B                     ??_gpio_pin_logic_write:
   601   00003B                     ??_gpio_pin_direction_init:
   602   00003B                     INT0_set_InterruptHandler@ret:
   603                           	callstack 0
   604   00003B                     INT1_set_InterruptHandler@ret:
   605                           	callstack 0
   606   00003B                     INT2_set_InterruptHandler@ret:
   607                           	callstack 0
   608                           
   609                           ; 1 bytes @ 0x5
   610   00003B                     	ds	1
   611   00003C                     interrupt_INTx_enable@ret:
   612                           	callstack 0
   613   00003C                     interrupt_INTx_disable@ret:
   614                           	callstack 0
   615   00003C                     interrupt_INTx_clear_flag@ret:
   616                           	callstack 0
   617   00003C                     interrupt_INTx_edge_init@ret:
   618                           	callstack 0
   619   00003C                     INTx_select_InterruptHandler@_interrupt:
   620                           	callstack 0
   621                           
   622                           ; 1 bytes @ 0x6
   623   00003C                     	ds	1
   624   00003D                     ??_INTx_select_InterruptHandler:
   625                           
   626                           ; 1 bytes @ 0x7
   627   00003D                     	ds	1
   628   00003E                     gpio_pin_toggle_logic@ret:
   629                           	callstack 0
   630                           
   631                           ; 1 bytes @ 0x8
   632   00003E                     	ds	1
   633   00003F                     led_toggle@led:
   634                           	callstack 0
   635   00003F                     INTx_select_InterruptHandler@ret:
   636                           	callstack 0
   637                           
   638                           ; 1 bytes @ 0x9
   639   00003F                     	ds	1
   640   000040                     led_toggle@gpio_ret:
   641                           	callstack 0
   642   000040                     gpio_pin_direction_init@ret:
   643                           	callstack 0
   644   000040                     gpio_pin_logic_write@ret:
   645                           	callstack 0
   646                           
   647                           ; 1 bytes @ 0xA
   648   000040                     	ds	1
   649   000041                     seven_segment_write@seg:
   650                           	callstack 0
   651   000041                     lcd_send_nbits@lcd:
   652                           	callstack 0
   653   000041                     lcd_send_enable@lcd:
   654                           	callstack 0
   655   000041                     led_on@led:
   656                           	callstack 0
   657   000041                     led_off@led:
   658                           	callstack 0
   659   000041                     led_toggle@ret:
   660                           	callstack 0
   661   000041                     gpio_pin_output_low_init@pin:
   662                           	callstack 0
   663   000041                     gpio_pin_input_init@pin:
   664                           	callstack 0
   665                           
   666                           ; 1 bytes @ 0xB
   667   000041                     	ds	1
   668   000042                     ??_gpio_pin_output_low_init:
   669   000042                     ??_yellow_leds_toggle:
   670   000042                     ??_gpio_pin_input_init:
   671   000042                     seven_segment_write@num:
   672                           	callstack 0
   673   000042                     lcd_send_nbits@data_or_command:
   674                           	callstack 0
   675   000042                     lcd_send_enable@gpio_ret:
   676                           	callstack 0
   677   000042                     led_on@gpio_ret:
   678                           	callstack 0
   679   000042                     led_off@gpio_ret:
   680                           	callstack 0
   681                           
   682                           ; 1 bytes @ 0xC
   683   000042                     	ds	1
   684   000043                     ??_lcd_send_nbits:
   685   000043                     ??_seven_segment_write:
   686   000043                     led_on@ret:
   687                           	callstack 0
   688   000043                     led_off@ret:
   689                           	callstack 0
   690   000043                     gpio_pin_output_low_init@gpio_ret:
   691                           	callstack 0
   692   000043                     gpio_pin_input_init@gpio_ret:
   693                           	callstack 0
   694                           
   695                           ; 1 bytes @ 0xD
   696   000043                     	ds	1
   697   000044                     gpio_pin_output_low_init@ret:
   698                           	callstack 0
   699   000044                     gpio_pin_input_init@ret:
   700                           	callstack 0
   701   000044                     yellow_leds_toggle@counter:
   702                           	callstack 0
   703                           
   704                           ; 1 bytes @ 0xE
   705   000044                     	ds	1
   706   000045                     seven_segment_init@seg:
   707                           	callstack 0
   708   000045                     seven_segment_write@gpio_ret:
   709                           	callstack 0
   710   000045                     lcd_send_nbits@ret:
   711                           	callstack 0
   712   000045                     led_init@led:
   713                           	callstack 0
   714   000045                     interrupt_INTx_pin_init@_interrupt:
   715                           	callstack 0
   716                           
   717                           ; 1 bytes @ 0xF
   718   000045                     	ds	1
   719   000046                     seven_segment_init@gpio_ret:
   720                           	callstack 0
   721   000046                     seven_segment_write@ret:
   722                           	callstack 0
   723   000046                     lcd_send_nbits@pin_counter:
   724                           	callstack 0
   725   000046                     led_init@gpio_ret:
   726                           	callstack 0
   727   000046                     interrupt_INTx_pin_init@ret:
   728                           	callstack 0
   729                           
   730                           ; 1 bytes @ 0x10
   731   000046                     	ds	1
   732   000047                     ??_pedestrian_green_traffic_counter:
   733   000047                     seven_segment_init@ret:
   734                           	callstack 0
   735   000047                     lcd_send_command@lcd:
   736                           	callstack 0
   737   000047                     lcd_send_char_data@lcd:
   738                           	callstack 0
   739   000047                     led_init@ret:
   740                           	callstack 0
   741   000047                     interrupt_INTx_init@_interrupt:
   742                           	callstack 0
   743                           
   744                           ; 1 bytes @ 0x11
   745   000047                     	ds	1
   746   000048                     lcd_send_command@command:
   747                           	callstack 0
   748   000048                     lcd_send_char_data@data:
   749                           	callstack 0
   750   000048                     interrupt_INTx_init@ret:
   751                           	callstack 0
   752                           
   753                           ; 1 bytes @ 0x12
   754   000048                     	ds	1
   755   000049                     lcd_send_command@gpio_ret:
   756                           	callstack 0
   757   000049                     lcd_send_char_data@gpio_ret:
   758                           	callstack 0
   759   000049                     pedestrian_green_traffic_counter@time:
   760                           	callstack 0
   761                           
   762                           ; 1 bytes @ 0x13
   763   000049                     	ds	1
   764   00004A                     lcd_send_command@lcd_ret:
   765                           	callstack 0
   766   00004A                     lcd_send_char_data@lcd_ret:
   767                           	callstack 0
   768   00004A                     pedestrian_green_traffic_counter@counter:
   769                           	callstack 0
   770                           
   771                           ; 1 bytes @ 0x14
   772   00004A                     	ds	1
   773   00004B                     lcd_send_command@ret:
   774                           	callstack 0
   775   00004B                     lcd_send_char_data@ret:
   776                           	callstack 0
   777                           
   778                           ; 1 bytes @ 0x15
   779   00004B                     	ds	1
   780   00004C                     lcd_init@lcd:
   781                           	callstack 0
   782   00004C                     lcd_send_string@lcd:
   783                           	callstack 0
   784   00004C                     lcd_set_curser@lcd:
   785                           	callstack 0
   786                           
   787                           ; 1 bytes @ 0x16
   788   00004C                     	ds	1
   789   00004D                     ??_lcd_init:
   790   00004D                     lcd_send_string@str:
   791                           	callstack 0
   792   00004D                     lcd_set_curser@row:
   793                           	callstack 0
   794                           
   795                           ; 1 bytes @ 0x17
   796   00004D                     	ds	1
   797   00004E                     lcd_init@gpio_ret:
   798                           	callstack 0
   799   00004E                     lcd_send_string@gpio_ret:
   800                           	callstack 0
   801   00004E                     lcd_set_curser@column:
   802                           	callstack 0
   803                           
   804                           ; 1 bytes @ 0x18
   805   00004E                     	ds	1
   806   00004F                     ??_lcd_set_curser:
   807   00004F                     lcd_init@ret:
   808                           	callstack 0
   809   00004F                     lcd_send_string@lcd_ret:
   810                           	callstack 0
   811                           
   812                           ; 1 bytes @ 0x19
   813   00004F                     	ds	1
   814   000050                     lcd_init@pins_counter:
   815                           	callstack 0
   816   000050                     lcd_send_string@ret:
   817                           	callstack 0
   818                           
   819                           ; 1 bytes @ 0x1A
   820   000050                     	ds	1
   821   000051                     lcd_init@lcd_ret:
   822                           	callstack 0
   823   000051                     lcd_set_curser@gpio_ret:
   824                           	callstack 0
   825                           
   826                           ; 1 bytes @ 0x1B
   827   000051                     	ds	1
   828   000052                     lcd_set_curser@lcd_ret:
   829                           	callstack 0
   830                           
   831                           ; 1 bytes @ 0x1C
   832   000052                     	ds	1
   833   000053                     lcd_send_char_data_pos@lcd:
   834                           	callstack 0
   835   000053                     lcd_send_string_pos@lcd:
   836                           	callstack 0
   837                           
   838                           ; 1 bytes @ 0x1D
   839   000053                     	ds	1
   840   000054                     lcd_send_char_data_pos@row:
   841                           	callstack 0
   842   000054                     lcd_send_string_pos@row:
   843                           	callstack 0
   844                           
   845                           ; 1 bytes @ 0x1E
   846   000054                     	ds	1
   847   000055                     lcd_send_char_data_pos@column:
   848                           	callstack 0
   849   000055                     lcd_send_string_pos@column:
   850                           	callstack 0
   851                           
   852                           ; 1 bytes @ 0x1F
   853   000055                     	ds	1
   854   000056                     lcd_send_char_data_pos@data:
   855                           	callstack 0
   856   000056                     lcd_send_string_pos@str:
   857                           	callstack 0
   858                           
   859                           ; 1 bytes @ 0x20
   860   000056                     	ds	1
   861   000057                     lcd_send_char_data_pos@gpio_ret:
   862                           	callstack 0
   863   000057                     lcd_send_string_pos@gpio_ret:
   864                           	callstack 0
   865                           
   866                           ; 1 bytes @ 0x21
   867   000057                     	ds	1
   868   000058                     lcd_send_char_data_pos@lcd_ret:
   869                           	callstack 0
   870   000058                     lcd_send_string_pos@lcd_ret:
   871                           	callstack 0
   872                           
   873                           ; 1 bytes @ 0x22
   874   000058                     	ds	1
   875   000059                     lcd_send_char_data_pos@ret:
   876                           	callstack 0
   877   000059                     lcd_send_string_pos@ret:
   878                           	callstack 0
   879                           
   880                           ; 1 bytes @ 0x23
   881   000059                     	ds	1
   882   00005A                     lcd_send_custom_char@lcd:
   883                           	callstack 0
   884                           
   885                           ; 1 bytes @ 0x24
   886   00005A                     	ds	1
   887   00005B                     lcd_send_custom_char@row:
   888                           	callstack 0
   889                           
   890                           ; 1 bytes @ 0x25
   891   00005B                     	ds	1
   892   00005C                     lcd_send_custom_char@column:
   893                           	callstack 0
   894                           
   895                           ; 1 bytes @ 0x26
   896   00005C                     	ds	1
   897   00005D                     lcd_send_custom_char@_chr:
   898                           	callstack 0
   899                           
   900                           ; 1 bytes @ 0x27
   901   00005D                     	ds	1
   902   00005E                     lcd_send_custom_char@mem_pos:
   903                           	callstack 0
   904                           
   905                           ; 1 bytes @ 0x28
   906   00005E                     	ds	1
   907   00005F                     ??_main:
   908                           
   909                           ; 1 bytes @ 0x29
   910   00005F                     	ds	2
   911                           
   912 ;;
   913 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   914 ;;
   915 ;; *************** function _main *****************
   916 ;; Defined at:
   917 ;;		line 35 in file "app.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;		None
   920 ;; Auto vars:     Size  Location     Type
   921 ;;		None
   922 ;; Return value:  Size  Location     Type
   923 ;;                  2  667[None  ] int 
   924 ;; Registers used:
   925 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   933 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   934 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   935 ;;Total ram usage:        2 bytes
   936 ;; Hardware stack levels required when called: 11
   937 ;; This function calls:
   938 ;;		_app_init
   939 ;;		_harry_up_sign
   940 ;;		_led_off
   941 ;;		_led_on
   942 ;;		_led_toggle
   943 ;;		_modes_checker
   944 ;;		_move_sign
   945 ;;		_seven_segment_write
   946 ;;		_stop_sign
   947 ;;		_wait_sign
   948 ;; This function is called by:
   949 ;;		Startup code after reset
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953                           	psect	text0
   954   0012C0                     __ptext0:
   955                           	callstack 0
   956   0012C0                     _main:
   957                           	callstack 20
   958   0012C0                     
   959                           ;app.c: 37:     app_init();
   960   0012C0  ECE5  F013         	call	_app_init	;wreg free
   961   0012C4                     l4197:
   962                           
   963                           ;app.c: 41: {;app.c: 46:     move_sign();
   964   0012C4  EC76  F011         	call	_move_sign	;wreg free
   965   0012C8                     
   966                           ;app.c: 47:     ret=led_on(&car_led_red);
   967   0012C8  0E34               	movlw	low _car_led_red
   968   0012CA  6E41               	movwf	led_on@led^0,c
   969   0012CC  ECF9  F010         	call	_led_on	;wreg free
   970   0012D0  0100               	movlb	0	; () banked
   971   0012D2  6FB3               	movwf	_ret& (0+255),b
   972   0012D4                     
   973                           ; BSR set to: 0
   974                           ;app.c: 48:     ret=led_on(&pedestrian_led_green);
   975   0012D4  0E2A               	movlw	low _pedestrian_led_green
   976   0012D6  6E41               	movwf	led_on@led^0,c
   977   0012D8  ECF9  F010         	call	_led_on	;wreg free
   978   0012DC  0100               	movlb	0	; () banked
   979   0012DE  6FB3               	movwf	_ret& (0+255),b
   980   0012E0                     
   981                           ; BSR set to: 0
   982                           ;app.c: 49:     for(counter=5;counter>0;counter--){
   983   0012E0  0E05               	movlw	5
   984   0012E2  6E7B               	movwf	_counter^0,c
   985   0012E4                     l4205:
   986   0012E4  507B               	movf	_counter^0,w,c
   987   0012E6  A4D8               	btfss	status,2,c
   988   0012E8  EF78  F009         	goto	u2911
   989   0012EC  EF7A  F009         	goto	u2910
   990   0012F0                     u2911:
   991   0012F0  EF7C  F009         	goto	l4209
   992   0012F4                     u2910:
   993   0012F4  EF93  F009         	goto	l4217
   994   0012F8                     l4209:
   995                           
   996                           ;app.c: 50:         ret=seven_segment_write(&seg_green,counter);
   997   0012F8  0E20               	movlw	low _seg_green
   998   0012FA  6E41               	movwf	seven_segment_write@seg^0,c
   999   0012FC  C07B  F042         	movff	_counter,seven_segment_write@num
  1000   001300  ECC8  F00E         	call	_seven_segment_write	;wreg free
  1001   001304  0100               	movlb	0	; () banked
  1002   001306  6FB3               	movwf	_ret& (0+255),b
  1003   001308                     
  1004                           ; BSR set to: 0
  1005                           ;app.c: 51:         _delay((unsigned long)((900)*(8000000/4000.0)));
  1006   001308  0E0A               	movlw	10
  1007   00130A  6E60               	movwf	(??_main+1)^0,c
  1008   00130C  0E22               	movlw	34
  1009   00130E  6E5F               	movwf	??_main^0,c
  1010   001310  0EA1               	movlw	161
  1011   001312                     u2967:
  1012   001312  2EE8               	decfsz	wreg,f,c
  1013   001314  D7FE               	bra	u2967
  1014   001316  2E5F               	decfsz	??_main^0,f,c
  1015   001318  D7FC               	bra	u2967
  1016   00131A  2E60               	decfsz	(??_main+1)^0,f,c
  1017   00131C  D7FA               	bra	u2967
  1018   00131E  0000               	nop	
  1019   001320                     
  1020                           ;app.c: 52:     }
  1021   001320  067B               	decf	_counter^0,f,c
  1022   001322  EF72  F009         	goto	l4205
  1023   001326                     l4217:
  1024                           
  1025                           ;app.c: 53:     ret=seven_segment_write(&seg_green,0);
  1026   001326  0E20               	movlw	low _seg_green
  1027   001328  6E41               	movwf	seven_segment_write@seg^0,c
  1028   00132A  0E00               	movlw	0
  1029   00132C  6E42               	movwf	seven_segment_write@num^0,c
  1030   00132E  ECC8  F00E         	call	_seven_segment_write	;wreg free
  1031   001332  0100               	movlb	0	; () banked
  1032   001334  6FB3               	movwf	_ret& (0+255),b
  1033   001336                     
  1034                           ; BSR set to: 0
  1035                           ;app.c: 58:     harry_up_sign();
  1036   001336  ECA4  F013         	call	_harry_up_sign	;wreg free
  1037   00133A                     
  1038                           ;app.c: 59:     for(counter=0;counter<20;counter++){
  1039   00133A  0E00               	movlw	0
  1040   00133C  6E7B               	movwf	_counter^0,c
  1041   00133E                     l4223:
  1042   00133E  0E13               	movlw	19
  1043   001340  647B               	cpfsgt	_counter^0,c
  1044   001342  EFA5  F009         	goto	u2921
  1045   001346  EFA7  F009         	goto	u2920
  1046   00134A                     u2921:
  1047   00134A  EFA9  F009         	goto	l4227
  1048   00134E                     u2920:
  1049   00134E  EFC5  F009         	goto	l4237
  1050   001352                     l4227:
  1051                           
  1052                           ;app.c: 60:         ret=led_toggle(&car_led_yellow);
  1053   001352  0E32               	movlw	low _car_led_yellow
  1054   001354  6E3F               	movwf	led_toggle@led^0,c
  1055   001356  EC1A  F013         	call	_led_toggle	;wreg free
  1056   00135A  0100               	movlb	0	; () banked
  1057   00135C  6FB3               	movwf	_ret& (0+255),b
  1058                           
  1059                           ;app.c: 61:         ret=led_toggle(&pedestrian_led_yellow);
  1060   00135E  0E2C               	movlw	low _pedestrian_led_yellow
  1061   001360  6E3F               	movwf	led_toggle@led^0,c
  1062   001362  EC1A  F013         	call	_led_toggle	;wreg free
  1063   001366  0100               	movlb	0	; () banked
  1064   001368  6FB3               	movwf	_ret& (0+255),b
  1065   00136A                     
  1066                           ; BSR set to: 0
  1067                           ;app.c: 62:         modes_checker();
  1068   00136A  EC86  F00B         	call	_modes_checker	;wreg free
  1069   00136E                     
  1070                           ;app.c: 63:         _delay((unsigned long)((250)*(8000000/4000.0)));
  1071   00136E  0E03               	movlw	3
  1072   001370  6E60               	movwf	(??_main+1)^0,c
  1073   001372  0E8A               	movlw	138
  1074   001374  6E5F               	movwf	??_main^0,c
  1075   001376  0E56               	movlw	86
  1076   001378                     u2977:
  1077   001378  2EE8               	decfsz	wreg,f,c
  1078   00137A  D7FE               	bra	u2977
  1079   00137C  2E5F               	decfsz	??_main^0,f,c
  1080   00137E  D7FC               	bra	u2977
  1081   001380  2E60               	decfsz	(??_main+1)^0,f,c
  1082   001382  D7FA               	bra	u2977
  1083   001384                     
  1084                           ;app.c: 64:     }
  1085   001384  2A7B               	incf	_counter^0,f,c
  1086   001386  EF9F  F009         	goto	l4223
  1087   00138A                     l4237:
  1088                           
  1089                           ;app.c: 65:     ret=led_off(&car_led_red);
  1090   00138A  0E34               	movlw	low _car_led_red
  1091   00138C  6E41               	movwf	led_off@led^0,c
  1092   00138E  EC23  F011         	call	_led_off	;wreg free
  1093   001392  0100               	movlb	0	; () banked
  1094   001394  6FB3               	movwf	_ret& (0+255),b
  1095                           
  1096                           ;app.c: 66:     ret=led_off(&pedestrian_led_green);
  1097   001396  0E2A               	movlw	low _pedestrian_led_green
  1098   001398  6E41               	movwf	led_off@led^0,c
  1099   00139A  EC23  F011         	call	_led_off	;wreg free
  1100   00139E  0100               	movlb	0	; () banked
  1101   0013A0  6FB3               	movwf	_ret& (0+255),b
  1102                           
  1103                           ;app.c: 67:     ret=led_off(&car_led_yellow);
  1104   0013A2  0E32               	movlw	low _car_led_yellow
  1105   0013A4  6E41               	movwf	led_off@led^0,c
  1106   0013A6  EC23  F011         	call	_led_off	;wreg free
  1107   0013AA  0100               	movlb	0	; () banked
  1108   0013AC  6FB3               	movwf	_ret& (0+255),b
  1109                           
  1110                           ;app.c: 68:     ret=led_off(&pedestrian_led_yellow);
  1111   0013AE  0E2C               	movlw	low _pedestrian_led_yellow
  1112   0013B0  6E41               	movwf	led_off@led^0,c
  1113   0013B2  EC23  F011         	call	_led_off	;wreg free
  1114   0013B6  0100               	movlb	0	; () banked
  1115   0013B8  6FB3               	movwf	_ret& (0+255),b
  1116   0013BA                     
  1117                           ; BSR set to: 0
  1118                           ;app.c: 73:     stop_sign();
  1119   0013BA  EC4D  F011         	call	_stop_sign	;wreg free
  1120   0013BE                     
  1121                           ;app.c: 74:     ret=led_on(&car_led_green);
  1122   0013BE  0E30               	movlw	low _car_led_green
  1123   0013C0  6E41               	movwf	led_on@led^0,c
  1124   0013C2  ECF9  F010         	call	_led_on	;wreg free
  1125   0013C6  0100               	movlb	0	; () banked
  1126   0013C8  6FB3               	movwf	_ret& (0+255),b
  1127   0013CA                     
  1128                           ; BSR set to: 0
  1129                           ;app.c: 75:     ret=led_on(&pedestrian_led_red);
  1130   0013CA  0E2E               	movlw	low _pedestrian_led_red
  1131   0013CC  6E41               	movwf	led_on@led^0,c
  1132   0013CE  ECF9  F010         	call	_led_on	;wreg free
  1133   0013D2  0100               	movlb	0	; () banked
  1134   0013D4  6FB3               	movwf	_ret& (0+255),b
  1135   0013D6                     
  1136                           ; BSR set to: 0
  1137                           ;app.c: 76:     for(counter=5;counter>0;counter--){
  1138   0013D6  0E05               	movlw	5
  1139   0013D8  6E7B               	movwf	_counter^0,c
  1140   0013DA                     l4247:
  1141   0013DA  507B               	movf	_counter^0,w,c
  1142   0013DC  A4D8               	btfss	status,2,c
  1143   0013DE  EFF3  F009         	goto	u2931
  1144   0013E2  EFF5  F009         	goto	u2930
  1145   0013E6                     u2931:
  1146   0013E6  EFF7  F009         	goto	l4251
  1147   0013EA                     u2930:
  1148   0013EA  EF10  F00A         	goto	l4261
  1149   0013EE                     l4251:
  1150                           
  1151                           ;app.c: 77:         modes_checker();
  1152   0013EE  EC86  F00B         	call	_modes_checker	;wreg free
  1153   0013F2                     
  1154                           ;app.c: 78:         ret=seven_segment_write(&seg_red,counter);
  1155   0013F2  0E25               	movlw	low _seg_red
  1156   0013F4  6E41               	movwf	seven_segment_write@seg^0,c
  1157   0013F6  C07B  F042         	movff	_counter,seven_segment_write@num
  1158   0013FA  ECC8  F00E         	call	_seven_segment_write	;wreg free
  1159   0013FE  0100               	movlb	0	; () banked
  1160   001400  6FB3               	movwf	_ret& (0+255),b
  1161   001402                     
  1162                           ; BSR set to: 0
  1163                           ;app.c: 79:         _delay((unsigned long)((900)*(8000000/4000.0)));
  1164   001402  0E0A               	movlw	10
  1165   001404  6E60               	movwf	(??_main+1)^0,c
  1166   001406  0E22               	movlw	34
  1167   001408  6E5F               	movwf	??_main^0,c
  1168   00140A  0EA1               	movlw	161
  1169   00140C                     u2987:
  1170   00140C  2EE8               	decfsz	wreg,f,c
  1171   00140E  D7FE               	bra	u2987
  1172   001410  2E5F               	decfsz	??_main^0,f,c
  1173   001412  D7FC               	bra	u2987
  1174   001414  2E60               	decfsz	(??_main+1)^0,f,c
  1175   001416  D7FA               	bra	u2987
  1176   001418  0000               	nop	
  1177   00141A                     
  1178                           ;app.c: 80:     }
  1179   00141A  067B               	decf	_counter^0,f,c
  1180   00141C  EFED  F009         	goto	l4247
  1181   001420                     l4261:
  1182                           
  1183                           ;app.c: 81:     ret=seven_segment_write(&seg_red,0);
  1184   001420  0E25               	movlw	low _seg_red
  1185   001422  6E41               	movwf	seven_segment_write@seg^0,c
  1186   001424  0E00               	movlw	0
  1187   001426  6E42               	movwf	seven_segment_write@num^0,c
  1188   001428  ECC8  F00E         	call	_seven_segment_write	;wreg free
  1189   00142C  0100               	movlb	0	; () banked
  1190   00142E  6FB3               	movwf	_ret& (0+255),b
  1191   001430                     
  1192                           ; BSR set to: 0
  1193                           ;app.c: 86:     wait_sign();
  1194   001430  EC97  F013         	call	_wait_sign	;wreg free
  1195   001434                     
  1196                           ;app.c: 87:     for(counter=0;counter<20;counter++){
  1197   001434  0E00               	movlw	0
  1198   001436  6E7B               	movwf	_counter^0,c
  1199   001438                     l4267:
  1200   001438  0E13               	movlw	19
  1201   00143A  647B               	cpfsgt	_counter^0,c
  1202   00143C  EF22  F00A         	goto	u2941
  1203   001440  EF24  F00A         	goto	u2940
  1204   001444                     u2941:
  1205   001444  EF26  F00A         	goto	l4271
  1206   001448                     u2940:
  1207   001448  EF42  F00A         	goto	l4281
  1208   00144C                     l4271:
  1209                           
  1210                           ;app.c: 88:         ret=led_toggle(&car_led_yellow);
  1211   00144C  0E32               	movlw	low _car_led_yellow
  1212   00144E  6E3F               	movwf	led_toggle@led^0,c
  1213   001450  EC1A  F013         	call	_led_toggle	;wreg free
  1214   001454  0100               	movlb	0	; () banked
  1215   001456  6FB3               	movwf	_ret& (0+255),b
  1216                           
  1217                           ;app.c: 89:         ret=led_toggle(&pedestrian_led_yellow);
  1218   001458  0E2C               	movlw	low _pedestrian_led_yellow
  1219   00145A  6E3F               	movwf	led_toggle@led^0,c
  1220   00145C  EC1A  F013         	call	_led_toggle	;wreg free
  1221   001460  0100               	movlb	0	; () banked
  1222   001462  6FB3               	movwf	_ret& (0+255),b
  1223   001464                     
  1224                           ; BSR set to: 0
  1225                           ;app.c: 90:         modes_checker();
  1226   001464  EC86  F00B         	call	_modes_checker	;wreg free
  1227   001468                     
  1228                           ;app.c: 91:         _delay((unsigned long)((250)*(8000000/4000.0)));
  1229   001468  0E03               	movlw	3
  1230   00146A  6E60               	movwf	(??_main+1)^0,c
  1231   00146C  0E8A               	movlw	138
  1232   00146E  6E5F               	movwf	??_main^0,c
  1233   001470  0E56               	movlw	86
  1234   001472                     u2997:
  1235   001472  2EE8               	decfsz	wreg,f,c
  1236   001474  D7FE               	bra	u2997
  1237   001476  2E5F               	decfsz	??_main^0,f,c
  1238   001478  D7FC               	bra	u2997
  1239   00147A  2E60               	decfsz	(??_main+1)^0,f,c
  1240   00147C  D7FA               	bra	u2997
  1241   00147E                     
  1242                           ;app.c: 92:     }
  1243   00147E  2A7B               	incf	_counter^0,f,c
  1244   001480  EF1C  F00A         	goto	l4267
  1245   001484                     l4281:
  1246                           
  1247                           ;app.c: 93:     ret=led_off(&car_led_green);
  1248   001484  0E30               	movlw	low _car_led_green
  1249   001486  6E41               	movwf	led_off@led^0,c
  1250   001488  EC23  F011         	call	_led_off	;wreg free
  1251   00148C  0100               	movlb	0	; () banked
  1252   00148E  6FB3               	movwf	_ret& (0+255),b
  1253                           
  1254                           ;app.c: 94:     ret=led_off(&pedestrian_led_red);
  1255   001490  0E2E               	movlw	low _pedestrian_led_red
  1256   001492  6E41               	movwf	led_off@led^0,c
  1257   001494  EC23  F011         	call	_led_off	;wreg free
  1258   001498  0100               	movlb	0	; () banked
  1259   00149A  6FB3               	movwf	_ret& (0+255),b
  1260   00149C  EF62  F009         	goto	l4197
  1261   0014A0  EF07  F000         	goto	start
  1262   0014A4                     __end_of_main:
  1263                           	callstack 0
  1264                           
  1265 ;; *************** function _modes_checker *****************
  1266 ;; Defined at:
  1267 ;;		line 108 in file "app.c"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;		None
  1270 ;; Auto vars:     Size  Location     Type
  1271 ;;		None
  1272 ;; Return value:  Size  Location     Type
  1273 ;;                  1    wreg      void 
  1274 ;; Registers used:
  1275 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1276 ;; Tracked objects:
  1277 ;;		On entry : 0/0
  1278 ;;		On exit  : 0/0
  1279 ;;		Unchanged: 0/0
  1280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1285 ;;Total ram usage:        0 bytes
  1286 ;; Hardware stack levels used: 1
  1287 ;; Hardware stack levels required when called: 10
  1288 ;; This function calls:
  1289 ;;		_harry_up_sign
  1290 ;;		_led_off
  1291 ;;		_led_on
  1292 ;;		_move_sign
  1293 ;;		_pedestrian_green_traffic_counter
  1294 ;;		_seven_segment_write
  1295 ;;		_stop_sign
  1296 ;;		_wait_sign
  1297 ;;		_yellow_leds_toggle
  1298 ;; This function is called by:
  1299 ;;		_main
  1300 ;; This function uses a non-reentrant model
  1301 ;;
  1302                           
  1303                           	psect	text1
  1304   00170C                     __ptext1:
  1305                           	callstack 0
  1306   00170C                     _modes_checker:
  1307                           	callstack 20
  1308   00170C                     
  1309                           ;app.c: 117:     if(flag_mode==1){
  1310   00170C  0477               	decf	_flag_mode^0,w,c
  1311   00170E  A4D8               	btfss	status,2,c
  1312   001710  EF8C  F00B         	goto	u2861
  1313   001714  EF8E  F00B         	goto	u2860
  1314   001718                     u2861:
  1315   001718  EFE3  F00B         	goto	l4159
  1316   00171C                     u2860:
  1317   00171C                     
  1318                           ;app.c: 118:         ret=seven_segment_write(&seg_red,0);
  1319   00171C  0E25               	movlw	low _seg_red
  1320   00171E  6E41               	movwf	seven_segment_write@seg^0,c
  1321   001720  0E00               	movlw	0
  1322   001722  6E42               	movwf	seven_segment_write@num^0,c
  1323   001724  ECC8  F00E         	call	_seven_segment_write	;wreg free
  1324   001728  0100               	movlb	0	; () banked
  1325   00172A  6FB3               	movwf	_ret& (0+255),b
  1326   00172C                     
  1327                           ; BSR set to: 0
  1328                           ;app.c: 119:         wait_sign();
  1329   00172C  EC97  F013         	call	_wait_sign	;wreg free
  1330   001730                     
  1331                           ;app.c: 120:         yellow_leds_toggle();
  1332   001730  EC3A  F012         	call	_yellow_leds_toggle	;wreg free
  1333                           
  1334                           ;app.c: 121:         move_sign();
  1335   001734  EC76  F011         	call	_move_sign	;wreg free
  1336   001738                     
  1337                           ;app.c: 122:         ret=led_off(&car_led_green);
  1338   001738  0E30               	movlw	low _car_led_green
  1339   00173A  6E41               	movwf	led_off@led^0,c
  1340   00173C  EC23  F011         	call	_led_off	;wreg free
  1341   001740  0100               	movlb	0	; () banked
  1342   001742  6FB3               	movwf	_ret& (0+255),b
  1343   001744                     
  1344                           ; BSR set to: 0
  1345                           ;app.c: 123:         ret=led_off(&pedestrian_led_red);
  1346   001744  0E2E               	movlw	low _pedestrian_led_red
  1347   001746  6E41               	movwf	led_off@led^0,c
  1348   001748  EC23  F011         	call	_led_off	;wreg free
  1349   00174C  0100               	movlb	0	; () banked
  1350   00174E  6FB3               	movwf	_ret& (0+255),b
  1351   001750                     
  1352                           ; BSR set to: 0
  1353                           ;app.c: 124:         ret=led_on(&car_led_red);
  1354   001750  0E34               	movlw	low _car_led_red
  1355   001752  6E41               	movwf	led_on@led^0,c
  1356   001754  ECF9  F010         	call	_led_on	;wreg free
  1357   001758  0100               	movlb	0	; () banked
  1358   00175A  6FB3               	movwf	_ret& (0+255),b
  1359   00175C                     
  1360                           ; BSR set to: 0
  1361                           ;app.c: 125:         ret=led_on(&pedestrian_led_green);
  1362   00175C  0E2A               	movlw	low _pedestrian_led_green
  1363   00175E  6E41               	movwf	led_on@led^0,c
  1364   001760  ECF9  F010         	call	_led_on	;wreg free
  1365   001764  0100               	movlb	0	; () banked
  1366   001766  6FB3               	movwf	_ret& (0+255),b
  1367   001768                     
  1368                           ; BSR set to: 0
  1369                           ;app.c: 126:         pedestrian_green_traffic_counter(5);
  1370   001768  0E05               	movlw	5
  1371   00176A  EC5D  F012         	call	_pedestrian_green_traffic_counter
  1372   00176E                     
  1373                           ;app.c: 127:         ret=seven_segment_write(&seg_green,0);
  1374   00176E  0E20               	movlw	low _seg_green
  1375   001770  6E41               	movwf	seven_segment_write@seg^0,c
  1376   001772  0E00               	movlw	0
  1377   001774  6E42               	movwf	seven_segment_write@num^0,c
  1378   001776  ECC8  F00E         	call	_seven_segment_write	;wreg free
  1379   00177A  0100               	movlb	0	; () banked
  1380   00177C  6FB3               	movwf	_ret& (0+255),b
  1381                           
  1382                           ;app.c: 128:         harry_up_sign();
  1383   00177E  ECA4  F013         	call	_harry_up_sign	;wreg free
  1384   001782                     
  1385                           ;app.c: 129:         yellow_leds_toggle();
  1386   001782  EC3A  F012         	call	_yellow_leds_toggle	;wreg free
  1387   001786                     
  1388                           ;app.c: 130:         ret=led_off(&car_led_red);
  1389   001786  0E34               	movlw	low _car_led_red
  1390   001788  6E41               	movwf	led_off@led^0,c
  1391   00178A  EC23  F011         	call	_led_off	;wreg free
  1392   00178E  0100               	movlb	0	; () banked
  1393   001790  6FB3               	movwf	_ret& (0+255),b
  1394   001792                     
  1395                           ; BSR set to: 0
  1396                           ;app.c: 131:         ret=led_off(&pedestrian_led_green);
  1397   001792  0E2A               	movlw	low _pedestrian_led_green
  1398   001794  6E41               	movwf	led_off@led^0,c
  1399   001796  EC23  F011         	call	_led_off	;wreg free
  1400   00179A  0100               	movlb	0	; () banked
  1401   00179C  6FB3               	movwf	_ret& (0+255),b
  1402   00179E                     
  1403                           ; BSR set to: 0
  1404                           ;app.c: 132:         stop_sign();
  1405   00179E  EC4D  F011         	call	_stop_sign	;wreg free
  1406   0017A2                     
  1407                           ;app.c: 133:         ret=led_on(&pedestrian_led_red);
  1408   0017A2  0E2E               	movlw	low _pedestrian_led_red
  1409   0017A4  6E41               	movwf	led_on@led^0,c
  1410   0017A6  ECF9  F010         	call	_led_on	;wreg free
  1411   0017AA  0100               	movlb	0	; () banked
  1412   0017AC  6FB3               	movwf	_ret& (0+255),b
  1413   0017AE                     
  1414                           ; BSR set to: 0
  1415                           ;app.c: 134:         ret=led_on(&car_led_green);
  1416   0017AE  0E30               	movlw	low _car_led_green
  1417   0017B0  6E41               	movwf	led_on@led^0,c
  1418   0017B2  ECF9  F010         	call	_led_on	;wreg free
  1419   0017B6  0100               	movlb	0	; () banked
  1420   0017B8  6FB3               	movwf	_ret& (0+255),b
  1421   0017BA                     l4155:
  1422                           
  1423                           ;app.c: 135:         counter=0;
  1424   0017BA  0E00               	movlw	0
  1425   0017BC  6E7B               	movwf	_counter^0,c
  1426   0017BE                     
  1427                           ;app.c: 136:         flag_mode=0;
  1428   0017BE  0E00               	movlw	0
  1429   0017C0  6E77               	movwf	_flag_mode^0,c
  1430                           
  1431                           ;app.c: 137:      }
  1432   0017C2  EF1C  F00C         	goto	l691
  1433   0017C6                     l4159:
  1434   0017C6  0E02               	movlw	2
  1435   0017C8  1877               	xorwf	_flag_mode^0,w,c
  1436   0017CA  A4D8               	btfss	status,2,c
  1437   0017CC  EFEA  F00B         	goto	u2871
  1438   0017D0  EFEC  F00B         	goto	u2870
  1439   0017D4                     u2871:
  1440   0017D4  EF1C  F00C         	goto	l691
  1441   0017D8                     u2870:
  1442   0017D8  AA82               	btfss	130,5,c	;volatile
  1443   0017DA  EFF1  F00B         	goto	u2881
  1444   0017DE  EFF3  F00B         	goto	u2880
  1445   0017E2                     u2881:
  1446   0017E2  EF1C  F00C         	goto	l691
  1447   0017E6                     u2880:
  1448   0017E6                     
  1449                           ;app.c: 144:         ret=led_off(&car_led_yellow);
  1450   0017E6  0E32               	movlw	low _car_led_yellow
  1451   0017E8  6E41               	movwf	led_off@led^0,c
  1452   0017EA  EC23  F011         	call	_led_off	;wreg free
  1453   0017EE  0100               	movlb	0	; () banked
  1454   0017F0  6FB3               	movwf	_ret& (0+255),b
  1455                           
  1456                           ;app.c: 145:         ret=led_off(&pedestrian_led_yellow);
  1457   0017F2  0E2C               	movlw	low _pedestrian_led_yellow
  1458   0017F4  6E41               	movwf	led_off@led^0,c
  1459   0017F6  EC23  F011         	call	_led_off	;wreg free
  1460   0017FA  0100               	movlb	0	; () banked
  1461   0017FC  6FB3               	movwf	_ret& (0+255),b
  1462   0017FE                     
  1463                           ; BSR set to: 0
  1464                           ;app.c: 146:         move_sign();
  1465   0017FE  EC76  F011         	call	_move_sign	;wreg free
  1466   001802                     
  1467                           ;app.c: 147:         ret=led_on(&car_led_red);
  1468   001802  0E34               	movlw	low _car_led_red
  1469   001804  6E41               	movwf	led_on@led^0,c
  1470   001806  ECF9  F010         	call	_led_on	;wreg free
  1471   00180A  0100               	movlb	0	; () banked
  1472   00180C  6FB3               	movwf	_ret& (0+255),b
  1473   00180E                     
  1474                           ; BSR set to: 0
  1475                           ;app.c: 148:         ret=led_on(&pedestrian_led_green);
  1476   00180E  0E2A               	movlw	low _pedestrian_led_green
  1477   001810  6E41               	movwf	led_on@led^0,c
  1478   001812  ECF9  F010         	call	_led_on	;wreg free
  1479   001816  0100               	movlb	0	; () banked
  1480   001818  6FB3               	movwf	_ret& (0+255),b
  1481   00181A                     
  1482                           ; BSR set to: 0
  1483                           ;app.c: 149:         pedestrian_green_traffic_counter(5);
  1484   00181A  0E05               	movlw	5
  1485   00181C  EC5D  F012         	call	_pedestrian_green_traffic_counter
  1486   001820                     
  1487                           ;app.c: 150:         ret=seven_segment_write(&seg_green,0);
  1488   001820  0E20               	movlw	low _seg_green
  1489   001822  6E41               	movwf	seven_segment_write@seg^0,c
  1490   001824  0E00               	movlw	0
  1491   001826  6E42               	movwf	seven_segment_write@num^0,c
  1492   001828  ECC8  F00E         	call	_seven_segment_write	;wreg free
  1493   00182C  0100               	movlb	0	; () banked
  1494   00182E  6FB3               	movwf	_ret& (0+255),b
  1495   001830                     
  1496                           ; BSR set to: 0
  1497                           ;app.c: 151:         harry_up_sign();
  1498   001830  ECA4  F013         	call	_harry_up_sign	;wreg free
  1499   001834  EFDD  F00B         	goto	l4155
  1500   001838                     l691:
  1501   001838  0012               	return		;funcret
  1502   00183A                     __end_of_modes_checker:
  1503                           	callstack 0
  1504                           
  1505 ;; *************** function _yellow_leds_toggle *****************
  1506 ;; Defined at:
  1507 ;;		line 157 in file "app.c"
  1508 ;; Parameters:    Size  Location     Type
  1509 ;;		None
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;  counter         1   14[COMRAM] unsigned char 
  1512 ;; Return value:  Size  Location     Type
  1513 ;;                  1    wreg      void 
  1514 ;; Registers used:
  1515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1516 ;; Tracked objects:
  1517 ;;		On entry : 0/0
  1518 ;;		On exit  : 0/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1522 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1523 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1524 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;Total ram usage:        3 bytes
  1526 ;; Hardware stack levels used: 1
  1527 ;; Hardware stack levels required when called: 5
  1528 ;; This function calls:
  1529 ;;		_led_toggle
  1530 ;; This function is called by:
  1531 ;;		_modes_checker
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535                           	psect	text2
  1536   002474                     __ptext2:
  1537                           	callstack 0
  1538   002474                     _yellow_leds_toggle:
  1539                           	callstack 24
  1540   002474                     
  1541                           ;app.c: 158:     uint8 counter;;app.c: 159:     for(counter=0;counter<20;counter++){
  1542   002474  0E00               	movlw	0
  1543   002476  6E44               	movwf	yellow_leds_toggle@counter^0,c
  1544   002478                     l3321:
  1545                           
  1546                           ;app.c: 160:         ret=led_toggle(&car_led_yellow);
  1547   002478  0E32               	movlw	low _car_led_yellow
  1548   00247A  6E3F               	movwf	led_toggle@led^0,c
  1549   00247C  EC1A  F013         	call	_led_toggle	;wreg free
  1550   002480  0100               	movlb	0	; () banked
  1551   002482  6FB3               	movwf	_ret& (0+255),b
  1552                           
  1553                           ;app.c: 161:         ret=led_toggle(&pedestrian_led_yellow);
  1554   002484  0E2C               	movlw	low _pedestrian_led_yellow
  1555   002486  6E3F               	movwf	led_toggle@led^0,c
  1556   002488  EC1A  F013         	call	_led_toggle	;wreg free
  1557   00248C  0100               	movlb	0	; () banked
  1558   00248E  6FB3               	movwf	_ret& (0+255),b
  1559   002490                     
  1560                           ; BSR set to: 0
  1561                           ;app.c: 162:         _delay((unsigned long)((250)*(8000000/4000.0)));
  1562   002490  0E03               	movlw	3
  1563   002492  6E43               	movwf	(??_yellow_leds_toggle+1)^0,c
  1564   002494  0E8A               	movlw	138
  1565   002496  6E42               	movwf	??_yellow_leds_toggle^0,c
  1566   002498  0E56               	movlw	86
  1567   00249A                     u3007:
  1568   00249A  2EE8               	decfsz	wreg,f,c
  1569   00249C  D7FE               	bra	u3007
  1570   00249E  2E42               	decfsz	??_yellow_leds_toggle^0,f,c
  1571   0024A0  D7FC               	bra	u3007
  1572   0024A2  2E43               	decfsz	(??_yellow_leds_toggle+1)^0,f,c
  1573   0024A4  D7FA               	bra	u3007
  1574   0024A6                     
  1575                           ;app.c: 163:     }
  1576   0024A6  2A44               	incf	yellow_leds_toggle@counter^0,f,c
  1577   0024A8  0E13               	movlw	19
  1578   0024AA  6444               	cpfsgt	yellow_leds_toggle@counter^0,c
  1579   0024AC  EF5A  F012         	goto	u2241
  1580   0024B0  EF5C  F012         	goto	u2240
  1581   0024B4                     u2241:
  1582   0024B4  EF3C  F012         	goto	l3321
  1583   0024B8                     u2240:
  1584   0024B8  0012               	return		;funcret
  1585   0024BA                     __end_of_yellow_leds_toggle:
  1586                           	callstack 0
  1587                           
  1588 ;; *************** function _led_toggle *****************
  1589 ;; Defined at:
  1590 ;;		line 89 in file "ECUAL/LED/led.c"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;  led             1    9[COMRAM] PTR struct .
  1593 ;;		 -> pedestrian_led_yellow(2), car_led_yellow(2), 
  1594 ;; Auto vars:     Size  Location     Type
  1595 ;;  ret             1   11[COMRAM] unsigned char 
  1596 ;;  gpio_ret        1   10[COMRAM] unsigned char 
  1597 ;; Return value:  Size  Location     Type
  1598 ;;                  1    wreg      unsigned char 
  1599 ;; Registers used:
  1600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1606 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1609 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1610 ;;Total ram usage:        3 bytes
  1611 ;; Hardware stack levels used: 1
  1612 ;; Hardware stack levels required when called: 4
  1613 ;; This function calls:
  1614 ;;		_gpio_pin_toggle_logic
  1615 ;; This function is called by:
  1616 ;;		_main
  1617 ;;		_yellow_leds_toggle
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           	psect	text3
  1622   002634                     __ptext3:
  1623                           	callstack 0
  1624   002634                     _led_toggle:
  1625                           	callstack 24
  1626   002634                     
  1627                           ;ECUAL/LED/led.c: 92:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  1628   002634  0E00               	movlw	0
  1629   002636  6E40               	movwf	led_toggle@gpio_ret^0,c
  1630                           
  1631                           ;ECUAL/LED/led.c: 93:     if(((void*)0)==led){
  1632   002638  503F               	movf	led_toggle@led^0,w,c
  1633   00263A  A4D8               	btfss	status,2,c
  1634   00263C  EF22  F013         	goto	u2061
  1635   002640  EF24  F013         	goto	u2060
  1636   002644                     u2061:
  1637   002644  EF28  F013         	goto	l3073
  1638   002648                     u2060:
  1639   002648                     
  1640                           ;ECUAL/LED/led.c: 94:         ret=(Std_ReturnType)0x00;
  1641   002648  0E00               	movlw	0
  1642   00264A  6E41               	movwf	led_toggle@ret^0,c
  1643                           
  1644                           ;ECUAL/LED/led.c: 95:     }
  1645   00264C  EF2E  F013         	goto	l3077
  1646   002650                     l3073:
  1647   002650  C03F  F039         	movff	led_toggle@led,gpio_pin_toggle_logic@pin
  1648   002654  EC0B  F00E         	call	_gpio_pin_toggle_logic	;wreg free
  1649   002658                     
  1650                           ;ECUAL/LED/led.c: 98:         ret=(Std_ReturnType)0x01;
  1651   002658  0E01               	movlw	1
  1652   00265A  6E41               	movwf	led_toggle@ret^0,c
  1653   00265C                     l3077:
  1654                           
  1655                           ;ECUAL/LED/led.c: 101:     return ret;
  1656   00265C  5041               	movf	led_toggle@ret^0,w,c
  1657   00265E  0012               	return		;funcret
  1658   002660                     __end_of_led_toggle:
  1659                           	callstack 0
  1660                           
  1661 ;; *************** function _gpio_pin_toggle_logic *****************
  1662 ;; Defined at:
  1663 ;;		line 138 in file "MCAL/GPIO/gpio.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;  pin             1    3[COMRAM] PTR struct .
  1666 ;;		 -> pedestrian_led_yellow(2), car_led_yellow(2), 
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;  ret             1    8[COMRAM] unsigned char 
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      unsigned char 
  1671 ;; Registers used:
  1672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1678 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1679 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1680 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1681 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1682 ;;Total ram usage:        6 bytes
  1683 ;; Hardware stack levels used: 1
  1684 ;; Hardware stack levels required when called: 3
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_led_toggle
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           	psect	text4
  1693   001C16                     __ptext4:
  1694                           	callstack 0
  1695   001C16                     _gpio_pin_toggle_logic:
  1696                           	callstack 24
  1697   001C16                     
  1698                           ;MCAL/GPIO/gpio.c: 141:     if(((void*)0)==pin ||(pin->pin)>7){
  1699   001C16  5039               	movf	gpio_pin_toggle_logic@pin^0,w,c
  1700   001C18  B4D8               	btfsc	status,2,c
  1701   001C1A  EF11  F00E         	goto	u1801
  1702   001C1E  EF13  F00E         	goto	u1800
  1703   001C22                     u1801:
  1704   001C22  EF23  F00E         	goto	l2855
  1705   001C26                     u1800:
  1706   001C26  5039               	movf	gpio_pin_toggle_logic@pin^0,w,c
  1707   001C28  6ED9               	movwf	fsr2l,c
  1708   001C2A  6ADA               	clrf	fsr2h,c
  1709   001C2C  30DF               	rrcf	223,w,c
  1710   001C2E  32E8               	rrcf	wreg,f,c
  1711   001C30  32E8               	rrcf	wreg,f,c
  1712   001C32  0B07               	andlw	7
  1713   001C34  6E3A               	movwf	??_gpio_pin_toggle_logic^0,c
  1714   001C36  0E07               	movlw	7
  1715   001C38  643A               	cpfsgt	??_gpio_pin_toggle_logic^0,c
  1716   001C3A  EF21  F00E         	goto	u1811
  1717   001C3E  EF23  F00E         	goto	u1810
  1718   001C42                     u1811:
  1719   001C42  EF27  F00E         	goto	l2857
  1720   001C46                     u1810:
  1721   001C46                     l2855:
  1722                           
  1723                           ;MCAL/GPIO/gpio.c: 142:         ret=(Std_ReturnType)0x00;
  1724   001C46  0E00               	movlw	0
  1725   001C48  6E3E               	movwf	gpio_pin_toggle_logic@ret^0,c
  1726                           
  1727                           ;MCAL/GPIO/gpio.c: 143:     }
  1728   001C4A  EF4F  F00E         	goto	l2861
  1729   001C4E                     l2857:
  1730                           
  1731                           ;MCAL/GPIO/gpio.c: 145:         (*latx[pin->port] ^= ((uint8)1<<pin->pin));
  1732   001C4E  5039               	movf	gpio_pin_toggle_logic@pin^0,w,c
  1733   001C50  6ED9               	movwf	fsr2l,c
  1734   001C52  6ADA               	clrf	fsr2h,c
  1735   001C54  30DF               	rrcf	223,w,c
  1736   001C56  32E8               	rrcf	wreg,f,c
  1737   001C58  32E8               	rrcf	wreg,f,c
  1738   001C5A  0B07               	andlw	7
  1739   001C5C  6E3A               	movwf	??_gpio_pin_toggle_logic^0,c
  1740   001C5E  0E01               	movlw	1
  1741   001C60  6E3B               	movwf	(??_gpio_pin_toggle_logic+1)^0,c
  1742   001C62  2A3A               	incf	??_gpio_pin_toggle_logic^0,f,c
  1743   001C64  EF36  F00E         	goto	u1824
  1744   001C68                     u1825:
  1745   001C68  90D8               	bcf	status,0,c
  1746   001C6A  363B               	rlcf	(??_gpio_pin_toggle_logic+1)^0,f,c
  1747   001C6C                     u1824:
  1748   001C6C  2E3A               	decfsz	??_gpio_pin_toggle_logic^0,f,c
  1749   001C6E  EF34  F00E         	goto	u1825
  1750   001C72  5039               	movf	gpio_pin_toggle_logic@pin^0,w,c
  1751   001C74  6ED9               	movwf	fsr2l,c
  1752   001C76  6ADA               	clrf	fsr2h,c
  1753   001C78  50DF               	movf	223,w,c
  1754   001C7A  0B07               	andlw	7
  1755   001C7C  0D02               	mullw	2
  1756   001C7E  50F3               	movf	243,w,c
  1757   001C80  0F01               	addlw	low _latx
  1758   001C82  6ED9               	movwf	fsr2l,c
  1759   001C84  6ADA               	clrf	fsr2h,c
  1760   001C86  CFDE F03C          	movff	postinc2,??_gpio_pin_toggle_logic+2
  1761   001C8A  CFDD F03D          	movff	postdec2,??_gpio_pin_toggle_logic+3
  1762   001C8E  C03C  FFD9         	movff	??_gpio_pin_toggle_logic+2,fsr2l
  1763   001C92  C03D  FFDA         	movff	??_gpio_pin_toggle_logic+3,fsr2h
  1764   001C96  503B               	movf	(??_gpio_pin_toggle_logic+1)^0,w,c
  1765   001C98  1ADF               	xorwf	indf2,f,c
  1766   001C9A                     
  1767                           ;MCAL/GPIO/gpio.c: 146:         ret=(Std_ReturnType)0x01;
  1768   001C9A  0E01               	movlw	1
  1769   001C9C  6E3E               	movwf	gpio_pin_toggle_logic@ret^0,c
  1770   001C9E                     l2861:
  1771                           
  1772                           ;MCAL/GPIO/gpio.c: 149:     return ret;
  1773   001C9E  503E               	movf	gpio_pin_toggle_logic@ret^0,w,c
  1774   001CA0  0012               	return		;funcret
  1775   001CA2                     __end_of_gpio_pin_toggle_logic:
  1776                           	callstack 0
  1777                           
  1778 ;; *************** function _wait_sign *****************
  1779 ;; Defined at:
  1780 ;;		line 178 in file "app.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;		None
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;		None
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      void 
  1787 ;; Registers used:
  1788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;Total ram usage:        0 bytes
  1799 ;; Hardware stack levels used: 1
  1800 ;; Hardware stack levels required when called: 8
  1801 ;; This function calls:
  1802 ;;		_lcd_send_string_pos
  1803 ;; This function is called by:
  1804 ;;		_main
  1805 ;;		_modes_checker
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text5
  1810   00272E                     __ptext5:
  1811                           	callstack 0
  1812   00272E                     _wait_sign:
  1813                           	callstack 22
  1814   00272E                     
  1815                           ;app.c: 179:     ret=lcd_send_string_pos(&lcd,2,8,"WAIT... ");
  1816   00272E  0E1A               	movlw	low _lcd
  1817   002730  6E53               	movwf	lcd_send_string_pos@lcd^0,c
  1818   002732  0E02               	movlw	2
  1819   002734  6E54               	movwf	lcd_send_string_pos@row^0,c
  1820   002736  0E08               	movlw	8
  1821   002738  6E55               	movwf	lcd_send_string_pos@column^0,c
  1822   00273A  0E13               	movlw	low STR_6
  1823   00273C  6E56               	movwf	lcd_send_string_pos@str^0,c
  1824   00273E  EC8E  F00E         	call	_lcd_send_string_pos	;wreg free
  1825   002742  0100               	movlb	0	; () banked
  1826   002744  6FB3               	movwf	_ret& (0+255),b
  1827   002746                     
  1828                           ; BSR set to: 0
  1829   002746  0012               	return		;funcret
  1830   002748                     __end_of_wait_sign:
  1831                           	callstack 0
  1832                           
  1833 ;; *************** function _stop_sign *****************
  1834 ;; Defined at:
  1835 ;;		line 166 in file "app.c"
  1836 ;; Parameters:    Size  Location     Type
  1837 ;;		None
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;		None
  1840 ;; Return value:  Size  Location     Type
  1841 ;;                  1    wreg      void 
  1842 ;; Registers used:
  1843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1844 ;; Tracked objects:
  1845 ;;		On entry : 0/0
  1846 ;;		On exit  : 0/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1853 ;;Total ram usage:        0 bytes
  1854 ;; Hardware stack levels used: 1
  1855 ;; Hardware stack levels required when called: 9
  1856 ;; This function calls:
  1857 ;;		_lcd_send_custom_char
  1858 ;;		_lcd_send_string_pos
  1859 ;; This function is called by:
  1860 ;;		_main
  1861 ;;		_modes_checker
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           	psect	text6
  1866   00229A                     __ptext6:
  1867                           	callstack 0
  1868   00229A                     _stop_sign:
  1869                           	callstack 21
  1870   00229A                     
  1871                           ;app.c: 167:     ret=lcd_send_string_pos(&lcd,2,8,"STOP    ");
  1872   00229A  0E1A               	movlw	low _lcd
  1873   00229C  6E53               	movwf	lcd_send_string_pos@lcd^0,c
  1874   00229E  0E02               	movlw	2
  1875   0022A0  6E54               	movwf	lcd_send_string_pos@row^0,c
  1876   0022A2  0E08               	movlw	8
  1877   0022A4  6E55               	movwf	lcd_send_string_pos@column^0,c
  1878   0022A6  0E0A               	movlw	low STR_4
  1879   0022A8  6E56               	movwf	lcd_send_string_pos@str^0,c
  1880   0022AA  EC8E  F00E         	call	_lcd_send_string_pos	;wreg free
  1881   0022AE  0100               	movlb	0	; () banked
  1882   0022B0  6FB3               	movwf	_ret& (0+255),b
  1883   0022B2                     
  1884                           ; BSR set to: 0
  1885                           ;app.c: 168:     ret=lcd_send_custom_char(&lcd,2,12,customChar1,0);
  1886   0022B2  0E1A               	movlw	low _lcd
  1887   0022B4  6E5A               	movwf	lcd_send_custom_char@lcd^0,c
  1888   0022B6  0E02               	movlw	2
  1889   0022B8  6E5B               	movwf	lcd_send_custom_char@row^0,c
  1890   0022BA  0E0C               	movlw	12
  1891   0022BC  6E5C               	movwf	lcd_send_custom_char@column^0,c
  1892   0022BE  0EA2               	movlw	low _customChar1
  1893   0022C0  6E5D               	movwf	lcd_send_custom_char@_chr^0,c
  1894   0022C2  0E00               	movlw	0
  1895   0022C4  6E5E               	movwf	lcd_send_custom_char@mem_pos^0,c
  1896   0022C6  EC73  F00D         	call	_lcd_send_custom_char	;wreg free
  1897   0022CA  0100               	movlb	0	; () banked
  1898   0022CC  6FB3               	movwf	_ret& (0+255),b
  1899   0022CE                     
  1900                           ; BSR set to: 0
  1901                           ;app.c: 169:     ret=lcd_send_custom_char(&lcd,2,13,customChar2,1);
  1902   0022CE  0E1A               	movlw	low _lcd
  1903   0022D0  6E5A               	movwf	lcd_send_custom_char@lcd^0,c
  1904   0022D2  0E02               	movlw	2
  1905   0022D4  6E5B               	movwf	lcd_send_custom_char@row^0,c
  1906   0022D6  0E0D               	movlw	13
  1907   0022D8  6E5C               	movwf	lcd_send_custom_char@column^0,c
  1908   0022DA  0E9A               	movlw	low _customChar2
  1909   0022DC  6E5D               	movwf	lcd_send_custom_char@_chr^0,c
  1910   0022DE  0E01               	movlw	1
  1911   0022E0  6E5E               	movwf	lcd_send_custom_char@mem_pos^0,c
  1912   0022E2  EC73  F00D         	call	_lcd_send_custom_char	;wreg free
  1913   0022E6  0100               	movlb	0	; () banked
  1914   0022E8  6FB3               	movwf	_ret& (0+255),b
  1915   0022EA                     
  1916                           ; BSR set to: 0
  1917   0022EA  0012               	return		;funcret
  1918   0022EC                     __end_of_stop_sign:
  1919                           	callstack 0
  1920                           
  1921 ;; *************** function _pedestrian_green_traffic_counter *****************
  1922 ;; Defined at:
  1923 ;;		line 195 in file "app.c"
  1924 ;; Parameters:    Size  Location     Type
  1925 ;;  time            1    wreg     unsigned char 
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;  time            1   19[COMRAM] unsigned char 
  1928 ;;  counter         1   20[COMRAM] unsigned char 
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  1    wreg      void 
  1931 ;; Registers used:
  1932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1939 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1940 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1941 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1942 ;;Total ram usage:        4 bytes
  1943 ;; Hardware stack levels used: 1
  1944 ;; Hardware stack levels required when called: 5
  1945 ;; This function calls:
  1946 ;;		_seven_segment_write
  1947 ;; This function is called by:
  1948 ;;		_modes_checker
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952                           	psect	text7
  1953   0024BA                     __ptext7:
  1954                           	callstack 0
  1955   0024BA                     _pedestrian_green_traffic_counter:
  1956                           	callstack 24
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;incstack = 0
  1960                           ;pedestrian_green_traffic_counter@time stored from wreg
  1961   0024BA  6E49               	movwf	pedestrian_green_traffic_counter@time^0,c
  1962   0024BC                     
  1963                           ;app.c: 196:     uint8 counter;;app.c: 197:     for(counter=time;counter>0;counter--){
  1964   0024BC  C049  F04A         	movff	pedestrian_green_traffic_counter@time,pedestrian_green_traffic_counter@counter
  1965   0024C0                     l4107:
  1966   0024C0  504A               	movf	pedestrian_green_traffic_counter@counter^0,w,c
  1967   0024C2  A4D8               	btfss	status,2,c
  1968   0024C4  EF66  F012         	goto	u2851
  1969   0024C8  EF68  F012         	goto	u2850
  1970   0024CC                     u2851:
  1971   0024CC  EF6A  F012         	goto	l4111
  1972   0024D0                     u2850:
  1973   0024D0  EF7F  F012         	goto	l718
  1974   0024D4                     l4111:
  1975                           
  1976                           ;app.c: 198:         seven_segment_write(&seg_green,counter);
  1977   0024D4  0E20               	movlw	low _seg_green
  1978   0024D6  6E41               	movwf	seven_segment_write@seg^0,c
  1979   0024D8  C04A  F042         	movff	pedestrian_green_traffic_counter@counter,seven_segment_write@num
  1980   0024DC  ECC8  F00E         	call	_seven_segment_write	;wreg free
  1981   0024E0                     
  1982                           ;app.c: 199:         _delay((unsigned long)((900)*(8000000/4000.0)));
  1983   0024E0  0E0A               	movlw	10
  1984   0024E2  6E48               	movwf	(??_pedestrian_green_traffic_counter+1)^0,c
  1985   0024E4  0E22               	movlw	34
  1986   0024E6  6E47               	movwf	??_pedestrian_green_traffic_counter^0,c
  1987   0024E8  0EA1               	movlw	161
  1988   0024EA                     u3017:
  1989   0024EA  2EE8               	decfsz	wreg,f,c
  1990   0024EC  D7FE               	bra	u3017
  1991   0024EE  2E47               	decfsz	??_pedestrian_green_traffic_counter^0,f,c
  1992   0024F0  D7FC               	bra	u3017
  1993   0024F2  2E48               	decfsz	(??_pedestrian_green_traffic_counter+1)^0,f,c
  1994   0024F4  D7FA               	bra	u3017
  1995   0024F6  0000               	nop	
  1996   0024F8                     
  1997                           ;app.c: 200:     }
  1998   0024F8  064A               	decf	pedestrian_green_traffic_counter@counter^0,f,c
  1999   0024FA  EF60  F012         	goto	l4107
  2000   0024FE                     l718:
  2001   0024FE  0012               	return		;funcret
  2002   002500                     __end_of_pedestrian_green_traffic_counter:
  2003                           	callstack 0
  2004                           
  2005 ;; *************** function _seven_segment_write *****************
  2006 ;; Defined at:
  2007 ;;		line 44 in file "ECUAL/7_SEGMENT/seven_segment.c"
  2008 ;; Parameters:    Size  Location     Type
  2009 ;;  seg             1   11[COMRAM] PTR struct .
  2010 ;;		 -> seg_green(5), seg_red(5), 
  2011 ;;  num             1   12[COMRAM] unsigned char 
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;  ret             1   16[COMRAM] unsigned char 
  2014 ;;  gpio_ret        1   15[COMRAM] unsigned char 
  2015 ;; Return value:  Size  Location     Type
  2016 ;;                  1    wreg      unsigned char 
  2017 ;; Registers used:
  2018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2019 ;; Tracked objects:
  2020 ;;		On entry : 0/0
  2021 ;;		On exit  : 0/0
  2022 ;;		Unchanged: 0/0
  2023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2024 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2025 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2026 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2027 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2028 ;;Total ram usage:        6 bytes
  2029 ;; Hardware stack levels used: 1
  2030 ;; Hardware stack levels required when called: 4
  2031 ;; This function calls:
  2032 ;;		_gpio_pin_logic_write
  2033 ;; This function is called by:
  2034 ;;		_main
  2035 ;;		_modes_checker
  2036 ;;		_pedestrian_green_traffic_counter
  2037 ;;		_pedestrian_red_traffic_counter
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	text8
  2042   001D90                     __ptext8:
  2043                           	callstack 0
  2044   001D90                     _seven_segment_write:
  2045                           	callstack 26
  2046   001D90                     
  2047                           ;ECUAL/7_SEGMENT/seven_segment.c: 48:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  2048   001D90  0E00               	movlw	0
  2049   001D92  6E45               	movwf	seven_segment_write@gpio_ret^0,c
  2050                           
  2051                           ;ECUAL/7_SEGMENT/seven_segment.c: 49:     if(((void*)0)==seg || num>9){
  2052   001D94  5041               	movf	seven_segment_write@seg^0,w,c
  2053   001D96  B4D8               	btfsc	status,2,c
  2054   001D98  EFD0  F00E         	goto	u2651
  2055   001D9C  EFD2  F00E         	goto	u2650
  2056   001DA0                     u2651:
  2057   001DA0  EFDA  F00E         	goto	l3917
  2058   001DA4                     u2650:
  2059   001DA4  0E09               	movlw	9
  2060   001DA6  6442               	cpfsgt	seven_segment_write@num^0,c
  2061   001DA8  EFD8  F00E         	goto	u2661
  2062   001DAC  EFDA  F00E         	goto	u2660
  2063   001DB0                     u2661:
  2064   001DB0  EFDE  F00E         	goto	l3919
  2065   001DB4                     u2660:
  2066   001DB4                     l3917:
  2067                           
  2068                           ;ECUAL/7_SEGMENT/seven_segment.c: 50:         ret=(Std_ReturnType)0x00;
  2069   001DB4  0E00               	movlw	0
  2070   001DB6  6E46               	movwf	seven_segment_write@ret^0,c
  2071                           
  2072                           ;ECUAL/7_SEGMENT/seven_segment.c: 51:     }
  2073   001DB8  EFFF  F00E         	goto	l21
  2074   001DBC                     l3919:
  2075                           
  2076                           ;ECUAL/7_SEGMENT/seven_segment.c: 53:         for(counter=0;counter<8;counter++){
  2077   001DBC  0E00               	movlw	0
  2078   001DBE  6E79               	movwf	seven_segment_write@counter^0,c
  2079   001DC0                     l3925:
  2080                           
  2081                           ;ECUAL/7_SEGMENT/seven_segment.c: 54:              gpio_pin_logic_write(&(seg->seven_seg
      +                          ment_pins[counter]),(num>>counter)&0x1);
  2082   001DC0  5041               	movf	seven_segment_write@seg^0,w,c
  2083   001DC2  2479               	addwf	seven_segment_write@counter^0,w,c
  2084   001DC4  6E39               	movwf	gpio_pin_logic_write@pin^0,c
  2085   001DC6  C079  F043         	movff	seven_segment_write@counter,??_seven_segment_write
  2086   001DCA  C042  F044         	movff	seven_segment_write@num,??_seven_segment_write+1
  2087   001DCE  2A43               	incf	??_seven_segment_write^0,f,c
  2088   001DD0  EFEC  F00E         	goto	u2674
  2089   001DD4                     u2675:
  2090   001DD4  90D8               	bcf	status,0,c
  2091   001DD6  3244               	rrcf	(??_seven_segment_write+1)^0,f,c
  2092   001DD8                     u2674:
  2093   001DD8  2E43               	decfsz	??_seven_segment_write^0,f,c
  2094   001DDA  EFEA  F00E         	goto	u2675
  2095   001DDE  5044               	movf	(??_seven_segment_write+1)^0,w,c
  2096   001DE0  0B01               	andlw	1
  2097   001DE2  6E3A               	movwf	gpio_pin_logic_write@pin_logic^0,c
  2098   001DE4  EC52  F00A         	call	_gpio_pin_logic_write	;wreg free
  2099   001DE8                     
  2100                           ;ECUAL/7_SEGMENT/seven_segment.c: 56:         }
  2101   001DE8  2A79               	incf	seven_segment_write@counter^0,f,c
  2102   001DEA  0E07               	movlw	7
  2103   001DEC  6479               	cpfsgt	seven_segment_write@counter^0,c
  2104   001DEE  EFFB  F00E         	goto	u2681
  2105   001DF2  EFFD  F00E         	goto	u2680
  2106   001DF6                     u2681:
  2107   001DF6  EFE0  F00E         	goto	l3925
  2108   001DFA                     u2680:
  2109   001DFA                     
  2110                           ;ECUAL/7_SEGMENT/seven_segment.c: 58:         ret=(Std_ReturnType)0x01;
  2111   001DFA  0E01               	movlw	1
  2112   001DFC  6E46               	movwf	seven_segment_write@ret^0,c
  2113   001DFE                     l21:
  2114                           
  2115                           ;ECUAL/7_SEGMENT/seven_segment.c: 61:     return ret;
  2116   001DFE  5046               	movf	seven_segment_write@ret^0,w,c
  2117   001E00  0012               	return		;funcret
  2118   001E02                     __end_of_seven_segment_write:
  2119                           	callstack 0
  2120                           
  2121 ;; *************** function _move_sign *****************
  2122 ;; Defined at:
  2123 ;;		line 172 in file "app.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;		None
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;		None
  2128 ;; Return value:  Size  Location     Type
  2129 ;;                  1    wreg      void 
  2130 ;; Registers used:
  2131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2141 ;;Total ram usage:        0 bytes
  2142 ;; Hardware stack levels used: 1
  2143 ;; Hardware stack levels required when called: 9
  2144 ;; This function calls:
  2145 ;;		_lcd_send_custom_char
  2146 ;;		_lcd_send_string_pos
  2147 ;; This function is called by:
  2148 ;;		_main
  2149 ;;		_modes_checker
  2150 ;; This function uses a non-reentrant model
  2151 ;;
  2152                           
  2153                           	psect	text9
  2154   0022EC                     __ptext9:
  2155                           	callstack 0
  2156   0022EC                     _move_sign:
  2157                           	callstack 21
  2158   0022EC                     
  2159                           ;app.c: 173:     ret=lcd_send_string_pos(&lcd,2,8,"MOVE    ");
  2160   0022EC  0E1A               	movlw	low _lcd
  2161   0022EE  6E53               	movwf	lcd_send_string_pos@lcd^0,c
  2162   0022F0  0E02               	movlw	2
  2163   0022F2  6E54               	movwf	lcd_send_string_pos@row^0,c
  2164   0022F4  0E08               	movlw	8
  2165   0022F6  6E55               	movwf	lcd_send_string_pos@column^0,c
  2166   0022F8  0E01               	movlw	low STR_5
  2167   0022FA  6E56               	movwf	lcd_send_string_pos@str^0,c
  2168   0022FC  EC8E  F00E         	call	_lcd_send_string_pos	;wreg free
  2169   002300  0100               	movlb	0	; () banked
  2170   002302  6FB3               	movwf	_ret& (0+255),b
  2171   002304                     
  2172                           ; BSR set to: 0
  2173                           ;app.c: 174:     ret=lcd_send_custom_char(&lcd,2,12,customChar3,0);
  2174   002304  0E1A               	movlw	low _lcd
  2175   002306  6E5A               	movwf	lcd_send_custom_char@lcd^0,c
  2176   002308  0E02               	movlw	2
  2177   00230A  6E5B               	movwf	lcd_send_custom_char@row^0,c
  2178   00230C  0E0C               	movlw	12
  2179   00230E  6E5C               	movwf	lcd_send_custom_char@column^0,c
  2180   002310  0E92               	movlw	low _customChar3
  2181   002312  6E5D               	movwf	lcd_send_custom_char@_chr^0,c
  2182   002314  0E00               	movlw	0
  2183   002316  6E5E               	movwf	lcd_send_custom_char@mem_pos^0,c
  2184   002318  EC73  F00D         	call	_lcd_send_custom_char	;wreg free
  2185   00231C  0100               	movlb	0	; () banked
  2186   00231E  6FB3               	movwf	_ret& (0+255),b
  2187   002320                     
  2188                           ; BSR set to: 0
  2189                           ;app.c: 175:     ret=lcd_send_custom_char(&lcd,2,13,customChar4,1);
  2190   002320  0E1A               	movlw	low _lcd
  2191   002322  6E5A               	movwf	lcd_send_custom_char@lcd^0,c
  2192   002324  0E02               	movlw	2
  2193   002326  6E5B               	movwf	lcd_send_custom_char@row^0,c
  2194   002328  0E0D               	movlw	13
  2195   00232A  6E5C               	movwf	lcd_send_custom_char@column^0,c
  2196   00232C  0E8A               	movlw	low _customChar4
  2197   00232E  6E5D               	movwf	lcd_send_custom_char@_chr^0,c
  2198   002330  0E01               	movlw	1
  2199   002332  6E5E               	movwf	lcd_send_custom_char@mem_pos^0,c
  2200   002334  EC73  F00D         	call	_lcd_send_custom_char	;wreg free
  2201   002338  0100               	movlb	0	; () banked
  2202   00233A  6FB3               	movwf	_ret& (0+255),b
  2203   00233C                     
  2204                           ; BSR set to: 0
  2205   00233C  0012               	return		;funcret
  2206   00233E                     __end_of_move_sign:
  2207                           	callstack 0
  2208                           
  2209 ;; *************** function _lcd_send_custom_char *****************
  2210 ;; Defined at:
  2211 ;;		line 228 in file "ECUAL/LCD/lcd.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;  lcd             1   36[COMRAM] PTR struct .
  2214 ;;		 -> lcd(6), 
  2215 ;;  row             1   37[COMRAM] unsigned char 
  2216 ;;  column          1   38[COMRAM] unsigned char 
  2217 ;;  _chr            1   39[COMRAM] PTR unsigned char 
  2218 ;;		 -> customChar4(8), customChar3(8), customChar2(8), customChar1(8), 
  2219 ;;  mem_pos         1   40[COMRAM] unsigned char 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;  ret             1    2[BANK0 ] unsigned char 
  2222 ;;  lcd_ret         1    1[BANK0 ] unsigned char 
  2223 ;;  gpio_ret        1    0[BANK0 ] unsigned char 
  2224 ;; Return value:  Size  Location     Type
  2225 ;;                  1    wreg      unsigned char 
  2226 ;; Registers used:
  2227 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2228 ;; Tracked objects:
  2229 ;;		On entry : 0/0
  2230 ;;		On exit  : 0/0
  2231 ;;		Unchanged: 0/0
  2232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2233 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2234 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2236 ;;      Totals:         5       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2237 ;;Total ram usage:        8 bytes
  2238 ;; Hardware stack levels used: 1
  2239 ;; Hardware stack levels required when called: 8
  2240 ;; This function calls:
  2241 ;;		_lcd_send_char_data
  2242 ;;		_lcd_send_char_data_pos
  2243 ;;		_lcd_send_command
  2244 ;; This function is called by:
  2245 ;;		_stop_sign
  2246 ;;		_move_sign
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text10
  2251   001AE6                     __ptext10:
  2252                           	callstack 0
  2253   001AE6                     _lcd_send_custom_char:
  2254                           	callstack 21
  2255   001AE6                     
  2256                           ;ECUAL/LCD/lcd.c: 233:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  2257   001AE6  0E00               	movlw	0
  2258   001AE8  0100               	movlb	0	; () banked
  2259   001AEA  6FB0               	movwf	lcd_send_custom_char@gpio_ret& (0+255),b
  2260                           
  2261                           ;ECUAL/LCD/lcd.c: 234:     Std_ReturnType lcd_ret=(Std_ReturnType)0x00;
  2262   001AEC  0E00               	movlw	0
  2263   001AEE  6FB1               	movwf	lcd_send_custom_char@lcd_ret& (0+255),b
  2264                           
  2265                           ;ECUAL/LCD/lcd.c: 235:     if(((void*)0)==lcd || row>4 || column>20){
  2266   001AF0  505A               	movf	lcd_send_custom_char@lcd^0,w,c
  2267   001AF2  B4D8               	btfsc	status,2,c
  2268   001AF4  EF7E  F00D         	goto	u2751
  2269   001AF8  EF80  F00D         	goto	u2750
  2270   001AFC                     u2751:
  2271   001AFC  EF90  F00D         	goto	l4003
  2272   001B00                     u2750:
  2273   001B00                     
  2274                           ; BSR set to: 0
  2275   001B00  0E05               	movlw	5
  2276   001B02  605B               	cpfslt	lcd_send_custom_char@row^0,c
  2277   001B04  EF86  F00D         	goto	u2761
  2278   001B08  EF88  F00D         	goto	u2760
  2279   001B0C                     u2761:
  2280   001B0C  EF90  F00D         	goto	l4003
  2281   001B10                     u2760:
  2282   001B10                     
  2283                           ; BSR set to: 0
  2284   001B10  0E14               	movlw	20
  2285   001B12  645C               	cpfsgt	lcd_send_custom_char@column^0,c
  2286   001B14  EF8E  F00D         	goto	u2771
  2287   001B18  EF90  F00D         	goto	u2770
  2288   001B1C                     u2771:
  2289   001B1C  EF94  F00D         	goto	l4005
  2290   001B20                     u2770:
  2291   001B20                     l4003:
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;ECUAL/LCD/lcd.c: 236:         ret=(Std_ReturnType)0x00;
  2295   001B20  0E00               	movlw	0
  2296   001B22  6FB2               	movwf	lcd_send_custom_char@ret& (0+255),b
  2297                           
  2298                           ;ECUAL/LCD/lcd.c: 237:     }
  2299   001B24  EFBF  F00D         	goto	l4023
  2300   001B28                     l4005:
  2301                           
  2302                           ; BSR set to: 0
  2303   001B28  C05A  F047         	movff	lcd_send_custom_char@lcd,lcd_send_command@lcd
  2304   001B2C  505E               	movf	lcd_send_custom_char@mem_pos^0,w,c
  2305   001B2E  0D08               	mullw	8
  2306   001B30  50F3               	movf	243,w,c
  2307   001B32  0F40               	addlw	64
  2308   001B34  6E48               	movwf	lcd_send_command@command^0,c
  2309   001B36  EC0E  F010         	call	_lcd_send_command	;wreg free
  2310   001B3A                     
  2311                           ;ECUAL/LCD/lcd.c: 240:         for(counter=0;counter<8;counter++){
  2312   001B3A  0E00               	movlw	0
  2313   001B3C  6E78               	movwf	lcd_send_custom_char@counter^0,c
  2314   001B3E                     l4013:
  2315   001B3E  C05A  F047         	movff	lcd_send_custom_char@lcd,lcd_send_char_data@lcd
  2316   001B42  505D               	movf	lcd_send_custom_char@_chr^0,w,c
  2317   001B44  2478               	addwf	lcd_send_custom_char@counter^0,w,c
  2318   001B46  6ED9               	movwf	fsr2l,c
  2319   001B48  6ADA               	clrf	fsr2h,c
  2320   001B4A  50DF               	movf	indf2,w,c
  2321   001B4C  6E48               	movwf	lcd_send_char_data@data^0,c
  2322   001B4E  ECDB  F00F         	call	_lcd_send_char_data	;wreg free
  2323   001B52                     
  2324                           ;ECUAL/LCD/lcd.c: 242:         }
  2325   001B52  2A78               	incf	lcd_send_custom_char@counter^0,f,c
  2326   001B54  0E07               	movlw	7
  2327   001B56  6478               	cpfsgt	lcd_send_custom_char@counter^0,c
  2328   001B58  EFB0  F00D         	goto	u2781
  2329   001B5C  EFB2  F00D         	goto	u2780
  2330   001B60                     u2781:
  2331   001B60  EF9F  F00D         	goto	l4013
  2332   001B64                     u2780:
  2333   001B64  C05A  F053         	movff	lcd_send_custom_char@lcd,lcd_send_char_data_pos@lcd
  2334   001B68  C05B  F054         	movff	lcd_send_custom_char@row,lcd_send_char_data_pos@row
  2335   001B6C  C05C  F055         	movff	lcd_send_custom_char@column,lcd_send_char_data_pos@column
  2336   001B70  C05E  F056         	movff	lcd_send_custom_char@mem_pos,lcd_send_char_data_pos@data
  2337   001B74  ECA7  F00F         	call	_lcd_send_char_data_pos	;wreg free
  2338   001B78                     
  2339                           ;ECUAL/LCD/lcd.c: 245:         ret=(Std_ReturnType)0x01;
  2340   001B78  0E01               	movlw	1
  2341   001B7A  0100               	movlb	0	; () banked
  2342   001B7C  6FB2               	movwf	lcd_send_custom_char@ret& (0+255),b
  2343   001B7E                     l4023:
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;ECUAL/LCD/lcd.c: 249:     return ret;
  2347   001B7E  51B2               	movf	lcd_send_custom_char@ret& (0+255),w,b
  2348   001B80                     
  2349                           ; BSR set to: 0
  2350   001B80  0012               	return		;funcret
  2351   001B82                     __end_of_lcd_send_custom_char:
  2352                           	callstack 0
  2353                           
  2354 ;; *************** function _lcd_send_char_data_pos *****************
  2355 ;; Defined at:
  2356 ;;		line 145 in file "ECUAL/LCD/lcd.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;  lcd             1   29[COMRAM] PTR struct .
  2359 ;;		 -> lcd(6), 
  2360 ;;  row             1   30[COMRAM] unsigned char 
  2361 ;;  column          1   31[COMRAM] unsigned char 
  2362 ;;  data            1   32[COMRAM] unsigned char 
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;  ret             1   35[COMRAM] unsigned char 
  2365 ;;  lcd_ret         1   34[COMRAM] unsigned char 
  2366 ;;  gpio_ret        1   33[COMRAM] unsigned char 
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  1    wreg      unsigned char 
  2369 ;; Registers used:
  2370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2376 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2377 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2379 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2380 ;;Total ram usage:        7 bytes
  2381 ;; Hardware stack levels used: 1
  2382 ;; Hardware stack levels required when called: 7
  2383 ;; This function calls:
  2384 ;;		_lcd_send_char_data
  2385 ;;		_lcd_set_curser
  2386 ;; This function is called by:
  2387 ;;		_lcd_send_custom_char
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390                           
  2391                           	psect	text11
  2392   001F4E                     __ptext11:
  2393                           	callstack 0
  2394   001F4E                     _lcd_send_char_data_pos:
  2395                           	callstack 21
  2396   001F4E                     
  2397                           ;ECUAL/LCD/lcd.c: 148:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  2398   001F4E  0E00               	movlw	0
  2399   001F50  6E57               	movwf	lcd_send_char_data_pos@gpio_ret^0,c
  2400                           
  2401                           ;ECUAL/LCD/lcd.c: 149:     Std_ReturnType lcd_ret=(Std_ReturnType)0x00;
  2402   001F52  0E00               	movlw	0
  2403   001F54  6E58               	movwf	lcd_send_char_data_pos@lcd_ret^0,c
  2404                           
  2405                           ;ECUAL/LCD/lcd.c: 150:     if(((void*)0)==lcd || row>4 || column>20){
  2406   001F56  5053               	movf	lcd_send_char_data_pos@lcd^0,w,c
  2407   001F58  B4D8               	btfsc	status,2,c
  2408   001F5A  EFB1  F00F         	goto	u2571
  2409   001F5E  EFB3  F00F         	goto	u2570
  2410   001F62                     u2571:
  2411   001F62  EFC3  F00F         	goto	l3867
  2412   001F66                     u2570:
  2413   001F66  0E05               	movlw	5
  2414   001F68  6054               	cpfslt	lcd_send_char_data_pos@row^0,c
  2415   001F6A  EFB9  F00F         	goto	u2581
  2416   001F6E  EFBB  F00F         	goto	u2580
  2417   001F72                     u2581:
  2418   001F72  EFC3  F00F         	goto	l3867
  2419   001F76                     u2580:
  2420   001F76  0E14               	movlw	20
  2421   001F78  6455               	cpfsgt	lcd_send_char_data_pos@column^0,c
  2422   001F7A  EFC1  F00F         	goto	u2591
  2423   001F7E  EFC3  F00F         	goto	u2590
  2424   001F82                     u2591:
  2425   001F82  EFC7  F00F         	goto	l3869
  2426   001F86                     u2590:
  2427   001F86                     l3867:
  2428                           
  2429                           ;ECUAL/LCD/lcd.c: 151:         ret=(Std_ReturnType)0x00;
  2430   001F86  0E00               	movlw	0
  2431   001F88  6E59               	movwf	lcd_send_char_data_pos@ret^0,c
  2432                           
  2433                           ;ECUAL/LCD/lcd.c: 152:     }
  2434   001F8A  EFD9  F00F         	goto	l3873
  2435   001F8E                     l3869:
  2436                           
  2437                           ;ECUAL/LCD/lcd.c: 154:         lcd_ret=lcd_set_curser(lcd, row, column);
  2438   001F8E  C053  F04C         	movff	lcd_send_char_data_pos@lcd,lcd_set_curser@lcd
  2439   001F92  C054  F04D         	movff	lcd_send_char_data_pos@row,lcd_set_curser@row
  2440   001F96  C055  F04E         	movff	lcd_send_char_data_pos@column,lcd_set_curser@column
  2441   001F9A  ECC1  F00D         	call	_lcd_set_curser	;wreg free
  2442   001F9E  6E58               	movwf	lcd_send_char_data_pos@lcd_ret^0,c
  2443                           
  2444                           ;ECUAL/LCD/lcd.c: 155:         lcd_ret=lcd_send_char_data(lcd, data);
  2445   001FA0  C053  F047         	movff	lcd_send_char_data_pos@lcd,lcd_send_char_data@lcd
  2446   001FA4  C056  F048         	movff	lcd_send_char_data_pos@data,lcd_send_char_data@data
  2447   001FA8  ECDB  F00F         	call	_lcd_send_char_data	;wreg free
  2448   001FAC  6E58               	movwf	lcd_send_char_data_pos@lcd_ret^0,c
  2449   001FAE                     
  2450                           ;ECUAL/LCD/lcd.c: 156:         ret=(Std_ReturnType)0x01;
  2451   001FAE  0E01               	movlw	1
  2452   001FB0  6E59               	movwf	lcd_send_char_data_pos@ret^0,c
  2453   001FB2                     l3873:
  2454                           
  2455                           ;ECUAL/LCD/lcd.c: 159:     return ret;
  2456   001FB2  5059               	movf	lcd_send_char_data_pos@ret^0,w,c
  2457   001FB4  0012               	return		;funcret
  2458   001FB6                     __end_of_lcd_send_char_data_pos:
  2459                           	callstack 0
  2460                           
  2461 ;; *************** function _led_on *****************
  2462 ;; Defined at:
  2463 ;;		line 41 in file "ECUAL/LED/led.c"
  2464 ;; Parameters:    Size  Location     Type
  2465 ;;  led             1   11[COMRAM] PTR struct .
  2466 ;;		 -> pedestrian_led_green(2), pedestrian_led_red(2), car_led_green(2), car_led_red(2), 
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;  ret             1   13[COMRAM] unsigned char 
  2469 ;;  gpio_ret        1   12[COMRAM] unsigned char 
  2470 ;; Return value:  Size  Location     Type
  2471 ;;                  1    wreg      unsigned char 
  2472 ;; Registers used:
  2473 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2474 ;; Tracked objects:
  2475 ;;		On entry : 0/0
  2476 ;;		On exit  : 0/0
  2477 ;;		Unchanged: 0/0
  2478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2479 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2480 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2482 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2483 ;;Total ram usage:        3 bytes
  2484 ;; Hardware stack levels used: 1
  2485 ;; Hardware stack levels required when called: 4
  2486 ;; This function calls:
  2487 ;;		_gpio_pin_logic_write
  2488 ;; This function is called by:
  2489 ;;		_main
  2490 ;;		_modes_checker
  2491 ;; This function uses a non-reentrant model
  2492 ;;
  2493                           
  2494                           	psect	text12
  2495   0021F2                     __ptext12:
  2496                           	callstack 0
  2497   0021F2                     _led_on:
  2498                           	callstack 25
  2499   0021F2                     
  2500                           ;ECUAL/LED/led.c: 44:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  2501   0021F2  0E00               	movlw	0
  2502   0021F4  6E42               	movwf	led_on@gpio_ret^0,c
  2503                           
  2504                           ;ECUAL/LED/led.c: 45:     if(((void*)0)==led){
  2505   0021F6  5041               	movf	led_on@led^0,w,c
  2506   0021F8  A4D8               	btfss	status,2,c
  2507   0021FA  EF01  F011         	goto	u2811
  2508   0021FE  EF03  F011         	goto	u2810
  2509   002202                     u2811:
  2510   002202  EF07  F011         	goto	l4045
  2511   002206                     u2810:
  2512   002206                     
  2513                           ;ECUAL/LED/led.c: 46:         ret=(Std_ReturnType)0x00;
  2514   002206  0E00               	movlw	0
  2515   002208  6E43               	movwf	led_on@ret^0,c
  2516                           
  2517                           ;ECUAL/LED/led.c: 47:     }
  2518   00220A  EF21  F011         	goto	l4051
  2519   00220E                     l4045:
  2520   00220E  C041  F039         	movff	led_on@led,gpio_pin_logic_write@pin
  2521   002212  0E01               	movlw	1
  2522   002214  6E3A               	movwf	gpio_pin_logic_write@pin_logic^0,c
  2523   002216  EC52  F00A         	call	_gpio_pin_logic_write	;wreg free
  2524   00221A                     
  2525                           ;ECUAL/LED/led.c: 50:         led->led_state=led->led_pin.logic;
  2526   00221A  5041               	movf	led_on@led^0,w,c
  2527   00221C  6ED9               	movwf	fsr2l,c
  2528   00221E  6ADA               	clrf	fsr2h,c
  2529   002220  0E01               	movlw	1
  2530   002222  26D9               	addwf	fsr2l,f,c
  2531   002224  5041               	movf	led_on@led^0,w,c
  2532   002226  6EE1               	movwf	fsr1l,c
  2533   002228  6AE2               	clrf	fsr1h,c
  2534   00222A  BEE7               	btfsc	indf1,7,c
  2535   00222C  EF1A  F011         	goto	u2821
  2536   002230  EF1D  F011         	goto	u2820
  2537   002234                     u2821:
  2538   002234  0E01               	movlw	1
  2539   002236  EF1E  F011         	goto	u2826
  2540   00223A                     u2820:
  2541   00223A  0E00               	movlw	0
  2542   00223C                     u2826:
  2543   00223C  6EDF               	movwf	indf2,c
  2544   00223E                     
  2545                           ;ECUAL/LED/led.c: 51:         ret=(Std_ReturnType)0x01;
  2546   00223E  0E01               	movlw	1
  2547   002240  6E43               	movwf	led_on@ret^0,c
  2548   002242                     l4051:
  2549                           
  2550                           ;ECUAL/LED/led.c: 54:     return ret;
  2551   002242  5043               	movf	led_on@ret^0,w,c
  2552   002244  0012               	return		;funcret
  2553   002246                     __end_of_led_on:
  2554                           	callstack 0
  2555                           
  2556 ;; *************** function _led_off *****************
  2557 ;; Defined at:
  2558 ;;		line 65 in file "ECUAL/LED/led.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;  led             1   11[COMRAM] PTR struct .
  2561 ;;		 -> pedestrian_led_green(2), pedestrian_led_yellow(2), pedestrian_led_red(2), car_led_green(2), 
  2562 ;;		 -> car_led_yellow(2), car_led_red(2), 
  2563 ;; Auto vars:     Size  Location     Type
  2564 ;;  ret             1   13[COMRAM] unsigned char 
  2565 ;;  gpio_ret        1   12[COMRAM] unsigned char 
  2566 ;; Return value:  Size  Location     Type
  2567 ;;                  1    wreg      unsigned char 
  2568 ;; Registers used:
  2569 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2570 ;; Tracked objects:
  2571 ;;		On entry : 0/0
  2572 ;;		On exit  : 0/0
  2573 ;;		Unchanged: 0/0
  2574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2575 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2576 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2578 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2579 ;;Total ram usage:        3 bytes
  2580 ;; Hardware stack levels used: 1
  2581 ;; Hardware stack levels required when called: 4
  2582 ;; This function calls:
  2583 ;;		_gpio_pin_logic_write
  2584 ;; This function is called by:
  2585 ;;		_main
  2586 ;;		_modes_checker
  2587 ;; This function uses a non-reentrant model
  2588 ;;
  2589                           
  2590                           	psect	text13
  2591   002246                     __ptext13:
  2592                           	callstack 0
  2593   002246                     _led_off:
  2594                           	callstack 25
  2595   002246                     
  2596                           ;ECUAL/LED/led.c: 68:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  2597   002246  0E00               	movlw	0
  2598   002248  6E42               	movwf	led_off@gpio_ret^0,c
  2599                           
  2600                           ;ECUAL/LED/led.c: 69:     if(((void*)0)==led){
  2601   00224A  5041               	movf	led_off@led^0,w,c
  2602   00224C  A4D8               	btfss	status,2,c
  2603   00224E  EF2B  F011         	goto	u2831
  2604   002252  EF2D  F011         	goto	u2830
  2605   002256                     u2831:
  2606   002256  EF31  F011         	goto	l4059
  2607   00225A                     u2830:
  2608   00225A                     
  2609                           ;ECUAL/LED/led.c: 70:         ret=(Std_ReturnType)0x00;
  2610   00225A  0E00               	movlw	0
  2611   00225C  6E43               	movwf	led_off@ret^0,c
  2612                           
  2613                           ;ECUAL/LED/led.c: 71:     }
  2614   00225E  EF4B  F011         	goto	l4065
  2615   002262                     l4059:
  2616   002262  C041  F039         	movff	led_off@led,gpio_pin_logic_write@pin
  2617   002266  0E00               	movlw	0
  2618   002268  6E3A               	movwf	gpio_pin_logic_write@pin_logic^0,c
  2619   00226A  EC52  F00A         	call	_gpio_pin_logic_write	;wreg free
  2620   00226E                     
  2621                           ;ECUAL/LED/led.c: 74:         led->led_state=led->led_pin.logic;
  2622   00226E  5041               	movf	led_off@led^0,w,c
  2623   002270  6ED9               	movwf	fsr2l,c
  2624   002272  6ADA               	clrf	fsr2h,c
  2625   002274  0E01               	movlw	1
  2626   002276  26D9               	addwf	fsr2l,f,c
  2627   002278  5041               	movf	led_off@led^0,w,c
  2628   00227A  6EE1               	movwf	fsr1l,c
  2629   00227C  6AE2               	clrf	fsr1h,c
  2630   00227E  BEE7               	btfsc	indf1,7,c
  2631   002280  EF44  F011         	goto	u2841
  2632   002284  EF47  F011         	goto	u2840
  2633   002288                     u2841:
  2634   002288  0E01               	movlw	1
  2635   00228A  EF48  F011         	goto	u2846
  2636   00228E                     u2840:
  2637   00228E  0E00               	movlw	0
  2638   002290                     u2846:
  2639   002290  6EDF               	movwf	indf2,c
  2640   002292                     
  2641                           ;ECUAL/LED/led.c: 75:         ret=(Std_ReturnType)0x01;
  2642   002292  0E01               	movlw	1
  2643   002294  6E43               	movwf	led_off@ret^0,c
  2644   002296                     l4065:
  2645                           
  2646                           ;ECUAL/LED/led.c: 78:     return ret;
  2647   002296  5043               	movf	led_off@ret^0,w,c
  2648   002298  0012               	return		;funcret
  2649   00229A                     __end_of_led_off:
  2650                           	callstack 0
  2651                           
  2652 ;; *************** function _harry_up_sign *****************
  2653 ;; Defined at:
  2654 ;;		line 182 in file "app.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;		None
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;		None
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      void 
  2661 ;; Registers used:
  2662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;Total ram usage:        0 bytes
  2673 ;; Hardware stack levels used: 1
  2674 ;; Hardware stack levels required when called: 8
  2675 ;; This function calls:
  2676 ;;		_lcd_send_string_pos
  2677 ;; This function is called by:
  2678 ;;		_main
  2679 ;;		_modes_checker
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           	psect	text14
  2684   002748                     __ptext14:
  2685                           	callstack 0
  2686   002748                     _harry_up_sign:
  2687                           	callstack 21
  2688   002748                     
  2689                           ;app.c: 183:     ret=lcd_send_string_pos(&lcd,2,8,"HARRY UP");
  2690   002748  0E1A               	movlw	low _lcd
  2691   00274A  6E53               	movwf	lcd_send_string_pos@lcd^0,c
  2692   00274C  0E02               	movlw	2
  2693   00274E  6E54               	movwf	lcd_send_string_pos@row^0,c
  2694   002750  0E08               	movlw	8
  2695   002752  6E55               	movwf	lcd_send_string_pos@column^0,c
  2696   002754  0E1C               	movlw	low STR_7
  2697   002756  6E56               	movwf	lcd_send_string_pos@str^0,c
  2698   002758  EC8E  F00E         	call	_lcd_send_string_pos	;wreg free
  2699   00275C  0100               	movlb	0	; () banked
  2700   00275E  6FB3               	movwf	_ret& (0+255),b
  2701   002760                     
  2702                           ; BSR set to: 0
  2703   002760  0012               	return		;funcret
  2704   002762                     __end_of_harry_up_sign:
  2705                           	callstack 0
  2706                           
  2707 ;; *************** function _lcd_send_string_pos *****************
  2708 ;; Defined at:
  2709 ;;		line 200 in file "ECUAL/LCD/lcd.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;  lcd             1   29[COMRAM] PTR struct .
  2712 ;;		 -> lcd(6), 
  2713 ;;  row             1   30[COMRAM] unsigned char 
  2714 ;;  column          1   31[COMRAM] unsigned char 
  2715 ;;  str             1   32[COMRAM] PTR unsigned char 
  2716 ;;		 -> STR_7(9), STR_6(9), STR_5(9), STR_4(9), 
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;  ret             1   35[COMRAM] unsigned char 
  2719 ;;  lcd_ret         1   34[COMRAM] unsigned char 
  2720 ;;  gpio_ret        1   33[COMRAM] unsigned char 
  2721 ;; Return value:  Size  Location     Type
  2722 ;;                  1    wreg      unsigned char 
  2723 ;; Registers used:
  2724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2730 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;Total ram usage:        7 bytes
  2735 ;; Hardware stack levels used: 1
  2736 ;; Hardware stack levels required when called: 7
  2737 ;; This function calls:
  2738 ;;		_lcd_send_string
  2739 ;;		_lcd_set_curser
  2740 ;; This function is called by:
  2741 ;;		_stop_sign
  2742 ;;		_move_sign
  2743 ;;		_wait_sign
  2744 ;;		_harry_up_sign
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747                           
  2748                           	psect	text15
  2749   001D1C                     __ptext15:
  2750                           	callstack 0
  2751   001D1C                     _lcd_send_string_pos:
  2752                           	callstack 22
  2753   001D1C                     
  2754                           ;ECUAL/LCD/lcd.c: 203:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  2755   001D1C  0E00               	movlw	0
  2756   001D1E  6E57               	movwf	lcd_send_string_pos@gpio_ret^0,c
  2757                           
  2758                           ;ECUAL/LCD/lcd.c: 204:     Std_ReturnType lcd_ret=(Std_ReturnType)0x00;
  2759   001D20  0E00               	movlw	0
  2760   001D22  6E58               	movwf	lcd_send_string_pos@lcd_ret^0,c
  2761                           
  2762                           ;ECUAL/LCD/lcd.c: 205:     if(((void*)0)==lcd || ((void*)0)==str || row>4 || column>40){
  2763   001D24  5053               	movf	lcd_send_string_pos@lcd^0,w,c
  2764   001D26  B4D8               	btfsc	status,2,c
  2765   001D28  EF98  F00E         	goto	u2711
  2766   001D2C  EF9A  F00E         	goto	u2710
  2767   001D30                     u2711:
  2768   001D30  EFB2  F00E         	goto	l3985
  2769   001D34                     u2710:
  2770   001D34  5056               	movf	lcd_send_string_pos@str^0,w,c
  2771   001D36  B4D8               	btfsc	status,2,c
  2772   001D38  EFA0  F00E         	goto	u2721
  2773   001D3C  EFA2  F00E         	goto	u2720
  2774   001D40                     u2721:
  2775   001D40  EFB2  F00E         	goto	l3985
  2776   001D44                     u2720:
  2777   001D44  0E05               	movlw	5
  2778   001D46  6054               	cpfslt	lcd_send_string_pos@row^0,c
  2779   001D48  EFA8  F00E         	goto	u2731
  2780   001D4C  EFAA  F00E         	goto	u2730
  2781   001D50                     u2731:
  2782   001D50  EFB2  F00E         	goto	l3985
  2783   001D54                     u2730:
  2784   001D54  0E28               	movlw	40
  2785   001D56  6455               	cpfsgt	lcd_send_string_pos@column^0,c
  2786   001D58  EFB0  F00E         	goto	u2741
  2787   001D5C  EFB2  F00E         	goto	u2740
  2788   001D60                     u2741:
  2789   001D60  EFB6  F00E         	goto	l3987
  2790   001D64                     u2740:
  2791   001D64                     l3985:
  2792                           
  2793                           ;ECUAL/LCD/lcd.c: 206:         ret=(Std_ReturnType)0x00;
  2794   001D64  0E00               	movlw	0
  2795   001D66  6E59               	movwf	lcd_send_string_pos@ret^0,c
  2796                           
  2797                           ;ECUAL/LCD/lcd.c: 207:     }
  2798   001D68  EFC6  F00E         	goto	l3993
  2799   001D6C                     l3987:
  2800   001D6C  C053  F04C         	movff	lcd_send_string_pos@lcd,lcd_set_curser@lcd
  2801   001D70  C054  F04D         	movff	lcd_send_string_pos@row,lcd_set_curser@row
  2802   001D74  C055  F04E         	movff	lcd_send_string_pos@column,lcd_set_curser@column
  2803   001D78  ECC1  F00D         	call	_lcd_set_curser	;wreg free
  2804   001D7C  C053  F04C         	movff	lcd_send_string_pos@lcd,lcd_send_string@lcd
  2805   001D80  C056  F04D         	movff	lcd_send_string_pos@str,lcd_send_string@str
  2806   001D84  EC01  F00F         	call	_lcd_send_string	;wreg free
  2807   001D88                     
  2808                           ;ECUAL/LCD/lcd.c: 211:         ret=(Std_ReturnType)0x01;
  2809   001D88  0E01               	movlw	1
  2810   001D8A  6E59               	movwf	lcd_send_string_pos@ret^0,c
  2811   001D8C                     l3993:
  2812                           
  2813                           ;ECUAL/LCD/lcd.c: 214:     return ret;
  2814   001D8C  5059               	movf	lcd_send_string_pos@ret^0,w,c
  2815   001D8E  0012               	return		;funcret
  2816   001D90                     __end_of_lcd_send_string_pos:
  2817                           	callstack 0
  2818                           
  2819 ;; *************** function _lcd_set_curser *****************
  2820 ;; Defined at:
  2821 ;;		line 352 in file "ECUAL/LCD/lcd.c"
  2822 ;; Parameters:    Size  Location     Type
  2823 ;;  lcd             1   22[COMRAM] PTR struct .
  2824 ;;		 -> lcd(6), 
  2825 ;;  row             1   23[COMRAM] unsigned char 
  2826 ;;  column          1   24[COMRAM] unsigned char 
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;  lcd_ret         1   28[COMRAM] unsigned char 
  2829 ;;  ret             1    0        unsigned char 
  2830 ;;  gpio_ret        1   27[COMRAM] unsigned char 
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  1    wreg      unsigned char 
  2833 ;; Registers used:
  2834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2840 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;Total ram usage:        7 bytes
  2845 ;; Hardware stack levels used: 1
  2846 ;; Hardware stack levels required when called: 6
  2847 ;; This function calls:
  2848 ;;		_lcd_send_command
  2849 ;; This function is called by:
  2850 ;;		_lcd_send_char_data_pos
  2851 ;;		_lcd_send_string_pos
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           	psect	text16
  2856   001B82                     __ptext16:
  2857                           	callstack 0
  2858   001B82                     _lcd_set_curser:
  2859                           	callstack 22
  2860   001B82                     
  2861                           ;ECUAL/LCD/lcd.c: 355:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  2862   001B82  0E00               	movlw	0
  2863   001B84  6E51               	movwf	lcd_set_curser@gpio_ret^0,c
  2864                           
  2865                           ;ECUAL/LCD/lcd.c: 356:     Std_ReturnType lcd_ret=(Std_ReturnType)0x00;
  2866   001B86  0E00               	movlw	0
  2867   001B88  6E52               	movwf	lcd_set_curser@lcd_ret^0,c
  2868   001B8A                     
  2869                           ;ECUAL/LCD/lcd.c: 357:     column--;
  2870   001B8A  064E               	decf	lcd_set_curser@column^0,f,c
  2871                           
  2872                           ;ECUAL/LCD/lcd.c: 365:     switch(row){
  2873   001B8C  EFEC  F00D         	goto	l3837
  2874   001B90                     l3827:
  2875   001B90  C04C  F047         	movff	lcd_set_curser@lcd,lcd_send_command@lcd
  2876   001B94  504E               	movf	lcd_set_curser@column^0,w,c
  2877   001B96  0F80               	addlw	128
  2878   001B98  6E48               	movwf	lcd_send_command@command^0,c
  2879   001B9A  EC0E  F010         	call	_lcd_send_command	;wreg free
  2880   001B9E  EF09  F00E         	goto	l3839
  2881   001BA2                     l3829:
  2882   001BA2  C04C  F047         	movff	lcd_set_curser@lcd,lcd_send_command@lcd
  2883   001BA6  504E               	movf	lcd_set_curser@column^0,w,c
  2884   001BA8  0FC0               	addlw	192
  2885   001BAA  6E48               	movwf	lcd_send_command@command^0,c
  2886   001BAC  EC0E  F010         	call	_lcd_send_command	;wreg free
  2887   001BB0  EF09  F00E         	goto	l3839
  2888   001BB4                     l3831:
  2889   001BB4  C04C  F047         	movff	lcd_set_curser@lcd,lcd_send_command@lcd
  2890   001BB8  504E               	movf	lcd_set_curser@column^0,w,c
  2891   001BBA  0F94               	addlw	148
  2892   001BBC  6E48               	movwf	lcd_send_command@command^0,c
  2893   001BBE  EC0E  F010         	call	_lcd_send_command	;wreg free
  2894   001BC2  EF09  F00E         	goto	l3839
  2895   001BC6                     l3833:
  2896   001BC6  C04C  F047         	movff	lcd_set_curser@lcd,lcd_send_command@lcd
  2897   001BCA  504E               	movf	lcd_set_curser@column^0,w,c
  2898   001BCC  0FD4               	addlw	212
  2899   001BCE  6E48               	movwf	lcd_send_command@command^0,c
  2900   001BD0  EC0E  F010         	call	_lcd_send_command	;wreg free
  2901   001BD4  EF09  F00E         	goto	l3839
  2902   001BD8                     l3837:
  2903   001BD8  504D               	movf	lcd_set_curser@row^0,w,c
  2904   001BDA  6E4F               	movwf	??_lcd_set_curser^0,c
  2905   001BDC  6A50               	clrf	(??_lcd_set_curser+1)^0,c
  2906                           
  2907                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2908                           ; Switch size 1, requested type "simple"
  2909                           ; Number of cases is 1, Range of values is 0 to 0
  2910                           ; switch strategies available:
  2911                           ; Name         Instructions Cycles
  2912                           ; simple_byte            4     3 (average)
  2913                           ;	Chosen strategy is simple_byte
  2914   001BDE  5050               	movf	(??_lcd_set_curser+1)^0,w,c
  2915   001BE0  0A00               	xorlw	0	; case 0
  2916   001BE2  B4D8               	btfsc	status,2,c
  2917   001BE4  EFF6  F00D         	goto	l4457
  2918   001BE8  EF09  F00E         	goto	l3839
  2919   001BEC                     l4457:
  2920                           
  2921                           ; Switch size 1, requested type "simple"
  2922                           ; Number of cases is 4, Range of values is 1 to 4
  2923                           ; switch strategies available:
  2924                           ; Name         Instructions Cycles
  2925                           ; simple_byte           13     7 (average)
  2926                           ;	Chosen strategy is simple_byte
  2927   001BEC  504F               	movf	??_lcd_set_curser^0,w,c
  2928   001BEE  0A01               	xorlw	1	; case 1
  2929   001BF0  B4D8               	btfsc	status,2,c
  2930   001BF2  EFC8  F00D         	goto	l3827
  2931   001BF6  0A03               	xorlw	3	; case 2
  2932   001BF8  B4D8               	btfsc	status,2,c
  2933   001BFA  EFD1  F00D         	goto	l3829
  2934   001BFE  0A01               	xorlw	1	; case 3
  2935   001C00  B4D8               	btfsc	status,2,c
  2936   001C02  EFDA  F00D         	goto	l3831
  2937   001C06  0A07               	xorlw	7	; case 4
  2938   001C08  B4D8               	btfsc	status,2,c
  2939   001C0A  EFE3  F00D         	goto	l3833
  2940   001C0E  EF09  F00E         	goto	l3839
  2941   001C12                     l3839:
  2942                           
  2943                           ;ECUAL/LCD/lcd.c: 373:     return ret;
  2944   001C12  0E00               	movlw	0
  2945   001C14  0012               	return		;funcret
  2946   001C16                     __end_of_lcd_set_curser:
  2947                           	callstack 0
  2948                           
  2949 ;; *************** function _lcd_send_string *****************
  2950 ;; Defined at:
  2951 ;;		line 171 in file "ECUAL/LCD/lcd.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;  lcd             1   22[COMRAM] PTR struct .
  2954 ;;		 -> lcd(6), 
  2955 ;;  str             1   23[COMRAM] PTR unsigned char 
  2956 ;;		 -> STR_7(9), STR_6(9), STR_5(9), STR_4(9), 
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;  ret             1   26[COMRAM] unsigned char 
  2959 ;;  lcd_ret         1   25[COMRAM] unsigned char 
  2960 ;;  gpio_ret        1   24[COMRAM] unsigned char 
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  1    wreg      unsigned char 
  2963 ;; Registers used:
  2964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2970 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2974 ;;Total ram usage:        5 bytes
  2975 ;; Hardware stack levels used: 1
  2976 ;; Hardware stack levels required when called: 6
  2977 ;; This function calls:
  2978 ;;		_lcd_send_char_data
  2979 ;; This function is called by:
  2980 ;;		_lcd_send_string_pos
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           	psect	text17
  2985   001E02                     __ptext17:
  2986                           	callstack 0
  2987   001E02                     _lcd_send_string:
  2988                           	callstack 22
  2989   001E02                     
  2990                           ;ECUAL/LCD/lcd.c: 174:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  2991   001E02  0E00               	movlw	0
  2992   001E04  6E4E               	movwf	lcd_send_string@gpio_ret^0,c
  2993                           
  2994                           ;ECUAL/LCD/lcd.c: 175:     Std_ReturnType lcd_ret=(Std_ReturnType)0x00;
  2995   001E06  0E00               	movlw	0
  2996   001E08  6E4F               	movwf	lcd_send_string@lcd_ret^0,c
  2997                           
  2998                           ;ECUAL/LCD/lcd.c: 176:     if(((void*)0)==lcd || ((void*)0)==str){
  2999   001E0A  504C               	movf	lcd_send_string@lcd^0,w,c
  3000   001E0C  B4D8               	btfsc	status,2,c
  3001   001E0E  EF0B  F00F         	goto	u2601
  3002   001E12  EF0D  F00F         	goto	u2600
  3003   001E16                     u2601:
  3004   001E16  EF15  F00F         	goto	l3881
  3005   001E1A                     u2600:
  3006   001E1A  504D               	movf	lcd_send_string@str^0,w,c
  3007   001E1C  A4D8               	btfss	status,2,c
  3008   001E1E  EF13  F00F         	goto	u2611
  3009   001E22  EF15  F00F         	goto	u2610
  3010   001E26                     u2611:
  3011   001E26  EF26  F00F         	goto	l3887
  3012   001E2A                     u2610:
  3013   001E2A                     l3881:
  3014                           
  3015                           ;ECUAL/LCD/lcd.c: 177:         ret=(Std_ReturnType)0x00;
  3016   001E2A  0E00               	movlw	0
  3017   001E2C  6E50               	movwf	lcd_send_string@ret^0,c
  3018                           
  3019                           ;ECUAL/LCD/lcd.c: 178:     }
  3020   001E2E  EF37  F00F         	goto	l75
  3021   001E32                     l3883:
  3022   001E32  C04C  F047         	movff	lcd_send_string@lcd,lcd_send_char_data@lcd
  3023   001E36  C04D  FFF6         	movff	lcd_send_string@str,tblptrl
  3024   001E3A                     	if	1	;There is more than 1 active tblptr byte
  3025   001E3A  0E10               	movlw	high __smallconst
  3026   001E3C  6EF7               	movwf	tblptrh,c
  3027   001E3E                     	endif
  3028   001E3E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3029   001E3E  6AF8               	clrf	tblptru,c
  3030   001E40                     	endif
  3031   001E40                     	if	0	;tblptru may be non-zero
  3032   001E40                     	endif
  3033   001E40  0008               	tblrd		*
  3034   001E42  CFF5 F048          	movff	tablat,lcd_send_char_data@data
  3035   001E46  ECDB  F00F         	call	_lcd_send_char_data	;wreg free
  3036   001E4A  2A4D               	incf	lcd_send_string@str^0,f,c
  3037   001E4C                     l3887:
  3038                           
  3039                           ;ECUAL/LCD/lcd.c: 180:         while(*str){
  3040   001E4C  C04D  FFF6         	movff	lcd_send_string@str,tblptrl
  3041   001E50                     	if	1	;There is more than 1 active tblptr byte
  3042   001E50  0E10               	movlw	high __smallconst
  3043   001E52  6EF7               	movwf	tblptrh,c
  3044   001E54                     	endif
  3045   001E54                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3046   001E54  6AF8               	clrf	tblptru,c
  3047   001E56                     	endif
  3048   001E56                     	if	0	;tblptru may be non-zero
  3049   001E56                     	endif
  3050   001E56  0008               	tblrd		*
  3051   001E58  50F5               	movf	tablat,w,c
  3052   001E5A  0900               	iorlw	0
  3053   001E5C  A4D8               	btfss	status,2,c
  3054   001E5E  EF33  F00F         	goto	u2621
  3055   001E62  EF35  F00F         	goto	u2620
  3056   001E66                     u2621:
  3057   001E66  EF19  F00F         	goto	l3883
  3058   001E6A                     u2620:
  3059   001E6A                     
  3060                           ;ECUAL/LCD/lcd.c: 184:         ret=(Std_ReturnType)0x01;
  3061   001E6A  0E01               	movlw	1
  3062   001E6C  6E50               	movwf	lcd_send_string@ret^0,c
  3063   001E6E                     l75:
  3064                           
  3065                           ;ECUAL/LCD/lcd.c: 187:     return ret;
  3066   001E6E  5050               	movf	lcd_send_string@ret^0,w,c
  3067   001E70  0012               	return		;funcret
  3068   001E72                     __end_of_lcd_send_string:
  3069                           	callstack 0
  3070                           
  3071 ;; *************** function _lcd_send_char_data *****************
  3072 ;; Defined at:
  3073 ;;		line 109 in file "ECUAL/LCD/lcd.c"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;  lcd             1   17[COMRAM] PTR struct .
  3076 ;;		 -> lcd(6), 
  3077 ;;  data            1   18[COMRAM] unsigned char 
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;  ret             1   21[COMRAM] unsigned char 
  3080 ;;  lcd_ret         1   20[COMRAM] unsigned char 
  3081 ;;  gpio_ret        1   19[COMRAM] unsigned char 
  3082 ;; Return value:  Size  Location     Type
  3083 ;;                  1    wreg      unsigned char 
  3084 ;; Registers used:
  3085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3086 ;; Tracked objects:
  3087 ;;		On entry : 0/0
  3088 ;;		On exit  : 0/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3091 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3092 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3094 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3095 ;;Total ram usage:        5 bytes
  3096 ;; Hardware stack levels used: 1
  3097 ;; Hardware stack levels required when called: 5
  3098 ;; This function calls:
  3099 ;;		_gpio_pin_logic_write
  3100 ;;		_lcd_send_enable
  3101 ;;		_lcd_send_nbits
  3102 ;; This function is called by:
  3103 ;;		_lcd_send_char_data_pos
  3104 ;;		_lcd_send_string
  3105 ;;		_lcd_send_custom_char
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           	psect	text18
  3110   001FB6                     __ptext18:
  3111                           	callstack 0
  3112   001FB6                     _lcd_send_char_data:
  3113                           	callstack 22
  3114   001FB6                     
  3115                           ;ECUAL/LCD/lcd.c: 112:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  3116   001FB6  0E00               	movlw	0
  3117   001FB8  6E49               	movwf	lcd_send_char_data@gpio_ret^0,c
  3118                           
  3119                           ;ECUAL/LCD/lcd.c: 113:     Std_ReturnType lcd_ret=(Std_ReturnType)0x00;
  3120   001FBA  0E00               	movlw	0
  3121   001FBC  6E4A               	movwf	lcd_send_char_data@lcd_ret^0,c
  3122                           
  3123                           ;ECUAL/LCD/lcd.c: 114:     if(((void*)0)==lcd){
  3124   001FBE  5047               	movf	lcd_send_char_data@lcd^0,w,c
  3125   001FC0  A4D8               	btfss	status,2,c
  3126   001FC2  EFE5  F00F         	goto	u2541
  3127   001FC6  EFE7  F00F         	goto	u2540
  3128   001FCA                     u2541:
  3129   001FCA  EFEB  F00F         	goto	l3815
  3130   001FCE                     u2540:
  3131   001FCE                     
  3132                           ;ECUAL/LCD/lcd.c: 115:         ret=(Std_ReturnType)0x00;
  3133   001FCE  0E00               	movlw	0
  3134   001FD0  6E4B               	movwf	lcd_send_char_data@ret^0,c
  3135                           
  3136                           ;ECUAL/LCD/lcd.c: 116:     }
  3137   001FD2  EF0C  F010         	goto	l3819
  3138   001FD6                     l3815:
  3139   001FD6  C047  F039         	movff	lcd_send_char_data@lcd,gpio_pin_logic_write@pin
  3140   001FDA  0E01               	movlw	1
  3141   001FDC  6E3A               	movwf	gpio_pin_logic_write@pin_logic^0,c
  3142   001FDE  EC52  F00A         	call	_gpio_pin_logic_write	;wreg free
  3143                           
  3144                           ;ECUAL/LCD/lcd.c: 120:         lcd_ret=lcd_send_nbits(lcd,data>>4);
  3145   001FE2  C047  F041         	movff	lcd_send_char_data@lcd,lcd_send_nbits@lcd
  3146   001FE6  3848               	swapf	lcd_send_char_data@data^0,w,c
  3147   001FE8  0B0F               	andlw	15
  3148   001FEA  6E42               	movwf	lcd_send_nbits@data_or_command^0,c
  3149   001FEC  ECEF  F011         	call	_lcd_send_nbits	;wreg free
  3150   001FF0  6E4A               	movwf	lcd_send_char_data@lcd_ret^0,c
  3151                           
  3152                           ;ECUAL/LCD/lcd.c: 121:         lcd_ret=lcd_send_enable(lcd);
  3153   001FF2  C047  F041         	movff	lcd_send_char_data@lcd,lcd_send_enable@lcd
  3154   001FF6  EC83  F013         	call	_lcd_send_enable	;wreg free
  3155   001FFA  6E4A               	movwf	lcd_send_char_data@lcd_ret^0,c
  3156                           
  3157                           ;ECUAL/LCD/lcd.c: 122:         lcd_ret=lcd_send_nbits(lcd,data);
  3158   001FFC  C047  F041         	movff	lcd_send_char_data@lcd,lcd_send_nbits@lcd
  3159   002000  C048  F042         	movff	lcd_send_char_data@data,lcd_send_nbits@data_or_command
  3160   002004  ECEF  F011         	call	_lcd_send_nbits	;wreg free
  3161   002008  6E4A               	movwf	lcd_send_char_data@lcd_ret^0,c
  3162                           
  3163                           ;ECUAL/LCD/lcd.c: 123:         lcd_ret=lcd_send_enable(lcd);
  3164   00200A  C047  F041         	movff	lcd_send_char_data@lcd,lcd_send_enable@lcd
  3165   00200E  EC83  F013         	call	_lcd_send_enable	;wreg free
  3166   002012  6E4A               	movwf	lcd_send_char_data@lcd_ret^0,c
  3167   002014                     
  3168                           ;ECUAL/LCD/lcd.c: 130:         ret=(Std_ReturnType)0x01;
  3169   002014  0E01               	movlw	1
  3170   002016  6E4B               	movwf	lcd_send_char_data@ret^0,c
  3171   002018                     l3819:
  3172                           
  3173                           ;ECUAL/LCD/lcd.c: 133:     return ret;
  3174   002018  504B               	movf	lcd_send_char_data@ret^0,w,c
  3175   00201A  0012               	return		;funcret
  3176   00201C                     __end_of_lcd_send_char_data:
  3177                           	callstack 0
  3178                           
  3179 ;; *************** function _app_init *****************
  3180 ;; Defined at:
  3181 ;;		line 29 in file "app.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;		None
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;		None
  3186 ;; Return value:  Size  Location     Type
  3187 ;;                  1    wreg      void 
  3188 ;; Registers used:
  3189 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;Total ram usage:        0 bytes
  3200 ;; Hardware stack levels used: 1
  3201 ;; Hardware stack levels required when called: 8
  3202 ;; This function calls:
  3203 ;;		_ecual_init
  3204 ;;		_interrupt_INTx_init
  3205 ;; This function is called by:
  3206 ;;		_main
  3207 ;; This function uses a non-reentrant model
  3208 ;;
  3209                           
  3210                           	psect	text19
  3211   0027CA                     __ptext19:
  3212                           	callstack 0
  3213   0027CA                     _app_init:
  3214                           	callstack 22
  3215   0027CA                     
  3216                           ;app.c: 31:     ecual_init();
  3217   0027CA  EC15  F012         	call	_ecual_init	;wreg free
  3218   0027CE                     
  3219                           ;app.c: 33:     ret=interrupt_INTx_init(&MY_INT0);
  3220   0027CE  0EAA               	movlw	low _MY_INT0
  3221   0027D0  6E47               	movwf	interrupt_INTx_init@_interrupt^0,c
  3222   0027D2  ECA2  F010         	call	_interrupt_INTx_init	;wreg free
  3223   0027D6  0100               	movlb	0	; () banked
  3224   0027D8  6FB3               	movwf	_ret& (0+255),b
  3225   0027DA                     
  3226                           ; BSR set to: 0
  3227   0027DA  0012               	return		;funcret
  3228   0027DC                     __end_of_app_init:
  3229                           	callstack 0
  3230                           
  3231 ;; *************** function _interrupt_INTx_init *****************
  3232 ;; Defined at:
  3233 ;;		line 57 in file "MCAL/INTERRUPT/mcal_external_interrupt.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;  _interrupt      1   17[COMRAM] PTR struct .
  3236 ;;		 -> MY_INT0(6), 
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;  ret             1   18[COMRAM] unsigned char 
  3239 ;; Return value:  Size  Location     Type
  3240 ;;                  1    wreg      unsigned char 
  3241 ;; Registers used:
  3242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3243 ;; Tracked objects:
  3244 ;;		On entry : 0/0
  3245 ;;		On exit  : 0/0
  3246 ;;		Unchanged: 0/0
  3247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3248 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3251 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;Total ram usage:        2 bytes
  3253 ;; Hardware stack levels used: 1
  3254 ;; Hardware stack levels required when called: 6
  3255 ;; This function calls:
  3256 ;;		_INTx_select_InterruptHandler
  3257 ;;		_interrupt_INTx_clear_flag
  3258 ;;		_interrupt_INTx_disable
  3259 ;;		_interrupt_INTx_edge_init
  3260 ;;		_interrupt_INTx_enable
  3261 ;;		_interrupt_INTx_pin_init
  3262 ;; This function is called by:
  3263 ;;		_app_init
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           	psect	text20
  3268   002144                     __ptext20:
  3269                           	callstack 0
  3270   002144                     _interrupt_INTx_init:
  3271                           	callstack 23
  3272   002144                     
  3273                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 60:     if(((void*)0)==_interrupt){
  3274   002144  5047               	movf	interrupt_INTx_init@_interrupt^0,w,c
  3275   002146  A4D8               	btfss	status,2,c
  3276   002148  EFA8  F010         	goto	u2231
  3277   00214C  EFAA  F010         	goto	u2230
  3278   002150                     u2231:
  3279   002150  EFAE  F010         	goto	l3287
  3280   002154                     u2230:
  3281   002154                     
  3282                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 61:         ret=(Std_ReturnType)0x00;
  3283   002154  0E00               	movlw	0
  3284   002156  6E48               	movwf	interrupt_INTx_init@ret^0,c
  3285                           
  3286                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 62:     }
  3287   002158  EFCC  F010         	goto	l3295
  3288   00215C                     l3287:
  3289                           
  3290                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 66:         ret=interrupt_INTx_disable(_inter
      +                          rupt);
  3291   00215C  C047  F039         	movff	interrupt_INTx_init@_interrupt,interrupt_INTx_disable@_interrupt
  3292   002160  EC39  F00F         	call	_interrupt_INTx_disable	;wreg free
  3293   002164  6E48               	movwf	interrupt_INTx_init@ret^0,c
  3294                           
  3295                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 68:         ret|=interrupt_INTx_clear_flag(_i
      +                          nterrupt);
  3296   002166  C047  F039         	movff	interrupt_INTx_init@_interrupt,interrupt_INTx_clear_flag@_interrupt
  3297   00216A  EC70  F00F         	call	_interrupt_INTx_clear_flag	;wreg free
  3298   00216E  1248               	iorwf	interrupt_INTx_init@ret^0,f,c
  3299                           
  3300                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 74:         ret|=interrupt_INTx_edge_init(_in
      +                          terrupt);
  3301   002170  C047  F039         	movff	interrupt_INTx_init@_interrupt,interrupt_INTx_edge_init@_interrupt
  3302   002174  EC1D  F00C         	call	_interrupt_INTx_edge_init	;wreg free
  3303   002178  1248               	iorwf	interrupt_INTx_init@ret^0,f,c
  3304   00217A                     
  3305                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 76:         ret|=interrupt_INTx_pin_init(_int
      +                          errupt);
  3306   00217A  C047  F045         	movff	interrupt_INTx_init@_interrupt,interrupt_INTx_pin_init@_interrupt
  3307   00217E  EC6F  F013         	call	_interrupt_INTx_pin_init	;wreg free
  3308   002182  1248               	iorwf	interrupt_INTx_init@ret^0,f,c
  3309   002184                     
  3310                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 78:         ret|=INTx_select_InterruptHandler
      +                          (_interrupt);
  3311   002184  C047  F03C         	movff	interrupt_INTx_init@_interrupt,INTx_select_InterruptHandler@_interrupt
  3312   002188  EC23  F00D         	call	_INTx_select_InterruptHandler	;wreg free
  3313   00218C  1248               	iorwf	interrupt_INTx_init@ret^0,f,c
  3314   00218E                     
  3315                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 80:         ret|=interrupt_INTx_enable(_inter
      +                          rupt);
  3316   00218E  C047  F039         	movff	interrupt_INTx_init@_interrupt,interrupt_INTx_enable@_interrupt
  3317   002192  EC51  F00E         	call	_interrupt_INTx_enable	;wreg free
  3318   002196  1248               	iorwf	interrupt_INTx_init@ret^0,f,c
  3319   002198                     l3295:
  3320                           
  3321                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 84:     return ret;
  3322   002198  5048               	movf	interrupt_INTx_init@ret^0,w,c
  3323   00219A  0012               	return		;funcret
  3324   00219C                     __end_of_interrupt_INTx_init:
  3325                           	callstack 0
  3326                           
  3327 ;; *************** function _interrupt_INTx_pin_init *****************
  3328 ;; Defined at:
  3329 ;;		line 342 in file "MCAL/INTERRUPT/mcal_external_interrupt.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;  _interrupt      1   15[COMRAM] PTR struct .
  3332 ;;		 -> MY_INT0(6), 
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;  ret             1   16[COMRAM] unsigned char 
  3335 ;; Return value:  Size  Location     Type
  3336 ;;                  1    wreg      unsigned char 
  3337 ;; Registers used:
  3338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/0
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3344 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3345 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3347 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3348 ;;Total ram usage:        2 bytes
  3349 ;; Hardware stack levels used: 1
  3350 ;; Hardware stack levels required when called: 5
  3351 ;; This function calls:
  3352 ;;		_gpio_pin_input_init
  3353 ;; This function is called by:
  3354 ;;		_interrupt_INTx_init
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           	psect	text21
  3359   0026DE                     __ptext21:
  3360                           	callstack 0
  3361   0026DE                     _interrupt_INTx_pin_init:
  3362                           	callstack 23
  3363   0026DE                     
  3364                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 345:     if(((void*)0)==_interrupt){
  3365   0026DE  5045               	movf	interrupt_INTx_pin_init@_interrupt^0,w,c
  3366   0026E0  A4D8               	btfss	status,2,c
  3367   0026E2  EF75  F013         	goto	u2161
  3368   0026E6  EF77  F013         	goto	u2160
  3369   0026EA                     u2161:
  3370   0026EA  EF7B  F013         	goto	l3181
  3371   0026EE                     u2160:
  3372   0026EE                     
  3373                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 346:         ret=(Std_ReturnType)0x00;
  3374   0026EE  0E00               	movlw	0
  3375   0026F0  6E46               	movwf	interrupt_INTx_pin_init@ret^0,c
  3376                           
  3377                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 347:     }
  3378   0026F2  EF81  F013         	goto	l3183
  3379   0026F6                     l3181:
  3380                           
  3381                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 349:         ret=gpio_pin_input_init(&(_inter
      +                          rupt->INTx_pin));
  3382   0026F6  5045               	movf	interrupt_INTx_pin_init@_interrupt^0,w,c
  3383   0026F8  0F02               	addlw	2
  3384   0026FA  6E41               	movwf	gpio_pin_input_init@pin^0,c
  3385   0026FC  EC9F  F011         	call	_gpio_pin_input_init	;wreg free
  3386   002700  6E46               	movwf	interrupt_INTx_pin_init@ret^0,c
  3387   002702                     l3183:
  3388                           
  3389                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 352:     return ret;
  3390   002702  5046               	movf	interrupt_INTx_pin_init@ret^0,w,c
  3391   002704  0012               	return		;funcret
  3392   002706                     __end_of_interrupt_INTx_pin_init:
  3393                           	callstack 0
  3394                           
  3395 ;; *************** function _gpio_pin_input_init *****************
  3396 ;; Defined at:
  3397 ;;		line 211 in file "MCAL/GPIO/gpio.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;  pin             1   11[COMRAM] PTR struct .
  3400 ;;		 -> MY_INT0(6), 
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;  ret             1   14[COMRAM] unsigned char 
  3403 ;;  gpio_ret        1   13[COMRAM] unsigned char 
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  1    wreg      unsigned char 
  3406 ;; Registers used:
  3407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3413 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3417 ;;Total ram usage:        4 bytes
  3418 ;; Hardware stack levels used: 1
  3419 ;; Hardware stack levels required when called: 4
  3420 ;; This function calls:
  3421 ;;		_gpio_pin_direction_init
  3422 ;; This function is called by:
  3423 ;;		_interrupt_INTx_pin_init
  3424 ;;		_interrupt_RBx_init
  3425 ;;		_interrupt_RBx_pin_init
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429                           	psect	text22
  3430   00233E                     __ptext22:
  3431                           	callstack 0
  3432   00233E                     _gpio_pin_input_init:
  3433                           	callstack 23
  3434   00233E                     
  3435                           ;MCAL/GPIO/gpio.c: 214:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  3436   00233E  0E00               	movlw	0
  3437   002340  6E43               	movwf	gpio_pin_input_init@gpio_ret^0,c
  3438                           
  3439                           ;MCAL/GPIO/gpio.c: 215:     if(((void*)0)==pin || (pin->pin)>7){
  3440   002342  5041               	movf	gpio_pin_input_init@pin^0,w,c
  3441   002344  B4D8               	btfsc	status,2,c
  3442   002346  EFA7  F011         	goto	u1831
  3443   00234A  EFA9  F011         	goto	u1830
  3444   00234E                     u1831:
  3445   00234E  EFB9  F011         	goto	l2869
  3446   002352                     u1830:
  3447   002352  5041               	movf	gpio_pin_input_init@pin^0,w,c
  3448   002354  6ED9               	movwf	fsr2l,c
  3449   002356  6ADA               	clrf	fsr2h,c
  3450   002358  30DF               	rrcf	223,w,c
  3451   00235A  32E8               	rrcf	wreg,f,c
  3452   00235C  32E8               	rrcf	wreg,f,c
  3453   00235E  0B07               	andlw	7
  3454   002360  6E42               	movwf	??_gpio_pin_input_init^0,c
  3455   002362  0E07               	movlw	7
  3456   002364  6442               	cpfsgt	??_gpio_pin_input_init^0,c
  3457   002366  EFB7  F011         	goto	u1841
  3458   00236A  EFB9  F011         	goto	u1840
  3459   00236E                     u1841:
  3460   00236E  EFBD  F011         	goto	l2871
  3461   002372                     u1840:
  3462   002372                     l2869:
  3463                           
  3464                           ;MCAL/GPIO/gpio.c: 216:         ret=(Std_ReturnType)0x00;
  3465   002372  0E00               	movlw	0
  3466   002374  6E44               	movwf	gpio_pin_input_init@ret^0,c
  3467                           
  3468                           ;MCAL/GPIO/gpio.c: 217:     }
  3469   002376  EFC5  F011         	goto	l2875
  3470   00237A                     l2871:
  3471   00237A  C041  F039         	movff	gpio_pin_input_init@pin,gpio_pin_direction_init@pin
  3472   00237E  0E01               	movlw	1
  3473   002380  6E3A               	movwf	gpio_pin_direction_init@pin_direction^0,c
  3474   002382  ECEC  F00A         	call	_gpio_pin_direction_init	;wreg free
  3475   002386                     
  3476                           ;MCAL/GPIO/gpio.c: 220:         ret=(Std_ReturnType)0x01;
  3477   002386  0E01               	movlw	1
  3478   002388  6E44               	movwf	gpio_pin_input_init@ret^0,c
  3479   00238A                     l2875:
  3480                           
  3481                           ;MCAL/GPIO/gpio.c: 223:     return ret;
  3482   00238A  5044               	movf	gpio_pin_input_init@ret^0,w,c
  3483   00238C  0012               	return		;funcret
  3484   00238E                     __end_of_gpio_pin_input_init:
  3485                           	callstack 0
  3486                           
  3487 ;; *************** function _interrupt_INTx_enable *****************
  3488 ;; Defined at:
  3489 ;;		line 139 in file "MCAL/INTERRUPT/mcal_external_interrupt.c"
  3490 ;; Parameters:    Size  Location     Type
  3491 ;;  _interrupt      1    3[COMRAM] PTR struct .
  3492 ;;		 -> MY_INT0(6), 
  3493 ;; Auto vars:     Size  Location     Type
  3494 ;;  ret             1    6[COMRAM] unsigned char 
  3495 ;; Return value:  Size  Location     Type
  3496 ;;                  1    wreg      unsigned char 
  3497 ;; Registers used:
  3498 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3499 ;; Tracked objects:
  3500 ;;		On entry : 0/0
  3501 ;;		On exit  : 0/0
  3502 ;;		Unchanged: 0/0
  3503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3504 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3506 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3507 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3508 ;;Total ram usage:        4 bytes
  3509 ;; Hardware stack levels used: 1
  3510 ;; Hardware stack levels required when called: 3
  3511 ;; This function calls:
  3512 ;;		Nothing
  3513 ;; This function is called by:
  3514 ;;		_interrupt_INTx_init
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           	psect	text23
  3519   001CA2                     __ptext23:
  3520                           	callstack 0
  3521   001CA2                     _interrupt_INTx_enable:
  3522                           	callstack 25
  3523   001CA2                     
  3524                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 142:     if(((void*)0)==_interrupt){
  3525   001CA2  5039               	movf	interrupt_INTx_enable@_interrupt^0,w,c
  3526   001CA4  A4D8               	btfss	status,2,c
  3527   001CA6  EF57  F00E         	goto	u2181
  3528   001CAA  EF59  F00E         	goto	u2180
  3529   001CAE                     u2181:
  3530   001CAE  EF6E  F00E         	goto	l3225
  3531   001CB2                     u2180:
  3532   001CB2                     l3213:
  3533                           
  3534                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 143:         ret=(Std_ReturnType)0x00;
  3535   001CB2  0E00               	movlw	0
  3536   001CB4  6E3C               	movwf	interrupt_INTx_enable@ret^0,c
  3537                           
  3538                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 144:     }
  3539   001CB6  EF8C  F00E         	goto	l3227
  3540   001CBA                     l446:
  3541                           
  3542                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 152:                 (INTCONbits.GIE=1);
  3543   001CBA  8EF2               	bsf	242,7,c	;volatile
  3544                           
  3545                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 153:                 (INTCONbits.PEIE=1);
  3546   001CBC  8CF2               	bsf	242,6,c	;volatile
  3547                           
  3548                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 156:                 (INTCONbits.INT0E=1);
  3549   001CBE  88F2               	bsf	242,4,c	;volatile
  3550   001CC0                     l3215:
  3551                           
  3552                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 157:                 ret=(Std_ReturnType)0x01
      +                          ;
  3553   001CC0  0E01               	movlw	1
  3554   001CC2  6E3C               	movwf	interrupt_INTx_enable@ret^0,c
  3555                           
  3556                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 158:                 break;
  3557   001CC4  EF8C  F00E         	goto	l3227
  3558   001CC8                     l448:
  3559                           
  3560                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 165:                 (INTCONbits.GIE=1);
  3561   001CC8  8EF2               	bsf	242,7,c	;volatile
  3562                           
  3563                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 166:                 (INTCONbits.PEIE=1);
  3564   001CCA  8CF2               	bsf	242,6,c	;volatile
  3565                           
  3566                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 168:                 (INTCON3bits.INT1E=1);
  3567   001CCC  86F0               	bsf	240,3,c	;volatile
  3568   001CCE  EF60  F00E         	goto	l3215
  3569   001CD2                     l449:
  3570                           
  3571                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 177:                 (INTCONbits.GIE=1);
  3572   001CD2  8EF2               	bsf	242,7,c	;volatile
  3573                           
  3574                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 178:                 (INTCONbits.PEIE=1);
  3575   001CD4  8CF2               	bsf	242,6,c	;volatile
  3576                           
  3577                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 180:                 (INTCON3bits.INT2E=1);
  3578   001CD6  88F0               	bsf	240,4,c	;volatile
  3579   001CD8  EF60  F00E         	goto	l3215
  3580   001CDC                     l3225:
  3581   001CDC  5039               	movf	interrupt_INTx_enable@_interrupt^0,w,c
  3582   001CDE  6ED9               	movwf	fsr2l,c
  3583   001CE0  6ADA               	clrf	fsr2h,c
  3584   001CE2  0E04               	movlw	4
  3585   001CE4  26D9               	addwf	fsr2l,f,c
  3586   001CE6  50DF               	movf	indf2,w,c
  3587   001CE8  6E3A               	movwf	??_interrupt_INTx_enable^0,c
  3588   001CEA  6A3B               	clrf	(??_interrupt_INTx_enable+1)^0,c
  3589                           
  3590                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3591                           ; Switch size 1, requested type "simple"
  3592                           ; Number of cases is 1, Range of values is 0 to 0
  3593                           ; switch strategies available:
  3594                           ; Name         Instructions Cycles
  3595                           ; simple_byte            4     3 (average)
  3596                           ;	Chosen strategy is simple_byte
  3597   001CEC  503B               	movf	(??_interrupt_INTx_enable+1)^0,w,c
  3598   001CEE  0A00               	xorlw	0	; case 0
  3599   001CF0  B4D8               	btfsc	status,2,c
  3600   001CF2  EF7D  F00E         	goto	l4459
  3601   001CF6  EF59  F00E         	goto	l3213
  3602   001CFA                     l4459:
  3603                           
  3604                           ; Switch size 1, requested type "simple"
  3605                           ; Number of cases is 3, Range of values is 0 to 2
  3606                           ; switch strategies available:
  3607                           ; Name         Instructions Cycles
  3608                           ; simple_byte           10     6 (average)
  3609                           ;	Chosen strategy is simple_byte
  3610   001CFA  503A               	movf	??_interrupt_INTx_enable^0,w,c
  3611   001CFC  0A00               	xorlw	0	; case 0
  3612   001CFE  B4D8               	btfsc	status,2,c
  3613   001D00  EF5D  F00E         	goto	l446
  3614   001D04  0A01               	xorlw	1	; case 1
  3615   001D06  B4D8               	btfsc	status,2,c
  3616   001D08  EF64  F00E         	goto	l448
  3617   001D0C  0A03               	xorlw	3	; case 2
  3618   001D0E  B4D8               	btfsc	status,2,c
  3619   001D10  EF69  F00E         	goto	l449
  3620   001D14  EF59  F00E         	goto	l3213
  3621   001D18                     l3227:
  3622                           
  3623                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 189:     return ret;
  3624   001D18  503C               	movf	interrupt_INTx_enable@ret^0,w,c
  3625   001D1A  0012               	return		;funcret
  3626   001D1C                     __end_of_interrupt_INTx_enable:
  3627                           	callstack 0
  3628                           
  3629 ;; *************** function _interrupt_INTx_edge_init *****************
  3630 ;; Defined at:
  3631 ;;		line 304 in file "MCAL/INTERRUPT/mcal_external_interrupt.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;  _interrupt      1    3[COMRAM] PTR struct .
  3634 ;;		 -> MY_INT0(6), 
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;  ret             1    6[COMRAM] unsigned char 
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      unsigned char 
  3639 ;; Registers used:
  3640 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3646 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;Total ram usage:        4 bytes
  3651 ;; Hardware stack levels used: 1
  3652 ;; Hardware stack levels required when called: 3
  3653 ;; This function calls:
  3654 ;;		Nothing
  3655 ;; This function is called by:
  3656 ;;		_interrupt_INTx_init
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           	psect	text24
  3661   00183A                     __ptext24:
  3662                           	callstack 0
  3663   00183A                     _interrupt_INTx_edge_init:
  3664                           	callstack 25
  3665   00183A                     
  3666                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 307:     if(((void*)0)==_interrupt){
  3667   00183A  5039               	movf	interrupt_INTx_edge_init@_interrupt^0,w,c
  3668   00183C  A4D8               	btfss	status,2,c
  3669   00183E  EF23  F00C         	goto	u2091
  3670   001842  EF25  F00C         	goto	u2090
  3671   001846                     u2091:
  3672   001846  EF8B  F00C         	goto	l3167
  3673   00184A                     u2090:
  3674   00184A                     l3131:
  3675                           
  3676                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 308:         ret=(Std_ReturnType)0x00;
  3677   00184A  0E00               	movlw	0
  3678   00184C  6E3C               	movwf	interrupt_INTx_edge_init@ret^0,c
  3679                           
  3680                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 309:     }
  3681   00184E  EFA9  F00C         	goto	l3169
  3682   001852                     l3133:
  3683                           
  3684                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 313:                 if(RISING_EDGE==_interru
      +                          pt->edge){ (INTCON2bits.INTEDG0=1);}
  3685   001852  5039               	movf	interrupt_INTx_edge_init@_interrupt^0,w,c
  3686   001854  6ED9               	movwf	fsr2l,c
  3687   001856  6ADA               	clrf	fsr2h,c
  3688   001858  0E03               	movlw	3
  3689   00185A  26D9               	addwf	fsr2l,f,c
  3690   00185C  04DE               	decf	postinc2,w,c
  3691   00185E  A4D8               	btfss	status,2,c
  3692   001860  EF34  F00C         	goto	u2101
  3693   001864  EF36  F00C         	goto	u2100
  3694   001868                     u2101:
  3695   001868  EF39  F00C         	goto	l3137
  3696   00186C                     u2100:
  3697   00186C  8CF1               	bsf	241,6,c	;volatile
  3698   00186E  EF47  F00C         	goto	l3141
  3699   001872                     l3137:
  3700   001872  5039               	movf	interrupt_INTx_edge_init@_interrupt^0,w,c
  3701   001874  6ED9               	movwf	fsr2l,c
  3702   001876  6ADA               	clrf	fsr2h,c
  3703   001878  0E03               	movlw	3
  3704   00187A  26D9               	addwf	fsr2l,f,c
  3705   00187C  50DF               	movf	indf2,w,c
  3706   00187E  A4D8               	btfss	status,2,c
  3707   001880  EF44  F00C         	goto	u2111
  3708   001884  EF46  F00C         	goto	u2110
  3709   001888                     u2111:
  3710   001888  EF47  F00C         	goto	l3141
  3711   00188C                     u2110:
  3712   00188C  9CF1               	bcf	241,6,c	;volatile
  3713   00188E                     l3141:
  3714                           
  3715                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 315:                 ret=(Std_ReturnType)0x01
      +                          ;
  3716   00188E  0E01               	movlw	1
  3717   001890  6E3C               	movwf	interrupt_INTx_edge_init@ret^0,c
  3718                           
  3719                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 316:                 break;
  3720   001892  EFA9  F00C         	goto	l3169
  3721   001896                     l3143:
  3722                           
  3723                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 318:                 if(RISING_EDGE==_interru
      +                          pt->edge){(INTCON2bits.INTEDG1=1);}
  3724   001896  5039               	movf	interrupt_INTx_edge_init@_interrupt^0,w,c
  3725   001898  6ED9               	movwf	fsr2l,c
  3726   00189A  6ADA               	clrf	fsr2h,c
  3727   00189C  0E03               	movlw	3
  3728   00189E  26D9               	addwf	fsr2l,f,c
  3729   0018A0  04DE               	decf	postinc2,w,c
  3730   0018A2  A4D8               	btfss	status,2,c
  3731   0018A4  EF56  F00C         	goto	u2121
  3732   0018A8  EF58  F00C         	goto	u2120
  3733   0018AC                     u2121:
  3734   0018AC  EF5B  F00C         	goto	l3147
  3735   0018B0                     u2120:
  3736   0018B0  8AF1               	bsf	241,5,c	;volatile
  3737   0018B2  EF47  F00C         	goto	l3141
  3738   0018B6                     l3147:
  3739   0018B6  5039               	movf	interrupt_INTx_edge_init@_interrupt^0,w,c
  3740   0018B8  6ED9               	movwf	fsr2l,c
  3741   0018BA  6ADA               	clrf	fsr2h,c
  3742   0018BC  0E03               	movlw	3
  3743   0018BE  26D9               	addwf	fsr2l,f,c
  3744   0018C0  50DF               	movf	indf2,w,c
  3745   0018C2  A4D8               	btfss	status,2,c
  3746   0018C4  EF66  F00C         	goto	u2131
  3747   0018C8  EF68  F00C         	goto	u2130
  3748   0018CC                     u2131:
  3749   0018CC  EF47  F00C         	goto	l3141
  3750   0018D0                     u2130:
  3751   0018D0  9AF1               	bcf	241,5,c	;volatile
  3752   0018D2  EF47  F00C         	goto	l3141
  3753   0018D6                     l3153:
  3754                           
  3755                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 323:                 if(RISING_EDGE==_interru
      +                          pt->edge){(INTCON2bits.INTEDG2=1);}
  3756   0018D6  5039               	movf	interrupt_INTx_edge_init@_interrupt^0,w,c
  3757   0018D8  6ED9               	movwf	fsr2l,c
  3758   0018DA  6ADA               	clrf	fsr2h,c
  3759   0018DC  0E03               	movlw	3
  3760   0018DE  26D9               	addwf	fsr2l,f,c
  3761   0018E0  04DE               	decf	postinc2,w,c
  3762   0018E2  A4D8               	btfss	status,2,c
  3763   0018E4  EF76  F00C         	goto	u2141
  3764   0018E8  EF78  F00C         	goto	u2140
  3765   0018EC                     u2141:
  3766   0018EC  EF7B  F00C         	goto	l3157
  3767   0018F0                     u2140:
  3768   0018F0  88F1               	bsf	241,4,c	;volatile
  3769   0018F2  EF47  F00C         	goto	l3141
  3770   0018F6                     l3157:
  3771   0018F6  5039               	movf	interrupt_INTx_edge_init@_interrupt^0,w,c
  3772   0018F8  6ED9               	movwf	fsr2l,c
  3773   0018FA  6ADA               	clrf	fsr2h,c
  3774   0018FC  0E03               	movlw	3
  3775   0018FE  26D9               	addwf	fsr2l,f,c
  3776   001900  50DF               	movf	indf2,w,c
  3777   001902  A4D8               	btfss	status,2,c
  3778   001904  EF86  F00C         	goto	u2151
  3779   001908  EF88  F00C         	goto	u2150
  3780   00190C                     u2151:
  3781   00190C  EF47  F00C         	goto	l3141
  3782   001910                     u2150:
  3783   001910  98F1               	bcf	241,4,c	;volatile
  3784   001912  EF47  F00C         	goto	l3141
  3785   001916                     l3167:
  3786   001916  5039               	movf	interrupt_INTx_edge_init@_interrupt^0,w,c
  3787   001918  6ED9               	movwf	fsr2l,c
  3788   00191A  6ADA               	clrf	fsr2h,c
  3789   00191C  0E04               	movlw	4
  3790   00191E  26D9               	addwf	fsr2l,f,c
  3791   001920  50DF               	movf	indf2,w,c
  3792   001922  6E3A               	movwf	??_interrupt_INTx_edge_init^0,c
  3793   001924  6A3B               	clrf	(??_interrupt_INTx_edge_init+1)^0,c
  3794                           
  3795                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3796                           ; Switch size 1, requested type "simple"
  3797                           ; Number of cases is 1, Range of values is 0 to 0
  3798                           ; switch strategies available:
  3799                           ; Name         Instructions Cycles
  3800                           ; simple_byte            4     3 (average)
  3801                           ;	Chosen strategy is simple_byte
  3802   001926  503B               	movf	(??_interrupt_INTx_edge_init+1)^0,w,c
  3803   001928  0A00               	xorlw	0	; case 0
  3804   00192A  B4D8               	btfsc	status,2,c
  3805   00192C  EF9A  F00C         	goto	l4461
  3806   001930  EF25  F00C         	goto	l3131
  3807   001934                     l4461:
  3808                           
  3809                           ; Switch size 1, requested type "simple"
  3810                           ; Number of cases is 3, Range of values is 0 to 2
  3811                           ; switch strategies available:
  3812                           ; Name         Instructions Cycles
  3813                           ; simple_byte           10     6 (average)
  3814                           ;	Chosen strategy is simple_byte
  3815   001934  503A               	movf	??_interrupt_INTx_edge_init^0,w,c
  3816   001936  0A00               	xorlw	0	; case 0
  3817   001938  B4D8               	btfsc	status,2,c
  3818   00193A  EF29  F00C         	goto	l3133
  3819   00193E  0A01               	xorlw	1	; case 1
  3820   001940  B4D8               	btfsc	status,2,c
  3821   001942  EF4B  F00C         	goto	l3143
  3822   001946  0A03               	xorlw	3	; case 2
  3823   001948  B4D8               	btfsc	status,2,c
  3824   00194A  EF6B  F00C         	goto	l3153
  3825   00194E  EF25  F00C         	goto	l3131
  3826   001952                     l3169:
  3827                           
  3828                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 333:     return ret;
  3829   001952  503C               	movf	interrupt_INTx_edge_init@ret^0,w,c
  3830   001954  0012               	return		;funcret
  3831   001956                     __end_of_interrupt_INTx_edge_init:
  3832                           	callstack 0
  3833                           
  3834 ;; *************** function _interrupt_INTx_disable *****************
  3835 ;; Defined at:
  3836 ;;		line 198 in file "MCAL/INTERRUPT/mcal_external_interrupt.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;  _interrupt      1    3[COMRAM] PTR struct .
  3839 ;;		 -> MY_INT0(6), 
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;  ret             1    6[COMRAM] unsigned char 
  3842 ;; Return value:  Size  Location     Type
  3843 ;;                  1    wreg      unsigned char 
  3844 ;; Registers used:
  3845 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3846 ;; Tracked objects:
  3847 ;;		On entry : 0/0
  3848 ;;		On exit  : 0/0
  3849 ;;		Unchanged: 0/0
  3850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3851 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3852 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3853 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3854 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;Total ram usage:        4 bytes
  3856 ;; Hardware stack levels used: 1
  3857 ;; Hardware stack levels required when called: 3
  3858 ;; This function calls:
  3859 ;;		Nothing
  3860 ;; This function is called by:
  3861 ;;		_interrupt_INTx_init
  3862 ;;		_interrupt_INTx_deInit
  3863 ;; This function uses a non-reentrant model
  3864 ;;
  3865                           
  3866                           	psect	text25
  3867   001E72                     __ptext25:
  3868                           	callstack 0
  3869   001E72                     _interrupt_INTx_disable:
  3870                           	callstack 25
  3871   001E72                     
  3872                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 201:     if(((void*)0)==_interrupt){
  3873   001E72  5039               	movf	interrupt_INTx_disable@_interrupt^0,w,c
  3874   001E74  A4D8               	btfss	status,2,c
  3875   001E76  EF3F  F00F         	goto	u2071
  3876   001E7A  EF41  F00F         	goto	u2070
  3877   001E7E                     u2071:
  3878   001E7E  EF50  F00F         	goto	l3095
  3879   001E82                     u2070:
  3880   001E82                     l3083:
  3881                           
  3882                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 202:         ret=(Std_ReturnType)0x00;
  3883   001E82  0E00               	movlw	0
  3884   001E84  6E3C               	movwf	interrupt_INTx_disable@ret^0,c
  3885                           
  3886                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 203:     }
  3887   001E86  EF6E  F00F         	goto	l3097
  3888   001E8A                     l457:
  3889                           
  3890                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 207:                 (INTCONbits.INT0E=0);
  3891   001E8A  98F2               	bcf	242,4,c	;volatile
  3892   001E8C                     l3085:
  3893                           
  3894                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 208:                 ret=(Std_ReturnType)0x01
      +                          ;
  3895   001E8C  0E01               	movlw	1
  3896   001E8E  6E3C               	movwf	interrupt_INTx_disable@ret^0,c
  3897                           
  3898                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 209:                 break;
  3899   001E90  EF6E  F00F         	goto	l3097
  3900   001E94                     l459:
  3901                           
  3902                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 211:                 (INTCON3bits.INT1E=0);
  3903   001E94  96F0               	bcf	240,3,c	;volatile
  3904   001E96  EF46  F00F         	goto	l3085
  3905   001E9A                     l460:
  3906                           
  3907                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 215:                 (INTCON3bits.INT2E=0);
  3908   001E9A  98F0               	bcf	240,4,c	;volatile
  3909   001E9C  EF46  F00F         	goto	l3085
  3910   001EA0                     l3095:
  3911   001EA0  5039               	movf	interrupt_INTx_disable@_interrupt^0,w,c
  3912   001EA2  6ED9               	movwf	fsr2l,c
  3913   001EA4  6ADA               	clrf	fsr2h,c
  3914   001EA6  0E04               	movlw	4
  3915   001EA8  26D9               	addwf	fsr2l,f,c
  3916   001EAA  50DF               	movf	indf2,w,c
  3917   001EAC  6E3A               	movwf	??_interrupt_INTx_disable^0,c
  3918   001EAE  6A3B               	clrf	(??_interrupt_INTx_disable+1)^0,c
  3919                           
  3920                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3921                           ; Switch size 1, requested type "simple"
  3922                           ; Number of cases is 1, Range of values is 0 to 0
  3923                           ; switch strategies available:
  3924                           ; Name         Instructions Cycles
  3925                           ; simple_byte            4     3 (average)
  3926                           ;	Chosen strategy is simple_byte
  3927   001EB0  503B               	movf	(??_interrupt_INTx_disable+1)^0,w,c
  3928   001EB2  0A00               	xorlw	0	; case 0
  3929   001EB4  B4D8               	btfsc	status,2,c
  3930   001EB6  EF5F  F00F         	goto	l4463
  3931   001EBA  EF41  F00F         	goto	l3083
  3932   001EBE                     l4463:
  3933                           
  3934                           ; Switch size 1, requested type "simple"
  3935                           ; Number of cases is 3, Range of values is 0 to 2
  3936                           ; switch strategies available:
  3937                           ; Name         Instructions Cycles
  3938                           ; simple_byte           10     6 (average)
  3939                           ;	Chosen strategy is simple_byte
  3940   001EBE  503A               	movf	??_interrupt_INTx_disable^0,w,c
  3941   001EC0  0A00               	xorlw	0	; case 0
  3942   001EC2  B4D8               	btfsc	status,2,c
  3943   001EC4  EF45  F00F         	goto	l457
  3944   001EC8  0A01               	xorlw	1	; case 1
  3945   001ECA  B4D8               	btfsc	status,2,c
  3946   001ECC  EF4A  F00F         	goto	l459
  3947   001ED0  0A03               	xorlw	3	; case 2
  3948   001ED2  B4D8               	btfsc	status,2,c
  3949   001ED4  EF4D  F00F         	goto	l460
  3950   001ED8  EF41  F00F         	goto	l3083
  3951   001EDC                     l3097:
  3952                           
  3953                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 224:     return ret;
  3954   001EDC  503C               	movf	interrupt_INTx_disable@ret^0,w,c
  3955   001EDE  0012               	return		;funcret
  3956   001EE0                     __end_of_interrupt_INTx_disable:
  3957                           	callstack 0
  3958                           
  3959 ;; *************** function _interrupt_INTx_clear_flag *****************
  3960 ;; Defined at:
  3961 ;;		line 233 in file "MCAL/INTERRUPT/mcal_external_interrupt.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;  _interrupt      1    3[COMRAM] PTR struct .
  3964 ;;		 -> MY_INT0(6), 
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;  ret             1    6[COMRAM] unsigned char 
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  1    wreg      unsigned char 
  3969 ;; Registers used:
  3970 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3976 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;Total ram usage:        4 bytes
  3981 ;; Hardware stack levels used: 1
  3982 ;; Hardware stack levels required when called: 3
  3983 ;; This function calls:
  3984 ;;		Nothing
  3985 ;; This function is called by:
  3986 ;;		_interrupt_INTx_init
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           	psect	text26
  3991   001EE0                     __ptext26:
  3992                           	callstack 0
  3993   001EE0                     _interrupt_INTx_clear_flag:
  3994                           	callstack 25
  3995   001EE0                     
  3996                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 236:     if(((void*)0)==_interrupt){
  3997   001EE0  5039               	movf	interrupt_INTx_clear_flag@_interrupt^0,w,c
  3998   001EE2  A4D8               	btfss	status,2,c
  3999   001EE4  EF76  F00F         	goto	u2081
  4000   001EE8  EF78  F00F         	goto	u2080
  4001   001EEC                     u2081:
  4002   001EEC  EF87  F00F         	goto	l3119
  4003   001EF0                     u2080:
  4004   001EF0                     l3107:
  4005                           
  4006                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 237:         ret=(Std_ReturnType)0x00;
  4007   001EF0  0E00               	movlw	0
  4008   001EF2  6E3C               	movwf	interrupt_INTx_clear_flag@ret^0,c
  4009                           
  4010                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 238:     }
  4011   001EF4  EFA5  F00F         	goto	l3121
  4012   001EF8                     l468:
  4013                           
  4014                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 242:                 (INTCONbits.INT0F=0);
  4015   001EF8  92F2               	bcf	242,1,c	;volatile
  4016   001EFA                     l3109:
  4017                           
  4018                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 243:                 ret=(Std_ReturnType)0x01
      +                          ;
  4019   001EFA  0E01               	movlw	1
  4020   001EFC  6E3C               	movwf	interrupt_INTx_clear_flag@ret^0,c
  4021                           
  4022                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 244:                 break;
  4023   001EFE  EFA5  F00F         	goto	l3121
  4024   001F02                     l470:
  4025                           
  4026                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 246:                 (INTCONbits.INT0F=0);
  4027   001F02  92F2               	bcf	242,1,c	;volatile
  4028   001F04  EF7D  F00F         	goto	l3109
  4029   001F08                     l471:
  4030                           
  4031                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 250:                 (INTCONbits.INT0F=0);
  4032   001F08  92F2               	bcf	242,1,c	;volatile
  4033   001F0A  EF7D  F00F         	goto	l3109
  4034   001F0E                     l3119:
  4035   001F0E  5039               	movf	interrupt_INTx_clear_flag@_interrupt^0,w,c
  4036   001F10  6ED9               	movwf	fsr2l,c
  4037   001F12  6ADA               	clrf	fsr2h,c
  4038   001F14  0E04               	movlw	4
  4039   001F16  26D9               	addwf	fsr2l,f,c
  4040   001F18  50DF               	movf	indf2,w,c
  4041   001F1A  6E3A               	movwf	??_interrupt_INTx_clear_flag^0,c
  4042   001F1C  6A3B               	clrf	(??_interrupt_INTx_clear_flag+1)^0,c
  4043                           
  4044                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4045                           ; Switch size 1, requested type "simple"
  4046                           ; Number of cases is 1, Range of values is 0 to 0
  4047                           ; switch strategies available:
  4048                           ; Name         Instructions Cycles
  4049                           ; simple_byte            4     3 (average)
  4050                           ;	Chosen strategy is simple_byte
  4051   001F1E  503B               	movf	(??_interrupt_INTx_clear_flag+1)^0,w,c
  4052   001F20  0A00               	xorlw	0	; case 0
  4053   001F22  B4D8               	btfsc	status,2,c
  4054   001F24  EF96  F00F         	goto	l4465
  4055   001F28  EF78  F00F         	goto	l3107
  4056   001F2C                     l4465:
  4057                           
  4058                           ; Switch size 1, requested type "simple"
  4059                           ; Number of cases is 3, Range of values is 0 to 2
  4060                           ; switch strategies available:
  4061                           ; Name         Instructions Cycles
  4062                           ; simple_byte           10     6 (average)
  4063                           ;	Chosen strategy is simple_byte
  4064   001F2C  503A               	movf	??_interrupt_INTx_clear_flag^0,w,c
  4065   001F2E  0A00               	xorlw	0	; case 0
  4066   001F30  B4D8               	btfsc	status,2,c
  4067   001F32  EF7C  F00F         	goto	l468
  4068   001F36  0A01               	xorlw	1	; case 1
  4069   001F38  B4D8               	btfsc	status,2,c
  4070   001F3A  EF81  F00F         	goto	l470
  4071   001F3E  0A03               	xorlw	3	; case 2
  4072   001F40  B4D8               	btfsc	status,2,c
  4073   001F42  EF84  F00F         	goto	l471
  4074   001F46  EF78  F00F         	goto	l3107
  4075   001F4A                     l3121:
  4076                           
  4077                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 259:     return ret;
  4078   001F4A  503C               	movf	interrupt_INTx_clear_flag@ret^0,w,c
  4079   001F4C  0012               	return		;funcret
  4080   001F4E                     __end_of_interrupt_INTx_clear_flag:
  4081                           	callstack 0
  4082                           
  4083 ;; *************** function _INTx_select_InterruptHandler *****************
  4084 ;; Defined at:
  4085 ;;		line 361 in file "MCAL/INTERRUPT/mcal_external_interrupt.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;  _interrupt      1    6[COMRAM] PTR struct .
  4088 ;;		 -> MY_INT0(6), 
  4089 ;; Auto vars:     Size  Location     Type
  4090 ;;  ret             1    9[COMRAM] unsigned char 
  4091 ;; Return value:  Size  Location     Type
  4092 ;;                  1    wreg      unsigned char 
  4093 ;; Registers used:
  4094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4095 ;; Tracked objects:
  4096 ;;		On entry : 0/0
  4097 ;;		On exit  : 0/0
  4098 ;;		Unchanged: 0/0
  4099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4100 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4101 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4102 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4103 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4104 ;;Total ram usage:        4 bytes
  4105 ;; Hardware stack levels used: 1
  4106 ;; Hardware stack levels required when called: 4
  4107 ;; This function calls:
  4108 ;;		_INT0_set_InterruptHandler
  4109 ;;		_INT1_set_InterruptHandler
  4110 ;;		_INT2_set_InterruptHandler
  4111 ;; This function is called by:
  4112 ;;		_interrupt_INTx_init
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           	psect	text27
  4117   001A46                     __ptext27:
  4118                           	callstack 0
  4119   001A46                     _INTx_select_InterruptHandler:
  4120                           	callstack 24
  4121   001A46                     
  4122                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 364:     if(((void*)0)==_interrupt){
  4123   001A46  503C               	movf	INTx_select_InterruptHandler@_interrupt^0,w,c
  4124   001A48  A4D8               	btfss	status,2,c
  4125   001A4A  EF29  F00D         	goto	u2171
  4126   001A4E  EF2B  F00D         	goto	u2170
  4127   001A52                     u2171:
  4128   001A52  EF53  F00D         	goto	l3201
  4129   001A56                     u2170:
  4130   001A56                     l3189:
  4131                           
  4132                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 365:         ret=(Std_ReturnType)0x00;
  4133   001A56  0E00               	movlw	0
  4134   001A58  6E3F               	movwf	INTx_select_InterruptHandler@ret^0,c
  4135                           
  4136                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 366:     }
  4137   001A5A  EF71  F00D         	goto	l3203
  4138   001A5E                     l3191:
  4139                           
  4140                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 370:                 ret=INT0_set_InterruptHa
      +                          ndler(_interrupt->EXT_InterruptHandler);
  4141   001A5E  503C               	movf	INTx_select_InterruptHandler@_interrupt^0,w,c
  4142   001A60  6ED9               	movwf	fsr2l,c
  4143   001A62  6ADA               	clrf	fsr2h,c
  4144   001A64  CFDE F039          	movff	postinc2,INT0_set_InterruptHandler@InterruptHandler
  4145   001A68  CFDD F03A          	movff	postdec2,INT0_set_InterruptHandler@InterruptHandler+1
  4146   001A6C  EC5A  F013         	call	_INT0_set_InterruptHandler	;wreg free
  4147   001A70  6E3F               	movwf	INTx_select_InterruptHandler@ret^0,c
  4148                           
  4149                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 371:                 break;
  4150   001A72  EF71  F00D         	goto	l3203
  4151   001A76                     l3193:
  4152                           
  4153                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 373:                 ret=INT1_set_InterruptHa
      +                          ndler(_interrupt->EXT_InterruptHandler);
  4154   001A76  503C               	movf	INTx_select_InterruptHandler@_interrupt^0,w,c
  4155   001A78  6ED9               	movwf	fsr2l,c
  4156   001A7A  6ADA               	clrf	fsr2h,c
  4157   001A7C  CFDE F039          	movff	postinc2,INT1_set_InterruptHandler@InterruptHandler
  4158   001A80  CFDD F03A          	movff	postdec2,INT1_set_InterruptHandler@InterruptHandler+1
  4159   001A84  EC45  F013         	call	_INT1_set_InterruptHandler	;wreg free
  4160   001A88  6E3F               	movwf	INTx_select_InterruptHandler@ret^0,c
  4161                           
  4162                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 374:                 break;
  4163   001A8A  EF71  F00D         	goto	l3203
  4164   001A8E                     l3195:
  4165                           
  4166                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 376:                 ret=INT2_set_InterruptHa
      +                          ndler(_interrupt->EXT_InterruptHandler);
  4167   001A8E  503C               	movf	INTx_select_InterruptHandler@_interrupt^0,w,c
  4168   001A90  6ED9               	movwf	fsr2l,c
  4169   001A92  6ADA               	clrf	fsr2h,c
  4170   001A94  CFDE F039          	movff	postinc2,INT2_set_InterruptHandler@InterruptHandler
  4171   001A98  CFDD F03A          	movff	postdec2,INT2_set_InterruptHandler@InterruptHandler+1
  4172   001A9C  EC30  F013         	call	_INT2_set_InterruptHandler	;wreg free
  4173   001AA0  6E3F               	movwf	INTx_select_InterruptHandler@ret^0,c
  4174                           
  4175                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 377:                 break;
  4176   001AA2  EF71  F00D         	goto	l3203
  4177   001AA6                     l3201:
  4178   001AA6  503C               	movf	INTx_select_InterruptHandler@_interrupt^0,w,c
  4179   001AA8  6ED9               	movwf	fsr2l,c
  4180   001AAA  6ADA               	clrf	fsr2h,c
  4181   001AAC  0E04               	movlw	4
  4182   001AAE  26D9               	addwf	fsr2l,f,c
  4183   001AB0  50DF               	movf	indf2,w,c
  4184   001AB2  6E3D               	movwf	??_INTx_select_InterruptHandler^0,c
  4185   001AB4  6A3E               	clrf	(??_INTx_select_InterruptHandler+1)^0,c
  4186                           
  4187                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4188                           ; Switch size 1, requested type "simple"
  4189                           ; Number of cases is 1, Range of values is 0 to 0
  4190                           ; switch strategies available:
  4191                           ; Name         Instructions Cycles
  4192                           ; simple_byte            4     3 (average)
  4193                           ;	Chosen strategy is simple_byte
  4194   001AB6  503E               	movf	(??_INTx_select_InterruptHandler+1)^0,w,c
  4195   001AB8  0A00               	xorlw	0	; case 0
  4196   001ABA  B4D8               	btfsc	status,2,c
  4197   001ABC  EF62  F00D         	goto	l4467
  4198   001AC0  EF2B  F00D         	goto	l3189
  4199   001AC4                     l4467:
  4200                           
  4201                           ; Switch size 1, requested type "simple"
  4202                           ; Number of cases is 3, Range of values is 0 to 2
  4203                           ; switch strategies available:
  4204                           ; Name         Instructions Cycles
  4205                           ; simple_byte           10     6 (average)
  4206                           ;	Chosen strategy is simple_byte
  4207   001AC4  503D               	movf	??_INTx_select_InterruptHandler^0,w,c
  4208   001AC6  0A00               	xorlw	0	; case 0
  4209   001AC8  B4D8               	btfsc	status,2,c
  4210   001ACA  EF2F  F00D         	goto	l3191
  4211   001ACE  0A01               	xorlw	1	; case 1
  4212   001AD0  B4D8               	btfsc	status,2,c
  4213   001AD2  EF3B  F00D         	goto	l3193
  4214   001AD6  0A03               	xorlw	3	; case 2
  4215   001AD8  B4D8               	btfsc	status,2,c
  4216   001ADA  EF47  F00D         	goto	l3195
  4217   001ADE  EF2B  F00D         	goto	l3189
  4218   001AE2                     l3203:
  4219                           
  4220                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 384:     return ret;
  4221   001AE2  503F               	movf	INTx_select_InterruptHandler@ret^0,w,c
  4222   001AE4  0012               	return		;funcret
  4223   001AE6                     __end_of_INTx_select_InterruptHandler:
  4224                           	callstack 0
  4225                           
  4226 ;; *************** function _INT2_set_InterruptHandler *****************
  4227 ;; Defined at:
  4228 ;;		line 433 in file "MCAL/INTERRUPT/mcal_external_interrupt.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;  InterruptHan    2    3[COMRAM] PTR FTN()void 
  4231 ;;		 -> APP_INT_ISR(1), 
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;  ret             1    5[COMRAM] unsigned char 
  4234 ;; Return value:  Size  Location     Type
  4235 ;;                  1    wreg      unsigned char 
  4236 ;; Registers used:
  4237 ;;		wreg, status,2, status,0
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4243 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;Total ram usage:        3 bytes
  4248 ;; Hardware stack levels used: 1
  4249 ;; Hardware stack levels required when called: 3
  4250 ;; This function calls:
  4251 ;;		Nothing
  4252 ;; This function is called by:
  4253 ;;		_INTx_select_InterruptHandler
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           	psect	text28
  4258   002660                     __ptext28:
  4259                           	callstack 0
  4260   002660                     _INT2_set_InterruptHandler:
  4261                           	callstack 24
  4262   002660                     
  4263                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 436:     if(((void*)0)==InterruptHandler){
  4264   002660  5039               	movf	INT2_set_InterruptHandler@InterruptHandler^0,w,c
  4265   002662  103A               	iorwf	(INT2_set_InterruptHandler@InterruptHandler+1)^0,w,c
  4266   002664  A4D8               	btfss	status,2,c
  4267   002666  EF37  F013         	goto	u1871
  4268   00266A  EF39  F013         	goto	u1870
  4269   00266E                     u1871:
  4270   00266E  EF3D  F013         	goto	l2913
  4271   002672                     u1870:
  4272   002672                     
  4273                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 437:         ret=(Std_ReturnType)0x00;
  4274   002672  0E00               	movlw	0
  4275   002674  6E3B               	movwf	INT2_set_InterruptHandler@ret^0,c
  4276                           
  4277                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 438:     }
  4278   002676  EF43  F013         	goto	l2917
  4279   00267A                     l2913:
  4280                           
  4281                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 440:         INT2_InterruptHandler=InterruptH
      +                          andler;
  4282   00267A  C039  F071         	movff	INT2_set_InterruptHandler@InterruptHandler,_INT2_InterruptHandler
  4283   00267E  C03A  F072         	movff	INT2_set_InterruptHandler@InterruptHandler+1,_INT2_InterruptHandler+1
  4284   002682                     
  4285                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 441:         ret=(Std_ReturnType)0x01;
  4286   002682  0E01               	movlw	1
  4287   002684  6E3B               	movwf	INT2_set_InterruptHandler@ret^0,c
  4288   002686                     l2917:
  4289                           
  4290                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 444:     return ret;
  4291   002686  503B               	movf	INT2_set_InterruptHandler@ret^0,w,c
  4292   002688  0012               	return		;funcret
  4293   00268A                     __end_of_INT2_set_InterruptHandler:
  4294                           	callstack 0
  4295                           
  4296 ;; *************** function _INT1_set_InterruptHandler *****************
  4297 ;; Defined at:
  4298 ;;		line 413 in file "MCAL/INTERRUPT/mcal_external_interrupt.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;  InterruptHan    2    3[COMRAM] PTR FTN()void 
  4301 ;;		 -> APP_INT_ISR(1), 
  4302 ;; Auto vars:     Size  Location     Type
  4303 ;;  ret             1    5[COMRAM] unsigned char 
  4304 ;; Return value:  Size  Location     Type
  4305 ;;                  1    wreg      unsigned char 
  4306 ;; Registers used:
  4307 ;;		wreg, status,2, status,0
  4308 ;; Tracked objects:
  4309 ;;		On entry : 0/0
  4310 ;;		On exit  : 0/0
  4311 ;;		Unchanged: 0/0
  4312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4313 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;Total ram usage:        3 bytes
  4318 ;; Hardware stack levels used: 1
  4319 ;; Hardware stack levels required when called: 3
  4320 ;; This function calls:
  4321 ;;		Nothing
  4322 ;; This function is called by:
  4323 ;;		_INTx_select_InterruptHandler
  4324 ;; This function uses a non-reentrant model
  4325 ;;
  4326                           
  4327                           	psect	text29
  4328   00268A                     __ptext29:
  4329                           	callstack 0
  4330   00268A                     _INT1_set_InterruptHandler:
  4331                           	callstack 24
  4332   00268A                     
  4333                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 416:     if(((void*)0)==InterruptHandler){
  4334   00268A  5039               	movf	INT1_set_InterruptHandler@InterruptHandler^0,w,c
  4335   00268C  103A               	iorwf	(INT1_set_InterruptHandler@InterruptHandler+1)^0,w,c
  4336   00268E  A4D8               	btfss	status,2,c
  4337   002690  EF4C  F013         	goto	u1861
  4338   002694  EF4E  F013         	goto	u1860
  4339   002698                     u1861:
  4340   002698  EF52  F013         	goto	l2899
  4341   00269C                     u1860:
  4342   00269C                     
  4343                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 417:         ret=(Std_ReturnType)0x00;
  4344   00269C  0E00               	movlw	0
  4345   00269E  6E3B               	movwf	INT1_set_InterruptHandler@ret^0,c
  4346                           
  4347                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 418:     }
  4348   0026A0  EF58  F013         	goto	l2903
  4349   0026A4                     l2899:
  4350                           
  4351                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 420:         INT1_InterruptHandler=InterruptH
      +                          andler;
  4352   0026A4  C039  F073         	movff	INT1_set_InterruptHandler@InterruptHandler,_INT1_InterruptHandler
  4353   0026A8  C03A  F074         	movff	INT1_set_InterruptHandler@InterruptHandler+1,_INT1_InterruptHandler+1
  4354   0026AC                     
  4355                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 421:         ret=(Std_ReturnType)0x01;
  4356   0026AC  0E01               	movlw	1
  4357   0026AE  6E3B               	movwf	INT1_set_InterruptHandler@ret^0,c
  4358   0026B0                     l2903:
  4359                           
  4360                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 424:     return ret;
  4361   0026B0  503B               	movf	INT1_set_InterruptHandler@ret^0,w,c
  4362   0026B2  0012               	return		;funcret
  4363   0026B4                     __end_of_INT1_set_InterruptHandler:
  4364                           	callstack 0
  4365                           
  4366 ;; *************** function _INT0_set_InterruptHandler *****************
  4367 ;; Defined at:
  4368 ;;		line 393 in file "MCAL/INTERRUPT/mcal_external_interrupt.c"
  4369 ;; Parameters:    Size  Location     Type
  4370 ;;  InterruptHan    2    3[COMRAM] PTR FTN()void 
  4371 ;;		 -> APP_INT_ISR(1), 
  4372 ;; Auto vars:     Size  Location     Type
  4373 ;;  ret             1    5[COMRAM] unsigned char 
  4374 ;; Return value:  Size  Location     Type
  4375 ;;                  1    wreg      unsigned char 
  4376 ;; Registers used:
  4377 ;;		wreg, status,2, status,0
  4378 ;; Tracked objects:
  4379 ;;		On entry : 0/0
  4380 ;;		On exit  : 0/0
  4381 ;;		Unchanged: 0/0
  4382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4383 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4384 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4387 ;;Total ram usage:        3 bytes
  4388 ;; Hardware stack levels used: 1
  4389 ;; Hardware stack levels required when called: 3
  4390 ;; This function calls:
  4391 ;;		Nothing
  4392 ;; This function is called by:
  4393 ;;		_INTx_select_InterruptHandler
  4394 ;; This function uses a non-reentrant model
  4395 ;;
  4396                           
  4397                           	psect	text30
  4398   0026B4                     __ptext30:
  4399                           	callstack 0
  4400   0026B4                     _INT0_set_InterruptHandler:
  4401                           	callstack 24
  4402   0026B4                     
  4403                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 396:     if(((void*)0)==InterruptHandler){
  4404   0026B4  5039               	movf	INT0_set_InterruptHandler@InterruptHandler^0,w,c
  4405   0026B6  103A               	iorwf	(INT0_set_InterruptHandler@InterruptHandler+1)^0,w,c
  4406   0026B8  A4D8               	btfss	status,2,c
  4407   0026BA  EF61  F013         	goto	u1851
  4408   0026BE  EF63  F013         	goto	u1850
  4409   0026C2                     u1851:
  4410   0026C2  EF67  F013         	goto	l2885
  4411   0026C6                     u1850:
  4412   0026C6                     
  4413                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 397:         ret=(Std_ReturnType)0x00;
  4414   0026C6  0E00               	movlw	0
  4415   0026C8  6E3B               	movwf	INT0_set_InterruptHandler@ret^0,c
  4416                           
  4417                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 398:     }
  4418   0026CA  EF6D  F013         	goto	l2889
  4419   0026CE                     l2885:
  4420                           
  4421                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 400:         INT0_InterruptHandler=InterruptH
      +                          andler;
  4422   0026CE  C039  F075         	movff	INT0_set_InterruptHandler@InterruptHandler,_INT0_InterruptHandler
  4423   0026D2  C03A  F076         	movff	INT0_set_InterruptHandler@InterruptHandler+1,_INT0_InterruptHandler+1
  4424   0026D6                     
  4425                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 401:         ret=(Std_ReturnType)0x01;
  4426   0026D6  0E01               	movlw	1
  4427   0026D8  6E3B               	movwf	INT0_set_InterruptHandler@ret^0,c
  4428   0026DA                     l2889:
  4429                           
  4430                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 404:     return ret;
  4431   0026DA  503B               	movf	INT0_set_InterruptHandler@ret^0,w,c
  4432   0026DC  0012               	return		;funcret
  4433   0026DE                     __end_of_INT0_set_InterruptHandler:
  4434                           	callstack 0
  4435                           
  4436 ;; *************** function _ecual_init *****************
  4437 ;; Defined at:
  4438 ;;		line 40 in file "ECUAL/ecual_init.c"
  4439 ;; Parameters:    Size  Location     Type
  4440 ;;		None
  4441 ;; Auto vars:     Size  Location     Type
  4442 ;;  ret             1    0        unsigned char 
  4443 ;; Return value:  Size  Location     Type
  4444 ;;                  1    wreg      void 
  4445 ;; Registers used:
  4446 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4447 ;; Tracked objects:
  4448 ;;		On entry : 0/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;Total ram usage:        0 bytes
  4457 ;; Hardware stack levels used: 1
  4458 ;; Hardware stack levels required when called: 7
  4459 ;; This function calls:
  4460 ;;		_lcd_init
  4461 ;;		_led_init
  4462 ;;		_seven_segment_init
  4463 ;; This function is called by:
  4464 ;;		_app_init
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           	psect	text31
  4469   00242A                     __ptext31:
  4470                           	callstack 0
  4471   00242A                     _ecual_init:
  4472                           	callstack 22
  4473   00242A  0E34               	movlw	low _car_led_red
  4474   00242C  6E45               	movwf	led_init@led^0,c
  4475   00242E  ECC7  F011         	call	_led_init	;wreg free
  4476   002432  0E32               	movlw	low _car_led_yellow
  4477   002434  6E45               	movwf	led_init@led^0,c
  4478   002436  ECC7  F011         	call	_led_init	;wreg free
  4479   00243A  0E30               	movlw	low _car_led_green
  4480   00243C  6E45               	movwf	led_init@led^0,c
  4481   00243E  ECC7  F011         	call	_led_init	;wreg free
  4482   002442  0E2E               	movlw	low _pedestrian_led_red
  4483   002444  6E45               	movwf	led_init@led^0,c
  4484   002446  ECC7  F011         	call	_led_init	;wreg free
  4485   00244A  0E2C               	movlw	low _pedestrian_led_yellow
  4486   00244C  6E45               	movwf	led_init@led^0,c
  4487   00244E  ECC7  F011         	call	_led_init	;wreg free
  4488   002452  0E2A               	movlw	low _pedestrian_led_green
  4489   002454  6E45               	movwf	led_init@led^0,c
  4490   002456  ECC7  F011         	call	_led_init	;wreg free
  4491   00245A  0E20               	movlw	low _seg_green
  4492   00245C  6E45               	movwf	seven_segment_init@seg^0,c
  4493   00245E  EC80  F012         	call	_seven_segment_init	;wreg free
  4494   002462  0E25               	movlw	low _seg_red
  4495   002464  6E45               	movwf	seven_segment_init@seg^0,c
  4496   002466  EC80  F012         	call	_seven_segment_init	;wreg free
  4497   00246A  0E1A               	movlw	low _lcd
  4498   00246C  6E4C               	movwf	lcd_init@lcd^0,c
  4499   00246E  ECAB  F00C         	call	_lcd_init	;wreg free
  4500   002472  0012               	return		;funcret
  4501   002474                     __end_of_ecual_init:
  4502                           	callstack 0
  4503                           
  4504 ;; *************** function _seven_segment_init *****************
  4505 ;; Defined at:
  4506 ;;		line 16 in file "ECUAL/7_SEGMENT/seven_segment.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;  seg             1   15[COMRAM] PTR struct .
  4509 ;;		 -> seg_green(5), seg_red(5), 
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;  ret             1   17[COMRAM] unsigned char 
  4512 ;;  gpio_ret        1   16[COMRAM] unsigned char 
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  1    wreg      unsigned char 
  4515 ;; Registers used:
  4516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4522 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4523 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;Total ram usage:        3 bytes
  4527 ;; Hardware stack levels used: 1
  4528 ;; Hardware stack levels required when called: 5
  4529 ;; This function calls:
  4530 ;;		_gpio_pin_output_low_init
  4531 ;; This function is called by:
  4532 ;;		_ecual_init
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           	psect	text32
  4537   002500                     __ptext32:
  4538                           	callstack 0
  4539   002500                     _seven_segment_init:
  4540                           	callstack 23
  4541   002500                     
  4542                           ;ECUAL/7_SEGMENT/seven_segment.c: 20:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  4543   002500  0E00               	movlw	0
  4544   002502  6E46               	movwf	seven_segment_init@gpio_ret^0,c
  4545                           
  4546                           ;ECUAL/7_SEGMENT/seven_segment.c: 21:     if(((void*)0)==seg){
  4547   002504  5045               	movf	seven_segment_init@seg^0,w,c
  4548   002506  A4D8               	btfss	status,2,c
  4549   002508  EF88  F012         	goto	u2631
  4550   00250C  EF8A  F012         	goto	u2630
  4551   002510                     u2631:
  4552   002510  EF8E  F012         	goto	l3897
  4553   002514                     u2630:
  4554   002514                     
  4555                           ;ECUAL/7_SEGMENT/seven_segment.c: 22:         ret=(Std_ReturnType)0x00;
  4556   002514  0E00               	movlw	0
  4557   002516  6E47               	movwf	seven_segment_init@ret^0,c
  4558                           
  4559                           ;ECUAL/7_SEGMENT/seven_segment.c: 23:     }
  4560   002518  EFA0  F012         	goto	l10
  4561   00251C                     l3897:
  4562                           
  4563                           ;ECUAL/7_SEGMENT/seven_segment.c: 25:         for(counter=0;counter<8;counter++){
  4564   00251C  0E00               	movlw	0
  4565   00251E  6E7A               	movwf	seven_segment_init@counter^0,c
  4566   002520                     l3903:
  4567   002520  5045               	movf	seven_segment_init@seg^0,w,c
  4568   002522  247A               	addwf	seven_segment_init@counter^0,w,c
  4569   002524  6E41               	movwf	gpio_pin_output_low_init@pin^0,c
  4570   002526  EC72  F010         	call	_gpio_pin_output_low_init	;wreg free
  4571   00252A                     
  4572                           ;ECUAL/7_SEGMENT/seven_segment.c: 27:         }
  4573   00252A  2A7A               	incf	seven_segment_init@counter^0,f,c
  4574   00252C  0E07               	movlw	7
  4575   00252E  647A               	cpfsgt	seven_segment_init@counter^0,c
  4576   002530  EF9C  F012         	goto	u2641
  4577   002534  EF9E  F012         	goto	u2640
  4578   002538                     u2641:
  4579   002538  EF90  F012         	goto	l3903
  4580   00253C                     u2640:
  4581   00253C                     
  4582                           ;ECUAL/7_SEGMENT/seven_segment.c: 30:         ret=(Std_ReturnType)0x01;
  4583   00253C  0E01               	movlw	1
  4584   00253E  6E47               	movwf	seven_segment_init@ret^0,c
  4585   002540                     l10:
  4586                           
  4587                           ;ECUAL/7_SEGMENT/seven_segment.c: 33:     return ret;
  4588   002540  5047               	movf	seven_segment_init@ret^0,w,c
  4589   002542  0012               	return		;funcret
  4590   002544                     __end_of_seven_segment_init:
  4591                           	callstack 0
  4592                           
  4593 ;; *************** function _led_init *****************
  4594 ;; Defined at:
  4595 ;;		line 17 in file "ECUAL/LED/led.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;  led             1   15[COMRAM] PTR struct .
  4598 ;;		 -> pedestrian_led_green(2), pedestrian_led_yellow(2), pedestrian_led_red(2), car_led_green(2), 
  4599 ;;		 -> car_led_yellow(2), car_led_red(2), 
  4600 ;; Auto vars:     Size  Location     Type
  4601 ;;  ret             1   17[COMRAM] unsigned char 
  4602 ;;  gpio_ret        1   16[COMRAM] unsigned char 
  4603 ;; Return value:  Size  Location     Type
  4604 ;;                  1    wreg      unsigned char 
  4605 ;; Registers used:
  4606 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4607 ;; Tracked objects:
  4608 ;;		On entry : 0/0
  4609 ;;		On exit  : 0/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4612 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4613 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4615 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4616 ;;Total ram usage:        3 bytes
  4617 ;; Hardware stack levels used: 1
  4618 ;; Hardware stack levels required when called: 5
  4619 ;; This function calls:
  4620 ;;		_gpio_pin_output_low_init
  4621 ;; This function is called by:
  4622 ;;		_ecual_init
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           	psect	text33
  4627   00238E                     __ptext33:
  4628                           	callstack 0
  4629   00238E                     _led_init:
  4630                           	callstack 23
  4631   00238E                     
  4632                           ;ECUAL/LED/led.c: 20:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  4633   00238E  0E00               	movlw	0
  4634   002390  6E46               	movwf	led_init@gpio_ret^0,c
  4635                           
  4636                           ;ECUAL/LED/led.c: 21:     if(((void*)0)==led){
  4637   002392  5045               	movf	led_init@led^0,w,c
  4638   002394  A4D8               	btfss	status,2,c
  4639   002396  EFCF  F011         	goto	u2791
  4640   00239A  EFD1  F011         	goto	u2790
  4641   00239E                     u2791:
  4642   00239E  EFD5  F011         	goto	l4031
  4643   0023A2                     u2790:
  4644   0023A2                     
  4645                           ;ECUAL/LED/led.c: 22:         ret=(Std_ReturnType)0x00;
  4646   0023A2  0E00               	movlw	0
  4647   0023A4  6E47               	movwf	led_init@ret^0,c
  4648                           
  4649                           ;ECUAL/LED/led.c: 23:     }
  4650   0023A6  EFED  F011         	goto	l4037
  4651   0023AA                     l4031:
  4652   0023AA  C045  F041         	movff	led_init@led,gpio_pin_output_low_init@pin
  4653   0023AE  EC72  F010         	call	_gpio_pin_output_low_init	;wreg free
  4654   0023B2                     
  4655                           ;ECUAL/LED/led.c: 26:         led->led_state=led->led_pin.logic;
  4656   0023B2  5045               	movf	led_init@led^0,w,c
  4657   0023B4  6ED9               	movwf	fsr2l,c
  4658   0023B6  6ADA               	clrf	fsr2h,c
  4659   0023B8  0E01               	movlw	1
  4660   0023BA  26D9               	addwf	fsr2l,f,c
  4661   0023BC  5045               	movf	led_init@led^0,w,c
  4662   0023BE  6EE1               	movwf	fsr1l,c
  4663   0023C0  6AE2               	clrf	fsr1h,c
  4664   0023C2  BEE7               	btfsc	indf1,7,c
  4665   0023C4  EFE6  F011         	goto	u2801
  4666   0023C8  EFE9  F011         	goto	u2800
  4667   0023CC                     u2801:
  4668   0023CC  0E01               	movlw	1
  4669   0023CE  EFEA  F011         	goto	u2806
  4670   0023D2                     u2800:
  4671   0023D2  0E00               	movlw	0
  4672   0023D4                     u2806:
  4673   0023D4  6EDF               	movwf	indf2,c
  4674   0023D6                     
  4675                           ;ECUAL/LED/led.c: 27:         ret=(Std_ReturnType)0x01;
  4676   0023D6  0E01               	movlw	1
  4677   0023D8  6E47               	movwf	led_init@ret^0,c
  4678   0023DA                     l4037:
  4679                           
  4680                           ;ECUAL/LED/led.c: 30:     return ret;
  4681   0023DA  5047               	movf	led_init@ret^0,w,c
  4682   0023DC  0012               	return		;funcret
  4683   0023DE                     __end_of_led_init:
  4684                           	callstack 0
  4685                           
  4686 ;; *************** function _lcd_init *****************
  4687 ;; Defined at:
  4688 ;;		line 24 in file "ECUAL/LCD/lcd.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  lcd             1   22[COMRAM] PTR struct .
  4691 ;;		 -> lcd(6), 
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;  lcd_ret         1   27[COMRAM] unsigned char 
  4694 ;;  pins_counter    1   26[COMRAM] unsigned char 
  4695 ;;  ret             1   25[COMRAM] unsigned char 
  4696 ;;  gpio_ret        1   24[COMRAM] unsigned char 
  4697 ;; Return value:  Size  Location     Type
  4698 ;;                  1    wreg      unsigned char 
  4699 ;; Registers used:
  4700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4701 ;; Tracked objects:
  4702 ;;		On entry : 0/0
  4703 ;;		On exit  : 0/0
  4704 ;;		Unchanged: 0/0
  4705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4706 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4707 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4708 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4709 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4710 ;;Total ram usage:        6 bytes
  4711 ;; Hardware stack levels used: 1
  4712 ;; Hardware stack levels required when called: 6
  4713 ;; This function calls:
  4714 ;;		_gpio_pin_output_low_init
  4715 ;;		_lcd_send_command
  4716 ;; This function is called by:
  4717 ;;		_ecual_init
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           	psect	text34
  4722   001956                     __ptext34:
  4723                           	callstack 0
  4724   001956                     _lcd_init:
  4725                           	callstack 22
  4726   001956                     
  4727                           ;ECUAL/LCD/lcd.c: 27:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  4728   001956  0E00               	movlw	0
  4729   001958  6E4E               	movwf	lcd_init@gpio_ret^0,c
  4730                           
  4731                           ;ECUAL/LCD/lcd.c: 28:     Std_ReturnType lcd_ret=(Std_ReturnType)0x00;
  4732   00195A  0E00               	movlw	0
  4733   00195C  6E51               	movwf	lcd_init@lcd_ret^0,c
  4734                           
  4735                           ;ECUAL/LCD/lcd.c: 29:     uint8 pins_counter;;ECUAL/LCD/lcd.c: 30:     if(((void*)0)==lc
      +                          d){
  4736   00195E  504C               	movf	lcd_init@lcd^0,w,c
  4737   001960  A4D8               	btfss	status,2,c
  4738   001962  EFB5  F00C         	goto	u2691
  4739   001966  EFB7  F00C         	goto	u2690
  4740   00196A                     u2691:
  4741   00196A  EFBB  F00C         	goto	l3939
  4742   00196E                     u2690:
  4743   00196E                     
  4744                           ;ECUAL/LCD/lcd.c: 31:         ret=(Std_ReturnType)0x00;
  4745   00196E  0E00               	movlw	0
  4746   001970  6E4F               	movwf	lcd_init@ret^0,c
  4747                           
  4748                           ;ECUAL/LCD/lcd.c: 32:     }
  4749   001972  EF21  F00D         	goto	l3973
  4750   001976                     l3939:
  4751                           
  4752                           ;ECUAL/LCD/lcd.c: 34:         gpio_ret=gpio_pin_output_low_init(&(lcd->lcd_en));
  4753   001976  284C               	incf	lcd_init@lcd^0,w,c
  4754   001978  6E41               	movwf	gpio_pin_output_low_init@pin^0,c
  4755   00197A  EC72  F010         	call	_gpio_pin_output_low_init	;wreg free
  4756   00197E  6E4E               	movwf	lcd_init@gpio_ret^0,c
  4757                           
  4758                           ;ECUAL/LCD/lcd.c: 35:         gpio_ret=gpio_pin_output_low_init(&(lcd->lcd_rs));
  4759   001980  C04C  F041         	movff	lcd_init@lcd,gpio_pin_output_low_init@pin
  4760   001984  EC72  F010         	call	_gpio_pin_output_low_init	;wreg free
  4761   001988  6E4E               	movwf	lcd_init@gpio_ret^0,c
  4762   00198A                     
  4763                           ;ECUAL/LCD/lcd.c: 36:         for(pins_counter=0;pins_counter<n;pins_counter++){
  4764   00198A  0E00               	movlw	0
  4765   00198C  6E50               	movwf	lcd_init@pins_counter^0,c
  4766   00198E  EFD0  F00C         	goto	l3947
  4767   001992                     l3943:
  4768   001992  504C               	movf	lcd_init@lcd^0,w,c
  4769   001994  2450               	addwf	lcd_init@pins_counter^0,w,c
  4770   001996  0F02               	addlw	2
  4771   001998  6E41               	movwf	gpio_pin_output_low_init@pin^0,c
  4772   00199A  EC72  F010         	call	_gpio_pin_output_low_init	;wreg free
  4773   00199E                     
  4774                           ;ECUAL/LCD/lcd.c: 38:         }
  4775   00199E  2A50               	incf	lcd_init@pins_counter^0,f,c
  4776   0019A0                     l3947:
  4777   0019A0  0E03               	movlw	3
  4778   0019A2  6450               	cpfsgt	lcd_init@pins_counter^0,c
  4779   0019A4  EFD6  F00C         	goto	u2701
  4780   0019A8  EFD8  F00C         	goto	u2700
  4781   0019AC                     u2701:
  4782   0019AC  EFC9  F00C         	goto	l3943
  4783   0019B0                     u2700:
  4784   0019B0                     
  4785                           ;ECUAL/LCD/lcd.c: 39:          _delay((unsigned long)((20)*(8000000/4000.0)));
  4786   0019B0  0E34               	movlw	52
  4787   0019B2  6E4D               	movwf	??_lcd_init^0,c
  4788   0019B4  0EF2               	movlw	242
  4789   0019B6                     u3027:
  4790   0019B6  2EE8               	decfsz	wreg,f,c
  4791   0019B8  D7FE               	bra	u3027
  4792   0019BA  2E4D               	decfsz	??_lcd_init^0,f,c
  4793   0019BC  D7FC               	bra	u3027
  4794   0019BE  C04C  F047         	movff	lcd_init@lcd,lcd_send_command@lcd
  4795   0019C2  0E38               	movlw	56
  4796   0019C4  6E48               	movwf	lcd_send_command@command^0,c
  4797   0019C6  EC0E  F010         	call	_lcd_send_command	;wreg free
  4798   0019CA                     
  4799                           ;ECUAL/LCD/lcd.c: 41:         _delay((unsigned long)((5)*(8000000/4000.0)));
  4800   0019CA  0E0D               	movlw	13
  4801   0019CC  6E4D               	movwf	??_lcd_init^0,c
  4802   0019CE  0EFC               	movlw	252
  4803   0019D0                     u3037:
  4804   0019D0  2EE8               	decfsz	wreg,f,c
  4805   0019D2  D7FE               	bra	u3037
  4806   0019D4  2E4D               	decfsz	??_lcd_init^0,f,c
  4807   0019D6  D7FC               	bra	u3037
  4808   0019D8  C04C  F047         	movff	lcd_init@lcd,lcd_send_command@lcd
  4809   0019DC  0E38               	movlw	56
  4810   0019DE  6E48               	movwf	lcd_send_command@command^0,c
  4811   0019E0  EC0E  F010         	call	_lcd_send_command	;wreg free
  4812   0019E4                     
  4813                           ;ECUAL/LCD/lcd.c: 43:         _delay((unsigned long)((150)*(8000000/4000000.0)));
  4814   0019E4  0E64               	movlw	100
  4815   0019E6                     u3047:
  4816   0019E6  2EE8               	decfsz	wreg,f,c
  4817   0019E8  D7FE               	bra	u3047
  4818   0019EA  C04C  F047         	movff	lcd_init@lcd,lcd_send_command@lcd
  4819   0019EE  0E38               	movlw	56
  4820   0019F0  6E48               	movwf	lcd_send_command@command^0,c
  4821   0019F2  EC0E  F010         	call	_lcd_send_command	;wreg free
  4822   0019F6  C04C  F047         	movff	lcd_init@lcd,lcd_send_command@lcd
  4823   0019FA  0E01               	movlw	1
  4824   0019FC  6E48               	movwf	lcd_send_command@command^0,c
  4825   0019FE  EC0E  F010         	call	_lcd_send_command	;wreg free
  4826   001A02  C04C  F047         	movff	lcd_init@lcd,lcd_send_command@lcd
  4827   001A06  0E02               	movlw	2
  4828   001A08  6E48               	movwf	lcd_send_command@command^0,c
  4829   001A0A  EC0E  F010         	call	_lcd_send_command	;wreg free
  4830   001A0E  C04C  F047         	movff	lcd_init@lcd,lcd_send_command@lcd
  4831   001A12  0E06               	movlw	6
  4832   001A14  6E48               	movwf	lcd_send_command@command^0,c
  4833   001A16  EC0E  F010         	call	_lcd_send_command	;wreg free
  4834   001A1A  C04C  F047         	movff	lcd_init@lcd,lcd_send_command@lcd
  4835   001A1E  0E0C               	movlw	12
  4836   001A20  6E48               	movwf	lcd_send_command@command^0,c
  4837   001A22  EC0E  F010         	call	_lcd_send_command	;wreg free
  4838   001A26  C04C  F047         	movff	lcd_init@lcd,lcd_send_command@lcd
  4839   001A2A  0E80               	movlw	128
  4840   001A2C  6E48               	movwf	lcd_send_command@command^0,c
  4841   001A2E  EC0E  F010         	call	_lcd_send_command	;wreg free
  4842   001A32  C04C  F047         	movff	lcd_init@lcd,lcd_send_command@lcd
  4843   001A36  0E28               	movlw	40
  4844   001A38  6E48               	movwf	lcd_send_command@command^0,c
  4845   001A3A  EC0E  F010         	call	_lcd_send_command	;wreg free
  4846   001A3E                     
  4847                           ;ECUAL/LCD/lcd.c: 57:         ret=(Std_ReturnType)0x01;
  4848   001A3E  0E01               	movlw	1
  4849   001A40  6E4F               	movwf	lcd_init@ret^0,c
  4850   001A42                     l3973:
  4851                           
  4852                           ;ECUAL/LCD/lcd.c: 60:     return ret;
  4853   001A42  504F               	movf	lcd_init@ret^0,w,c
  4854   001A44  0012               	return		;funcret
  4855   001A46                     __end_of_lcd_init:
  4856                           	callstack 0
  4857                           
  4858 ;; *************** function _lcd_send_command *****************
  4859 ;; Defined at:
  4860 ;;		line 72 in file "ECUAL/LCD/lcd.c"
  4861 ;; Parameters:    Size  Location     Type
  4862 ;;  lcd             1   17[COMRAM] PTR struct .
  4863 ;;		 -> lcd(6), 
  4864 ;;  command         1   18[COMRAM] unsigned char 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  ret             1   21[COMRAM] unsigned char 
  4867 ;;  lcd_ret         1   20[COMRAM] unsigned char 
  4868 ;;  gpio_ret        1   19[COMRAM] unsigned char 
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  1    wreg      unsigned char 
  4871 ;; Registers used:
  4872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4878 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4881 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;Total ram usage:        5 bytes
  4883 ;; Hardware stack levels used: 1
  4884 ;; Hardware stack levels required when called: 5
  4885 ;; This function calls:
  4886 ;;		_gpio_pin_logic_write
  4887 ;;		_lcd_send_enable
  4888 ;;		_lcd_send_nbits
  4889 ;; This function is called by:
  4890 ;;		_lcd_init
  4891 ;;		_lcd_send_custom_char
  4892 ;;		_lcd_set_curser
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           	psect	text35
  4897   00201C                     __ptext35:
  4898                           	callstack 0
  4899   00201C                     _lcd_send_command:
  4900                           	callstack 22
  4901   00201C                     
  4902                           ;ECUAL/LCD/lcd.c: 75:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  4903   00201C  0E00               	movlw	0
  4904   00201E  6E49               	movwf	lcd_send_command@gpio_ret^0,c
  4905                           
  4906                           ;ECUAL/LCD/lcd.c: 76:     Std_ReturnType lcd_ret=(Std_ReturnType)0x00;
  4907   002020  0E00               	movlw	0
  4908   002022  6E4A               	movwf	lcd_send_command@lcd_ret^0,c
  4909                           
  4910                           ;ECUAL/LCD/lcd.c: 77:     if(((void*)0)==lcd){
  4911   002024  5047               	movf	lcd_send_command@lcd^0,w,c
  4912   002026  A4D8               	btfss	status,2,c
  4913   002028  EF18  F010         	goto	u2531
  4914   00202C  EF1A  F010         	goto	u2530
  4915   002030                     u2531:
  4916   002030  EF1E  F010         	goto	l3803
  4917   002034                     u2530:
  4918   002034                     
  4919                           ;ECUAL/LCD/lcd.c: 78:         ret=(Std_ReturnType)0x00;
  4920   002034  0E00               	movlw	0
  4921   002036  6E4B               	movwf	lcd_send_command@ret^0,c
  4922                           
  4923                           ;ECUAL/LCD/lcd.c: 79:     }
  4924   002038  EF3F  F010         	goto	l3807
  4925   00203C                     l3803:
  4926   00203C  C047  F039         	movff	lcd_send_command@lcd,gpio_pin_logic_write@pin
  4927   002040  0E00               	movlw	0
  4928   002042  6E3A               	movwf	gpio_pin_logic_write@pin_logic^0,c
  4929   002044  EC52  F00A         	call	_gpio_pin_logic_write	;wreg free
  4930                           
  4931                           ;ECUAL/LCD/lcd.c: 83:         lcd_ret=lcd_send_nbits(lcd,command>>4);
  4932   002048  C047  F041         	movff	lcd_send_command@lcd,lcd_send_nbits@lcd
  4933   00204C  3848               	swapf	lcd_send_command@command^0,w,c
  4934   00204E  0B0F               	andlw	15
  4935   002050  6E42               	movwf	lcd_send_nbits@data_or_command^0,c
  4936   002052  ECEF  F011         	call	_lcd_send_nbits	;wreg free
  4937   002056  6E4A               	movwf	lcd_send_command@lcd_ret^0,c
  4938                           
  4939                           ;ECUAL/LCD/lcd.c: 84:         lcd_ret=lcd_send_enable(lcd);
  4940   002058  C047  F041         	movff	lcd_send_command@lcd,lcd_send_enable@lcd
  4941   00205C  EC83  F013         	call	_lcd_send_enable	;wreg free
  4942   002060  6E4A               	movwf	lcd_send_command@lcd_ret^0,c
  4943                           
  4944                           ;ECUAL/LCD/lcd.c: 85:         lcd_ret=lcd_send_nbits(lcd,command);
  4945   002062  C047  F041         	movff	lcd_send_command@lcd,lcd_send_nbits@lcd
  4946   002066  C048  F042         	movff	lcd_send_command@command,lcd_send_nbits@data_or_command
  4947   00206A  ECEF  F011         	call	_lcd_send_nbits	;wreg free
  4948   00206E  6E4A               	movwf	lcd_send_command@lcd_ret^0,c
  4949                           
  4950                           ;ECUAL/LCD/lcd.c: 86:         lcd_ret=lcd_send_enable(lcd);
  4951   002070  C047  F041         	movff	lcd_send_command@lcd,lcd_send_enable@lcd
  4952   002074  EC83  F013         	call	_lcd_send_enable	;wreg free
  4953   002078  6E4A               	movwf	lcd_send_command@lcd_ret^0,c
  4954   00207A                     
  4955                           ;ECUAL/LCD/lcd.c: 94:         ret=(Std_ReturnType)0x01;
  4956   00207A  0E01               	movlw	1
  4957   00207C  6E4B               	movwf	lcd_send_command@ret^0,c
  4958   00207E                     l3807:
  4959                           
  4960                           ;ECUAL/LCD/lcd.c: 97:     return ret;
  4961   00207E  504B               	movf	lcd_send_command@ret^0,w,c
  4962   002080  0012               	return		;funcret
  4963   002082                     __end_of_lcd_send_command:
  4964                           	callstack 0
  4965                           
  4966 ;; *************** function _lcd_send_nbits *****************
  4967 ;; Defined at:
  4968 ;;		line 328 in file "ECUAL/LCD/lcd.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;  lcd             1   11[COMRAM] PTR struct .
  4971 ;;		 -> lcd(6), 
  4972 ;;  data_or_comm    1   12[COMRAM] unsigned char 
  4973 ;; Auto vars:     Size  Location     Type
  4974 ;;  pin_counter     1   16[COMRAM] unsigned char 
  4975 ;;  ret             1   15[COMRAM] unsigned char 
  4976 ;;  gpio_ret        1    0        unsigned char 
  4977 ;; Return value:  Size  Location     Type
  4978 ;;                  1    wreg      unsigned char 
  4979 ;; Registers used:
  4980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4981 ;; Tracked objects:
  4982 ;;		On entry : 0/0
  4983 ;;		On exit  : 0/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4986 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4988 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4989 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4990 ;;Total ram usage:        6 bytes
  4991 ;; Hardware stack levels used: 1
  4992 ;; Hardware stack levels required when called: 4
  4993 ;; This function calls:
  4994 ;;		_gpio_pin_logic_write
  4995 ;; This function is called by:
  4996 ;;		_lcd_send_command
  4997 ;;		_lcd_send_char_data
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           	psect	text36
  5002   0023DE                     __ptext36:
  5003                           	callstack 0
  5004   0023DE                     _lcd_send_nbits:
  5005                           	callstack 22
  5006   0023DE                     
  5007                           ;ECUAL/LCD/lcd.c: 330:     uint8 pin_counter;;ECUAL/LCD/lcd.c: 331:     Std_ReturnType r
      +                          et=(Std_ReturnType)0x00;
  5008   0023DE  0E00               	movlw	0
  5009   0023E0  6E45               	movwf	lcd_send_nbits@ret^0,c
  5010                           
  5011                           ;ECUAL/LCD/lcd.c: 333:     for(pin_counter=0;pin_counter<n;pin_counter++){
  5012   0023E2  0E00               	movlw	0
  5013   0023E4  6E46               	movwf	lcd_send_nbits@pin_counter^0,c
  5014   0023E6  EF0B  F012         	goto	l3781
  5015   0023EA                     l3777:
  5016   0023EA  5041               	movf	lcd_send_nbits@lcd^0,w,c
  5017   0023EC  2446               	addwf	lcd_send_nbits@pin_counter^0,w,c
  5018   0023EE  0F02               	addlw	2
  5019   0023F0  6E39               	movwf	gpio_pin_logic_write@pin^0,c
  5020   0023F2  C046  F043         	movff	lcd_send_nbits@pin_counter,??_lcd_send_nbits
  5021   0023F6  C042  F044         	movff	lcd_send_nbits@data_or_command,??_lcd_send_nbits+1
  5022   0023FA  2A43               	incf	??_lcd_send_nbits^0,f,c
  5023   0023FC  EF02  F012         	goto	u2514
  5024   002400                     u2515:
  5025   002400  90D8               	bcf	status,0,c
  5026   002402  3244               	rrcf	(??_lcd_send_nbits+1)^0,f,c
  5027   002404                     u2514:
  5028   002404  2E43               	decfsz	??_lcd_send_nbits^0,f,c
  5029   002406  EF00  F012         	goto	u2515
  5030   00240A  5044               	movf	(??_lcd_send_nbits+1)^0,w,c
  5031   00240C  0B01               	andlw	1
  5032   00240E  6E3A               	movwf	gpio_pin_logic_write@pin_logic^0,c
  5033   002410  EC52  F00A         	call	_gpio_pin_logic_write	;wreg free
  5034   002414                     
  5035                           ;ECUAL/LCD/lcd.c: 335:     }
  5036   002414  2A46               	incf	lcd_send_nbits@pin_counter^0,f,c
  5037   002416                     l3781:
  5038   002416  0E03               	movlw	3
  5039   002418  6446               	cpfsgt	lcd_send_nbits@pin_counter^0,c
  5040   00241A  EF11  F012         	goto	u2521
  5041   00241E  EF13  F012         	goto	u2520
  5042   002422                     u2521:
  5043   002422  EFF5  F011         	goto	l3777
  5044   002426                     u2520:
  5045   002426                     
  5046                           ;ECUAL/LCD/lcd.c: 337:     return ret;
  5047   002426  5045               	movf	lcd_send_nbits@ret^0,w,c
  5048   002428  0012               	return		;funcret
  5049   00242A                     __end_of_lcd_send_nbits:
  5050                           	callstack 0
  5051                           
  5052 ;; *************** function _lcd_send_enable *****************
  5053 ;; Defined at:
  5054 ;;		line 340 in file "ECUAL/LCD/lcd.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;  lcd             1   11[COMRAM] PTR struct .
  5057 ;;		 -> lcd(6), 
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;  ret             1    0        unsigned char 
  5060 ;;  gpio_ret        1   12[COMRAM] unsigned char 
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  1    wreg      unsigned char 
  5063 ;; Registers used:
  5064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5070 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5071 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5074 ;;Total ram usage:        2 bytes
  5075 ;; Hardware stack levels used: 1
  5076 ;; Hardware stack levels required when called: 4
  5077 ;; This function calls:
  5078 ;;		_gpio_pin_logic_write
  5079 ;; This function is called by:
  5080 ;;		_lcd_send_command
  5081 ;;		_lcd_send_char_data
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           	psect	text37
  5086   002706                     __ptext37:
  5087                           	callstack 0
  5088   002706                     _lcd_send_enable:
  5089                           	callstack 22
  5090   002706                     
  5091                           ;ECUAL/LCD/lcd.c: 343:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  5092   002706  0E00               	movlw	0
  5093   002708  6E42               	movwf	lcd_send_enable@gpio_ret^0,c
  5094   00270A  2841               	incf	lcd_send_enable@lcd^0,w,c
  5095   00270C  6E39               	movwf	gpio_pin_logic_write@pin^0,c
  5096   00270E  0E01               	movlw	1
  5097   002710  6E3A               	movwf	gpio_pin_logic_write@pin_logic^0,c
  5098   002712  EC52  F00A         	call	_gpio_pin_logic_write	;wreg free
  5099   002716                     
  5100                           ;ECUAL/LCD/lcd.c: 345:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  5101   002716  0E03               	movlw	3
  5102   002718                     u3057:
  5103   002718  2EE8               	decfsz	wreg,f,c
  5104   00271A  D7FE               	bra	u3057
  5105   00271C  0000               	nop	
  5106   00271E  2841               	incf	lcd_send_enable@lcd^0,w,c
  5107   002720  6E39               	movwf	gpio_pin_logic_write@pin^0,c
  5108   002722  0E00               	movlw	0
  5109   002724  6E3A               	movwf	gpio_pin_logic_write@pin_logic^0,c
  5110   002726  EC52  F00A         	call	_gpio_pin_logic_write	;wreg free
  5111   00272A                     
  5112                           ;ECUAL/LCD/lcd.c: 348:     return ret;
  5113   00272A  0E00               	movlw	0
  5114   00272C  0012               	return		;funcret
  5115   00272E                     __end_of_lcd_send_enable:
  5116                           	callstack 0
  5117                           
  5118 ;; *************** function _gpio_pin_output_low_init *****************
  5119 ;; Defined at:
  5120 ;;		line 161 in file "MCAL/GPIO/gpio.c"
  5121 ;; Parameters:    Size  Location     Type
  5122 ;;  pin             1   11[COMRAM] PTR struct .
  5123 ;;		 -> lcd$lcd_pins(4), lcd(6), seg_green$seven_segment_pins(4), seg_green(5), 
  5124 ;;		 -> seg_red$seven_segment_pins(4), seg_red(5), pedestrian_led_green(2), pedestrian_led_yellow(2), 
  5125 ;;		 -> pedestrian_led_red(2), car_led_green(2), car_led_yellow(2), car_led_red(2), 
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;  ret             1   14[COMRAM] unsigned char 
  5128 ;;  gpio_ret        1   13[COMRAM] unsigned char 
  5129 ;; Return value:  Size  Location     Type
  5130 ;;                  1    wreg      unsigned char 
  5131 ;; Registers used:
  5132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5133 ;; Tracked objects:
  5134 ;;		On entry : 0/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5138 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5139 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5142 ;;Total ram usage:        4 bytes
  5143 ;; Hardware stack levels used: 1
  5144 ;; Hardware stack levels required when called: 4
  5145 ;; This function calls:
  5146 ;;		_gpio_pin_direction_init
  5147 ;;		_gpio_pin_logic_write
  5148 ;; This function is called by:
  5149 ;;		_seven_segment_init
  5150 ;;		_lcd_init
  5151 ;;		_led_init
  5152 ;; This function uses a non-reentrant model
  5153 ;;
  5154                           
  5155                           	psect	text38
  5156   0020E4                     __ptext38:
  5157                           	callstack 0
  5158   0020E4                     _gpio_pin_output_low_init:
  5159                           	callstack 23
  5160   0020E4                     
  5161                           ;MCAL/GPIO/gpio.c: 164:     Std_ReturnType gpio_ret=(Std_ReturnType)0x00;
  5162   0020E4  0E00               	movlw	0
  5163   0020E6  6E43               	movwf	gpio_pin_output_low_init@gpio_ret^0,c
  5164                           
  5165                           ;MCAL/GPIO/gpio.c: 165:     if(((void*)0)==pin || (pin->pin)>7){
  5166   0020E8  5041               	movf	gpio_pin_output_low_init@pin^0,w,c
  5167   0020EA  B4D8               	btfsc	status,2,c
  5168   0020EC  EF7A  F010         	goto	u2551
  5169   0020F0  EF7C  F010         	goto	u2550
  5170   0020F4                     u2551:
  5171   0020F4  EF8C  F010         	goto	l3851
  5172   0020F8                     u2550:
  5173   0020F8  5041               	movf	gpio_pin_output_low_init@pin^0,w,c
  5174   0020FA  6ED9               	movwf	fsr2l,c
  5175   0020FC  6ADA               	clrf	fsr2h,c
  5176   0020FE  30DF               	rrcf	223,w,c
  5177   002100  32E8               	rrcf	wreg,f,c
  5178   002102  32E8               	rrcf	wreg,f,c
  5179   002104  0B07               	andlw	7
  5180   002106  6E42               	movwf	??_gpio_pin_output_low_init^0,c
  5181   002108  0E07               	movlw	7
  5182   00210A  6442               	cpfsgt	??_gpio_pin_output_low_init^0,c
  5183   00210C  EF8A  F010         	goto	u2561
  5184   002110  EF8C  F010         	goto	u2560
  5185   002114                     u2561:
  5186   002114  EF90  F010         	goto	l3853
  5187   002118                     u2560:
  5188   002118                     l3851:
  5189                           
  5190                           ;MCAL/GPIO/gpio.c: 166:         ret=(Std_ReturnType)0x00;
  5191   002118  0E00               	movlw	0
  5192   00211A  6E44               	movwf	gpio_pin_output_low_init@ret^0,c
  5193                           
  5194                           ;MCAL/GPIO/gpio.c: 167:     }
  5195   00211C  EFA0  F010         	goto	l3857
  5196   002120                     l3853:
  5197                           
  5198                           ;MCAL/GPIO/gpio.c: 169:         gpio_ret=gpio_pin_direction_init(pin,OUTPUT);
  5199   002120  C041  F039         	movff	gpio_pin_output_low_init@pin,gpio_pin_direction_init@pin
  5200   002124  0E00               	movlw	0
  5201   002126  6E3A               	movwf	gpio_pin_direction_init@pin_direction^0,c
  5202   002128  ECEC  F00A         	call	_gpio_pin_direction_init	;wreg free
  5203   00212C  6E43               	movwf	gpio_pin_output_low_init@gpio_ret^0,c
  5204                           
  5205                           ;MCAL/GPIO/gpio.c: 170:         gpio_ret=gpio_pin_logic_write(pin,LOW);
  5206   00212E  C041  F039         	movff	gpio_pin_output_low_init@pin,gpio_pin_logic_write@pin
  5207   002132  0E00               	movlw	0
  5208   002134  6E3A               	movwf	gpio_pin_logic_write@pin_logic^0,c
  5209   002136  EC52  F00A         	call	_gpio_pin_logic_write	;wreg free
  5210   00213A  6E43               	movwf	gpio_pin_output_low_init@gpio_ret^0,c
  5211   00213C                     
  5212                           ;MCAL/GPIO/gpio.c: 171:         ret=(Std_ReturnType)0x01;
  5213   00213C  0E01               	movlw	1
  5214   00213E  6E44               	movwf	gpio_pin_output_low_init@ret^0,c
  5215   002140                     l3857:
  5216                           
  5217                           ;MCAL/GPIO/gpio.c: 174:     return ret;
  5218   002140  5044               	movf	gpio_pin_output_low_init@ret^0,w,c
  5219   002142  0012               	return		;funcret
  5220   002144                     __end_of_gpio_pin_output_low_init:
  5221                           	callstack 0
  5222                           
  5223 ;; *************** function _gpio_pin_logic_write *****************
  5224 ;; Defined at:
  5225 ;;		line 81 in file "MCAL/GPIO/gpio.c"
  5226 ;; Parameters:    Size  Location     Type
  5227 ;;  pin             1    3[COMRAM] PTR struct .
  5228 ;;		 -> lcd$lcd_pins(4), lcd(6), seg_green$seven_segment_pins(4), seg_green(5), 
  5229 ;;		 -> seg_red$seven_segment_pins(4), seg_red(5), pedestrian_led_green(2), pedestrian_led_yellow(2), 
  5230 ;;		 -> pedestrian_led_red(2), car_led_green(2), car_led_yellow(2), car_led_red(2), 
  5231 ;;  pin_logic       1    4[COMRAM] enum E2978
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;  ret             1   10[COMRAM] unsigned char 
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  1    wreg      unsigned char 
  5236 ;; Registers used:
  5237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5243 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5244 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5245 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5246 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5247 ;;Total ram usage:        8 bytes
  5248 ;; Hardware stack levels used: 1
  5249 ;; Hardware stack levels required when called: 3
  5250 ;; This function calls:
  5251 ;;		Nothing
  5252 ;; This function is called by:
  5253 ;;		_seven_segment_write
  5254 ;;		_lcd_send_command
  5255 ;;		_lcd_send_char_data
  5256 ;;		_lcd_send_nbits
  5257 ;;		_lcd_send_enable
  5258 ;;		_led_on
  5259 ;;		_led_off
  5260 ;;		_gpio_pin_output_low_init
  5261 ;;		_gpio_pin_output_high_init
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           	psect	text39
  5266   0014A4                     __ptext39:
  5267                           	callstack 0
  5268   0014A4                     _gpio_pin_logic_write:
  5269                           	callstack 22
  5270   0014A4                     
  5271                           ;MCAL/GPIO/gpio.c: 84:     if(((void*)0)==pin ||(pin->pin)>7 || pin_logic>1){
  5272   0014A4  5039               	movf	gpio_pin_logic_write@pin^0,w,c
  5273   0014A6  B4D8               	btfsc	status,2,c
  5274   0014A8  EF58  F00A         	goto	u2451
  5275   0014AC  EF5A  F00A         	goto	u2450
  5276   0014B0                     u2451:
  5277   0014B0  EF72  F00A         	goto	l3753
  5278   0014B4                     u2450:
  5279   0014B4  5039               	movf	gpio_pin_logic_write@pin^0,w,c
  5280   0014B6  6ED9               	movwf	fsr2l,c
  5281   0014B8  6ADA               	clrf	fsr2h,c
  5282   0014BA  30DF               	rrcf	223,w,c
  5283   0014BC  32E8               	rrcf	wreg,f,c
  5284   0014BE  32E8               	rrcf	wreg,f,c
  5285   0014C0  0B07               	andlw	7
  5286   0014C2  6E3B               	movwf	??_gpio_pin_logic_write^0,c
  5287   0014C4  0E08               	movlw	8
  5288   0014C6  603B               	cpfslt	??_gpio_pin_logic_write^0,c
  5289   0014C8  EF68  F00A         	goto	u2461
  5290   0014CC  EF6A  F00A         	goto	u2460
  5291   0014D0                     u2461:
  5292   0014D0  EF72  F00A         	goto	l3753
  5293   0014D4                     u2460:
  5294   0014D4  0E01               	movlw	1
  5295   0014D6  643A               	cpfsgt	gpio_pin_logic_write@pin_logic^0,c
  5296   0014D8  EF70  F00A         	goto	u2471
  5297   0014DC  EF72  F00A         	goto	u2470
  5298   0014E0                     u2471:
  5299   0014E0  EFCB  F00A         	goto	l3761
  5300   0014E4                     u2470:
  5301   0014E4                     l3753:
  5302                           
  5303                           ;MCAL/GPIO/gpio.c: 85:         ret=(Std_ReturnType)0x00;
  5304   0014E4  0E00               	movlw	0
  5305   0014E6  6E40               	movwf	gpio_pin_logic_write@ret^0,c
  5306                           
  5307                           ;MCAL/GPIO/gpio.c: 86:     }
  5308   0014E8  EFEA  F00A         	goto	l3767
  5309   0014EC                     l3755:
  5310                           
  5311                           ;MCAL/GPIO/gpio.c: 90:                 (*latx[pin->port] &= ~((uint8)1<<pin->pin));
  5312   0014EC  5039               	movf	gpio_pin_logic_write@pin^0,w,c
  5313   0014EE  6ED9               	movwf	fsr2l,c
  5314   0014F0  6ADA               	clrf	fsr2h,c
  5315   0014F2  30DF               	rrcf	223,w,c
  5316   0014F4  32E8               	rrcf	wreg,f,c
  5317   0014F6  32E8               	rrcf	wreg,f,c
  5318   0014F8  0B07               	andlw	7
  5319   0014FA  6E3B               	movwf	??_gpio_pin_logic_write^0,c
  5320   0014FC  0E01               	movlw	1
  5321   0014FE  6E3C               	movwf	(??_gpio_pin_logic_write+1)^0,c
  5322   001500  2A3B               	incf	??_gpio_pin_logic_write^0,f,c
  5323   001502  EF85  F00A         	goto	u2484
  5324   001506                     u2485:
  5325   001506  90D8               	bcf	status,0,c
  5326   001508  363C               	rlcf	(??_gpio_pin_logic_write+1)^0,f,c
  5327   00150A                     u2484:
  5328   00150A  2E3B               	decfsz	??_gpio_pin_logic_write^0,f,c
  5329   00150C  EF83  F00A         	goto	u2485
  5330   001510  503C               	movf	(??_gpio_pin_logic_write+1)^0,w,c
  5331   001512  0AFF               	xorlw	255
  5332   001514  6E3D               	movwf	(??_gpio_pin_logic_write+2)^0,c
  5333   001516  5039               	movf	gpio_pin_logic_write@pin^0,w,c
  5334   001518  6ED9               	movwf	fsr2l,c
  5335   00151A  6ADA               	clrf	fsr2h,c
  5336   00151C  50DF               	movf	223,w,c
  5337   00151E  0B07               	andlw	7
  5338   001520  0D02               	mullw	2
  5339   001522  50F3               	movf	243,w,c
  5340   001524  0F01               	addlw	low _latx
  5341   001526  6ED9               	movwf	fsr2l,c
  5342   001528  6ADA               	clrf	fsr2h,c
  5343   00152A  CFDE F03E          	movff	postinc2,??_gpio_pin_logic_write+3
  5344   00152E  CFDD F03F          	movff	postdec2,??_gpio_pin_logic_write+4
  5345   001532  C03E  FFD9         	movff	??_gpio_pin_logic_write+3,fsr2l
  5346   001536  C03F  FFDA         	movff	??_gpio_pin_logic_write+4,fsr2h
  5347   00153A  503D               	movf	(??_gpio_pin_logic_write+2)^0,w,c
  5348   00153C  16DF               	andwf	indf2,f,c
  5349                           
  5350                           ;MCAL/GPIO/gpio.c: 91:                 break;
  5351   00153E  EFE0  F00A         	goto	l3763
  5352   001542                     l3757:
  5353                           
  5354                           ;MCAL/GPIO/gpio.c: 94:                 (*latx[pin->port] |= ((uint8)1<<pin->pin));
  5355   001542  5039               	movf	gpio_pin_logic_write@pin^0,w,c
  5356   001544  6ED9               	movwf	fsr2l,c
  5357   001546  6ADA               	clrf	fsr2h,c
  5358   001548  30DF               	rrcf	223,w,c
  5359   00154A  32E8               	rrcf	wreg,f,c
  5360   00154C  32E8               	rrcf	wreg,f,c
  5361   00154E  0B07               	andlw	7
  5362   001550  6E3B               	movwf	??_gpio_pin_logic_write^0,c
  5363   001552  0E01               	movlw	1
  5364   001554  6E3C               	movwf	(??_gpio_pin_logic_write+1)^0,c
  5365   001556  2A3B               	incf	??_gpio_pin_logic_write^0,f,c
  5366   001558  EFB0  F00A         	goto	u2494
  5367   00155C                     u2495:
  5368   00155C  90D8               	bcf	status,0,c
  5369   00155E  363C               	rlcf	(??_gpio_pin_logic_write+1)^0,f,c
  5370   001560                     u2494:
  5371   001560  2E3B               	decfsz	??_gpio_pin_logic_write^0,f,c
  5372   001562  EFAE  F00A         	goto	u2495
  5373   001566  5039               	movf	gpio_pin_logic_write@pin^0,w,c
  5374   001568  6ED9               	movwf	fsr2l,c
  5375   00156A  6ADA               	clrf	fsr2h,c
  5376   00156C  50DF               	movf	223,w,c
  5377   00156E  0B07               	andlw	7
  5378   001570  0D02               	mullw	2
  5379   001572  50F3               	movf	243,w,c
  5380   001574  0F01               	addlw	low _latx
  5381   001576  6ED9               	movwf	fsr2l,c
  5382   001578  6ADA               	clrf	fsr2h,c
  5383   00157A  CFDE F03D          	movff	postinc2,??_gpio_pin_logic_write+2
  5384   00157E  CFDD F03E          	movff	postdec2,??_gpio_pin_logic_write+3
  5385   001582  C03D  FFD9         	movff	??_gpio_pin_logic_write+2,fsr2l
  5386   001586  C03E  FFDA         	movff	??_gpio_pin_logic_write+3,fsr2h
  5387   00158A  503C               	movf	(??_gpio_pin_logic_write+1)^0,w,c
  5388   00158C  12DF               	iorwf	indf2,f,c
  5389                           
  5390                           ;MCAL/GPIO/gpio.c: 95:                 break;
  5391   00158E  EFE0  F00A         	goto	l3763
  5392   001592                     l3759:
  5393                           
  5394                           ;MCAL/GPIO/gpio.c: 99:         }
  5395   001592  EFE0  F00A         	goto	l3763
  5396   001596                     l3761:
  5397   001596  503A               	movf	gpio_pin_logic_write@pin_logic^0,w,c
  5398   001598  6E3B               	movwf	??_gpio_pin_logic_write^0,c
  5399   00159A  6A3C               	clrf	(??_gpio_pin_logic_write+1)^0,c
  5400                           
  5401                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5402                           ; Switch size 1, requested type "simple"
  5403                           ; Number of cases is 1, Range of values is 0 to 0
  5404                           ; switch strategies available:
  5405                           ; Name         Instructions Cycles
  5406                           ; simple_byte            4     3 (average)
  5407                           ;	Chosen strategy is simple_byte
  5408   00159C  503C               	movf	(??_gpio_pin_logic_write+1)^0,w,c
  5409   00159E  0A00               	xorlw	0	; case 0
  5410   0015A0  B4D8               	btfsc	status,2,c
  5411   0015A2  EFD5  F00A         	goto	l4469
  5412   0015A6  EFC9  F00A         	goto	l3759
  5413   0015AA                     l4469:
  5414                           
  5415                           ; Switch size 1, requested type "simple"
  5416                           ; Number of cases is 2, Range of values is 0 to 1
  5417                           ; switch strategies available:
  5418                           ; Name         Instructions Cycles
  5419                           ; simple_byte            7     4 (average)
  5420                           ;	Chosen strategy is simple_byte
  5421   0015AA  503B               	movf	??_gpio_pin_logic_write^0,w,c
  5422   0015AC  0A00               	xorlw	0	; case 0
  5423   0015AE  B4D8               	btfsc	status,2,c
  5424   0015B0  EF76  F00A         	goto	l3755
  5425   0015B4  0A01               	xorlw	1	; case 1
  5426   0015B6  B4D8               	btfsc	status,2,c
  5427   0015B8  EFA1  F00A         	goto	l3757
  5428   0015BC  EFC9  F00A         	goto	l3759
  5429   0015C0                     l3763:
  5430                           
  5431                           ;MCAL/GPIO/gpio.c: 100:         pin->logic=pin_logic;
  5432   0015C0  5039               	movf	gpio_pin_logic_write@pin^0,w,c
  5433   0015C2  6ED9               	movwf	fsr2l,c
  5434   0015C4  6ADA               	clrf	fsr2h,c
  5435   0015C6  B03A               	btfsc	gpio_pin_logic_write@pin_logic^0,0,c
  5436   0015C8  D002               	bra	u2505
  5437   0015CA  9EDF               	bcf	indf2,7,c
  5438   0015CC  D001               	bra	u2506
  5439   0015CE                     u2505:
  5440   0015CE  8EDF               	bsf	indf2,7,c
  5441   0015D0                     u2506:
  5442   0015D0                     
  5443                           ;MCAL/GPIO/gpio.c: 101:         ret=(Std_ReturnType)0x01;
  5444   0015D0  0E01               	movlw	1
  5445   0015D2  6E40               	movwf	gpio_pin_logic_write@ret^0,c
  5446   0015D4                     l3767:
  5447                           
  5448                           ;MCAL/GPIO/gpio.c: 104:     return ret;
  5449   0015D4  5040               	movf	gpio_pin_logic_write@ret^0,w,c
  5450   0015D6  0012               	return		;funcret
  5451   0015D8                     __end_of_gpio_pin_logic_write:
  5452                           	callstack 0
  5453                           
  5454 ;; *************** function _gpio_pin_direction_init *****************
  5455 ;; Defined at:
  5456 ;;		line 23 in file "MCAL/GPIO/gpio.c"
  5457 ;; Parameters:    Size  Location     Type
  5458 ;;  pin             1    3[COMRAM] PTR struct .
  5459 ;;		 -> MY_INT0(6), lcd$lcd_pins(4), lcd(6), seg_green$seven_segment_pins(4), 
  5460 ;;		 -> seg_green(5), seg_red$seven_segment_pins(4), seg_red(5), pedestrian_led_green(2), 
  5461 ;;		 -> pedestrian_led_yellow(2), pedestrian_led_red(2), car_led_green(2), car_led_yellow(2), 
  5462 ;;		 -> car_led_red(2), 
  5463 ;;  pin_directio    1    4[COMRAM] enum E2982
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;  ret             1   10[COMRAM] unsigned char 
  5466 ;; Return value:  Size  Location     Type
  5467 ;;                  1    wreg      unsigned char 
  5468 ;; Registers used:
  5469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5470 ;; Tracked objects:
  5471 ;;		On entry : 0/0
  5472 ;;		On exit  : 0/0
  5473 ;;		Unchanged: 0/0
  5474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5475 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5476 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;Total ram usage:        8 bytes
  5480 ;; Hardware stack levels used: 1
  5481 ;; Hardware stack levels required when called: 3
  5482 ;; This function calls:
  5483 ;;		Nothing
  5484 ;; This function is called by:
  5485 ;;		_gpio_pin_output_low_init
  5486 ;;		_gpio_pin_input_init
  5487 ;;		_gpio_pin_output_high_init
  5488 ;; This function uses a non-reentrant model
  5489 ;;
  5490                           
  5491                           	psect	text40
  5492   0015D8                     __ptext40:
  5493                           	callstack 0
  5494   0015D8                     _gpio_pin_direction_init:
  5495                           	callstack 23
  5496   0015D8                     
  5497                           ;MCAL/GPIO/gpio.c: 26:     if(((void*)0)==pin || (pin->pin)>7 || pin_direction>1){
  5498   0015D8  5039               	movf	gpio_pin_direction_init@pin^0,w,c
  5499   0015DA  B4D8               	btfsc	status,2,c
  5500   0015DC  EFF2  F00A         	goto	u1661
  5501   0015E0  EFF4  F00A         	goto	u1660
  5502   0015E4                     u1661:
  5503   0015E4  EF0C  F00B         	goto	l2783
  5504   0015E8                     u1660:
  5505   0015E8  5039               	movf	gpio_pin_direction_init@pin^0,w,c
  5506   0015EA  6ED9               	movwf	fsr2l,c
  5507   0015EC  6ADA               	clrf	fsr2h,c
  5508   0015EE  30DF               	rrcf	223,w,c
  5509   0015F0  32E8               	rrcf	wreg,f,c
  5510   0015F2  32E8               	rrcf	wreg,f,c
  5511   0015F4  0B07               	andlw	7
  5512   0015F6  6E3B               	movwf	??_gpio_pin_direction_init^0,c
  5513   0015F8  0E08               	movlw	8
  5514   0015FA  603B               	cpfslt	??_gpio_pin_direction_init^0,c
  5515   0015FC  EF02  F00B         	goto	u1671
  5516   001600  EF04  F00B         	goto	u1670
  5517   001604                     u1671:
  5518   001604  EF0C  F00B         	goto	l2783
  5519   001608                     u1670:
  5520   001608  0E01               	movlw	1
  5521   00160A  643A               	cpfsgt	gpio_pin_direction_init@pin_direction^0,c
  5522   00160C  EF0A  F00B         	goto	u1681
  5523   001610  EF0C  F00B         	goto	u1680
  5524   001614                     u1681:
  5525   001614  EF65  F00B         	goto	l2791
  5526   001618                     u1680:
  5527   001618                     l2783:
  5528                           
  5529                           ;MCAL/GPIO/gpio.c: 27:         ret=(Std_ReturnType)0x00;
  5530   001618  0E00               	movlw	0
  5531   00161A  6E40               	movwf	gpio_pin_direction_init@ret^0,c
  5532                           
  5533                           ;MCAL/GPIO/gpio.c: 28:     }
  5534   00161C  EF84  F00B         	goto	l2797
  5535   001620                     l2785:
  5536                           
  5537                           ;MCAL/GPIO/gpio.c: 32:                 (*trisx[pin->port] &= ~((uint8)1<<pin->pin));
  5538   001620  5039               	movf	gpio_pin_direction_init@pin^0,w,c
  5539   001622  6ED9               	movwf	fsr2l,c
  5540   001624  6ADA               	clrf	fsr2h,c
  5541   001626  30DF               	rrcf	223,w,c
  5542   001628  32E8               	rrcf	wreg,f,c
  5543   00162A  32E8               	rrcf	wreg,f,c
  5544   00162C  0B07               	andlw	7
  5545   00162E  6E3B               	movwf	??_gpio_pin_direction_init^0,c
  5546   001630  0E01               	movlw	1
  5547   001632  6E3C               	movwf	(??_gpio_pin_direction_init+1)^0,c
  5548   001634  2A3B               	incf	??_gpio_pin_direction_init^0,f,c
  5549   001636  EF1F  F00B         	goto	u1694
  5550   00163A                     u1695:
  5551   00163A  90D8               	bcf	status,0,c
  5552   00163C  363C               	rlcf	(??_gpio_pin_direction_init+1)^0,f,c
  5553   00163E                     u1694:
  5554   00163E  2E3B               	decfsz	??_gpio_pin_direction_init^0,f,c
  5555   001640  EF1D  F00B         	goto	u1695
  5556   001644  503C               	movf	(??_gpio_pin_direction_init+1)^0,w,c
  5557   001646  0AFF               	xorlw	255
  5558   001648  6E3D               	movwf	(??_gpio_pin_direction_init+2)^0,c
  5559   00164A  5039               	movf	gpio_pin_direction_init@pin^0,w,c
  5560   00164C  6ED9               	movwf	fsr2l,c
  5561   00164E  6ADA               	clrf	fsr2h,c
  5562   001650  50DF               	movf	223,w,c
  5563   001652  0B07               	andlw	7
  5564   001654  0D02               	mullw	2
  5565   001656  50F3               	movf	243,w,c
  5566   001658  0F0B               	addlw	low _trisx
  5567   00165A  6ED9               	movwf	fsr2l,c
  5568   00165C  6ADA               	clrf	fsr2h,c
  5569   00165E  CFDE F03E          	movff	postinc2,??_gpio_pin_direction_init+3
  5570   001662  CFDD F03F          	movff	postdec2,??_gpio_pin_direction_init+4
  5571   001666  C03E  FFD9         	movff	??_gpio_pin_direction_init+3,fsr2l
  5572   00166A  C03F  FFDA         	movff	??_gpio_pin_direction_init+4,fsr2h
  5573   00166E  503D               	movf	(??_gpio_pin_direction_init+2)^0,w,c
  5574   001670  16DF               	andwf	indf2,f,c
  5575                           
  5576                           ;MCAL/GPIO/gpio.c: 33:                 break;
  5577   001672  EF7A  F00B         	goto	l2793
  5578   001676                     l2787:
  5579                           
  5580                           ;MCAL/GPIO/gpio.c: 36:                 (*trisx[pin->port] |= ((uint8)1<<pin->pin));
  5581   001676  5039               	movf	gpio_pin_direction_init@pin^0,w,c
  5582   001678  6ED9               	movwf	fsr2l,c
  5583   00167A  6ADA               	clrf	fsr2h,c
  5584   00167C  30DF               	rrcf	223,w,c
  5585   00167E  32E8               	rrcf	wreg,f,c
  5586   001680  32E8               	rrcf	wreg,f,c
  5587   001682  0B07               	andlw	7
  5588   001684  6E3B               	movwf	??_gpio_pin_direction_init^0,c
  5589   001686  0E01               	movlw	1
  5590   001688  6E3C               	movwf	(??_gpio_pin_direction_init+1)^0,c
  5591   00168A  2A3B               	incf	??_gpio_pin_direction_init^0,f,c
  5592   00168C  EF4A  F00B         	goto	u1704
  5593   001690                     u1705:
  5594   001690  90D8               	bcf	status,0,c
  5595   001692  363C               	rlcf	(??_gpio_pin_direction_init+1)^0,f,c
  5596   001694                     u1704:
  5597   001694  2E3B               	decfsz	??_gpio_pin_direction_init^0,f,c
  5598   001696  EF48  F00B         	goto	u1705
  5599   00169A  5039               	movf	gpio_pin_direction_init@pin^0,w,c
  5600   00169C  6ED9               	movwf	fsr2l,c
  5601   00169E  6ADA               	clrf	fsr2h,c
  5602   0016A0  50DF               	movf	223,w,c
  5603   0016A2  0B07               	andlw	7
  5604   0016A4  0D02               	mullw	2
  5605   0016A6  50F3               	movf	243,w,c
  5606   0016A8  0F0B               	addlw	low _trisx
  5607   0016AA  6ED9               	movwf	fsr2l,c
  5608   0016AC  6ADA               	clrf	fsr2h,c
  5609   0016AE  CFDE F03D          	movff	postinc2,??_gpio_pin_direction_init+2
  5610   0016B2  CFDD F03E          	movff	postdec2,??_gpio_pin_direction_init+3
  5611   0016B6  C03D  FFD9         	movff	??_gpio_pin_direction_init+2,fsr2l
  5612   0016BA  C03E  FFDA         	movff	??_gpio_pin_direction_init+3,fsr2h
  5613   0016BE  503C               	movf	(??_gpio_pin_direction_init+1)^0,w,c
  5614   0016C0  12DF               	iorwf	indf2,f,c
  5615                           
  5616                           ;MCAL/GPIO/gpio.c: 37:                 break;
  5617   0016C2  EF7A  F00B         	goto	l2793
  5618   0016C6                     l2789:
  5619                           
  5620                           ;MCAL/GPIO/gpio.c: 41:         }
  5621   0016C6  EF7A  F00B         	goto	l2793
  5622   0016CA                     l2791:
  5623   0016CA  503A               	movf	gpio_pin_direction_init@pin_direction^0,w,c
  5624   0016CC  6E3B               	movwf	??_gpio_pin_direction_init^0,c
  5625   0016CE  6A3C               	clrf	(??_gpio_pin_direction_init+1)^0,c
  5626                           
  5627                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5628                           ; Switch size 1, requested type "simple"
  5629                           ; Number of cases is 1, Range of values is 0 to 0
  5630                           ; switch strategies available:
  5631                           ; Name         Instructions Cycles
  5632                           ; simple_byte            4     3 (average)
  5633                           ;	Chosen strategy is simple_byte
  5634   0016D0  503C               	movf	(??_gpio_pin_direction_init+1)^0,w,c
  5635   0016D2  0A00               	xorlw	0	; case 0
  5636   0016D4  B4D8               	btfsc	status,2,c
  5637   0016D6  EF6F  F00B         	goto	l4471
  5638   0016DA  EF63  F00B         	goto	l2789
  5639   0016DE                     l4471:
  5640                           
  5641                           ; Switch size 1, requested type "simple"
  5642                           ; Number of cases is 2, Range of values is 0 to 1
  5643                           ; switch strategies available:
  5644                           ; Name         Instructions Cycles
  5645                           ; simple_byte            7     4 (average)
  5646                           ;	Chosen strategy is simple_byte
  5647   0016DE  503B               	movf	??_gpio_pin_direction_init^0,w,c
  5648   0016E0  0A00               	xorlw	0	; case 0
  5649   0016E2  B4D8               	btfsc	status,2,c
  5650   0016E4  EF10  F00B         	goto	l2785
  5651   0016E8  0A01               	xorlw	1	; case 1
  5652   0016EA  B4D8               	btfsc	status,2,c
  5653   0016EC  EF3B  F00B         	goto	l2787
  5654   0016F0  EF63  F00B         	goto	l2789
  5655   0016F4                     l2793:
  5656                           
  5657                           ;MCAL/GPIO/gpio.c: 42:         pin->direction=pin_direction;
  5658   0016F4  5039               	movf	gpio_pin_direction_init@pin^0,w,c
  5659   0016F6  6ED9               	movwf	fsr2l,c
  5660   0016F8  6ADA               	clrf	fsr2h,c
  5661   0016FA  B03A               	btfsc	gpio_pin_direction_init@pin_direction^0,0,c
  5662   0016FC  D002               	bra	u1715
  5663   0016FE  9CDF               	bcf	indf2,6,c
  5664   001700  D001               	bra	u1716
  5665   001702                     u1715:
  5666   001702  8CDF               	bsf	indf2,6,c
  5667   001704                     u1716:
  5668   001704                     
  5669                           ;MCAL/GPIO/gpio.c: 43:         ret=(Std_ReturnType)0x01;
  5670   001704  0E01               	movlw	1
  5671   001706  6E40               	movwf	gpio_pin_direction_init@ret^0,c
  5672   001708                     l2797:
  5673                           
  5674                           ;MCAL/GPIO/gpio.c: 46:     return ret;
  5675   001708  5040               	movf	gpio_pin_direction_init@ret^0,w,c
  5676   00170A  0012               	return		;funcret
  5677   00170C                     __end_of_gpio_pin_direction_init:
  5678                           	callstack 0
  5679                           
  5680 ;; *************** function _InterruptManager *****************
  5681 ;; Defined at:
  5682 ;;		line 80 in file "MCAL/INTERRUPT/mcall_interrupt_manager.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;		None
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;		None
  5687 ;; Return value:  Size  Location     Type
  5688 ;;                  1    wreg      void 
  5689 ;; Registers used:
  5690 ;;		wreg, status,2, status,0, pcl, pclath, pclatu, tosl, cstack
  5691 ;; Tracked objects:
  5692 ;;		On entry : 0/0
  5693 ;;		On exit  : 0/0
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;Total ram usage:        2 bytes
  5701 ;; Hardware stack levels used: 1
  5702 ;; Hardware stack levels required when called: 2
  5703 ;; This function calls:
  5704 ;;		_INT0_ISR
  5705 ;;		_INT1_ISR
  5706 ;;		_INT2_ISR
  5707 ;;		_RB4_ISR
  5708 ;;		_RB5_ISR
  5709 ;;		_RB6_ISR
  5710 ;;		_RB7_ISR
  5711 ;; This function is called by:
  5712 ;;		Interrupt level 2
  5713 ;; This function uses a non-reentrant model
  5714 ;;
  5715                           
  5716                           	psect	intcode
  5717   000008                     __pintcode:
  5718                           	callstack 0
  5719   000008                     _InterruptManager:
  5720                           	callstack 20
  5721                           
  5722                           ;incstack = 0
  5723   000008  827C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5724   00000A  ED15  F008         	call	int_func,f	;refresh shadow registers
  5725                           
  5726                           	psect	intcode_body
  5727   00102A                     __pintcode_body:
  5728                           	callstack 20
  5729   00102A                     int_func:
  5730                           	callstack 20
  5731   00102A  0006               	pop		; remove dummy address from shadow register refresh
  5732   00102C  CFFA F037          	movff	pclath,??_InterruptManager
  5733   001030  CFFB F038          	movff	pclatu,??_InterruptManager+1
  5734   001034                     
  5735                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 82:     if((1 == INTCONbits.INT0IE) && (1 == 
      +                          INTCONbits.INT0IF)){
  5736   001034  A8F2               	btfss	242,4,c	;volatile
  5737   001036  EF1F  F008         	goto	i2u108_41
  5738   00103A  EF21  F008         	goto	i2u108_40
  5739   00103E                     i2u108_41:
  5740   00103E  EF2A  F008         	goto	i2l2357
  5741   001042                     i2u108_40:
  5742   001042  A2F2               	btfss	242,1,c	;volatile
  5743   001044  EF26  F008         	goto	i2u109_41
  5744   001048  EF28  F008         	goto	i2u109_40
  5745   00104C                     i2u109_41:
  5746   00104C  EF2A  F008         	goto	i2l2357
  5747   001050                     i2u109_40:
  5748   001050                     
  5749                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 83:         INT0_ISR();
  5750   001050  EC03  F013         	call	_INT0_ISR	;wreg free
  5751   001054                     i2l2357:
  5752                           
  5753                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 85:     if((1 == INTCON3bits.INT1E) && (1 == 
      +                          INTCON3bits.INT1F)){
  5754   001054  A6F0               	btfss	240,3,c	;volatile
  5755   001056  EF2F  F008         	goto	i2u110_41
  5756   00105A  EF31  F008         	goto	i2u110_40
  5757   00105E                     i2u110_41:
  5758   00105E  EF3A  F008         	goto	i2l2363
  5759   001062                     i2u110_40:
  5760   001062  A0F0               	btfss	240,0,c	;volatile
  5761   001064  EF36  F008         	goto	i2u111_41
  5762   001068  EF38  F008         	goto	i2u111_40
  5763   00106C                     i2u111_41:
  5764   00106C  EF3A  F008         	goto	i2l2363
  5765   001070                     i2u111_40:
  5766   001070                     
  5767                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 86:         INT1_ISR();
  5768   001070  ECEC  F012         	call	_INT1_ISR	;wreg free
  5769   001074                     i2l2363:
  5770                           
  5771                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 88:     if((1 == INTCON3bits.INT2IE) && (1 ==
      +                           INTCON3bits.INT2IF)){
  5772   001074  A8F0               	btfss	240,4,c	;volatile
  5773   001076  EF3F  F008         	goto	i2u112_41
  5774   00107A  EF41  F008         	goto	i2u112_40
  5775   00107E                     i2u112_41:
  5776   00107E  EF4A  F008         	goto	i2l2369
  5777   001082                     i2u112_40:
  5778   001082  A2F0               	btfss	240,1,c	;volatile
  5779   001084  EF46  F008         	goto	i2u113_41
  5780   001088  EF48  F008         	goto	i2u113_40
  5781   00108C                     i2u113_41:
  5782   00108C  EF4A  F008         	goto	i2l2369
  5783   001090                     i2u113_40:
  5784   001090                     
  5785                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 89:         INT2_ISR();
  5786   001090  ECD5  F012         	call	_INT2_ISR	;wreg free
  5787   001094                     i2l2369:
  5788                           
  5789                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 94:     if((1 == INTCONbits.RBIE) && (1 == IN
      +                          TCONbits.RBIF) &&
  5790   001094  A6F2               	btfss	242,3,c	;volatile
  5791   001096  EF4F  F008         	goto	i2u114_41
  5792   00109A  EF51  F008         	goto	i2u114_40
  5793   00109E                     i2u114_41:
  5794   00109E  EF6C  F008         	goto	i2l2381
  5795   0010A2                     i2u114_40:
  5796   0010A2  A0F2               	btfss	242,0,c	;volatile
  5797   0010A4  EF56  F008         	goto	i2u115_41
  5798   0010A8  EF58  F008         	goto	i2u115_40
  5799   0010AC                     i2u115_41:
  5800   0010AC  EF6C  F008         	goto	i2l2381
  5801   0010B0                     i2u115_40:
  5802   0010B0  A881               	btfss	129,4,c	;volatile
  5803   0010B2  EF5D  F008         	goto	i2u116_41
  5804   0010B6  EF5F  F008         	goto	i2u116_40
  5805   0010BA                     i2u116_41:
  5806   0010BA  EF6C  F008         	goto	i2l2381
  5807   0010BE                     i2u116_40:
  5808   0010BE  0418               	decf	_RB4_Flag^0,w,c	;volatile
  5809   0010C0  A4D8               	btfss	status,2,c
  5810   0010C2  EF65  F008         	goto	i2u117_41
  5811   0010C6  EF67  F008         	goto	i2u117_40
  5812   0010CA                     i2u117_41:
  5813   0010CA  EF6C  F008         	goto	i2l2381
  5814   0010CE                     i2u117_40:
  5815   0010CE                     
  5816                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 95:        (PORTBbits.RB4 == HIGH) && (RB4_Fl
      +                          ag == 1)){;MCAL/INTERRUPT/mcall_interrupt_manager.c: 96:         RB4_Flag = 0;
  5817   0010CE  0E00               	movlw	0
  5818   0010D0  6E18               	movwf	_RB4_Flag^0,c	;volatile
  5819   0010D2                     
  5820                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 97:         RB4_ISR(0);
  5821   0010D2  0E00               	movlw	0
  5822   0010D4  ECD8  F013         	call	_RB4_ISR
  5823   0010D8                     i2l2381:
  5824                           
  5825                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 99:     if((1 == INTCONbits.RBIE) && (1 == IN
      +                          TCONbits.RBIF) &&
  5826   0010D8  A6F2               	btfss	242,3,c	;volatile
  5827   0010DA  EF71  F008         	goto	i2u118_41
  5828   0010DE  EF73  F008         	goto	i2u118_40
  5829   0010E2                     i2u118_41:
  5830   0010E2  EF8E  F008         	goto	i2l2393
  5831   0010E6                     i2u118_40:
  5832   0010E6  A0F2               	btfss	242,0,c	;volatile
  5833   0010E8  EF78  F008         	goto	i2u119_41
  5834   0010EC  EF7A  F008         	goto	i2u119_40
  5835   0010F0                     i2u119_41:
  5836   0010F0  EF8E  F008         	goto	i2l2393
  5837   0010F4                     i2u119_40:
  5838   0010F4  B881               	btfsc	129,4,c	;volatile
  5839   0010F6  EF7F  F008         	goto	i2u120_41
  5840   0010FA  EF81  F008         	goto	i2u120_40
  5841   0010FE                     i2u120_41:
  5842   0010FE  EF8E  F008         	goto	i2l2393
  5843   001102                     i2u120_40:
  5844   001102  5018               	movf	_RB4_Flag^0,w,c	;volatile
  5845   001104  A4D8               	btfss	status,2,c
  5846   001106  EF87  F008         	goto	i2u121_41
  5847   00110A  EF89  F008         	goto	i2u121_40
  5848   00110E                     i2u121_41:
  5849   00110E  EF8E  F008         	goto	i2l2393
  5850   001112                     i2u121_40:
  5851   001112                     
  5852                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 100:        (PORTBbits.RB4 == LOW) && (RB4_Fl
      +                          ag == 0)){;MCAL/INTERRUPT/mcall_interrupt_manager.c: 101:         RB4_Flag = 1;
  5853   001112  0E01               	movlw	1
  5854   001114  6E18               	movwf	_RB4_Flag^0,c	;volatile
  5855   001116                     
  5856                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 102:         RB4_ISR(1);
  5857   001116  0E01               	movlw	1
  5858   001118  ECD8  F013         	call	_RB4_ISR
  5859   00111C                     i2l2393:
  5860                           
  5861                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 104:     if((1 == INTCONbits.RBIE) && (1 == I
      +                          NTCONbits.RBIF) &&
  5862   00111C  A6F2               	btfss	242,3,c	;volatile
  5863   00111E  EF93  F008         	goto	i2u122_41
  5864   001122  EF95  F008         	goto	i2u122_40
  5865   001126                     i2u122_41:
  5866   001126  EFB0  F008         	goto	i2l2405
  5867   00112A                     i2u122_40:
  5868   00112A  A0F2               	btfss	242,0,c	;volatile
  5869   00112C  EF9A  F008         	goto	i2u123_41
  5870   001130  EF9C  F008         	goto	i2u123_40
  5871   001134                     i2u123_41:
  5872   001134  EFB0  F008         	goto	i2l2405
  5873   001138                     i2u123_40:
  5874   001138  AA81               	btfss	129,5,c	;volatile
  5875   00113A  EFA1  F008         	goto	i2u124_41
  5876   00113E  EFA3  F008         	goto	i2u124_40
  5877   001142                     i2u124_41:
  5878   001142  EFB0  F008         	goto	i2l2405
  5879   001146                     i2u124_40:
  5880   001146  0417               	decf	_RB5_Flag^0,w,c	;volatile
  5881   001148  A4D8               	btfss	status,2,c
  5882   00114A  EFA9  F008         	goto	i2u125_41
  5883   00114E  EFAB  F008         	goto	i2u125_40
  5884   001152                     i2u125_41:
  5885   001152  EFB0  F008         	goto	i2l2405
  5886   001156                     i2u125_40:
  5887   001156                     
  5888                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 105:        (PORTBbits.RB5 == HIGH) && (RB5_F
      +                          lag == 1)){;MCAL/INTERRUPT/mcall_interrupt_manager.c: 106:         RB5_Flag = 0;
  5889   001156  0E00               	movlw	0
  5890   001158  6E17               	movwf	_RB5_Flag^0,c	;volatile
  5891   00115A                     
  5892                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 107:         RB5_ISR(0);
  5893   00115A  0E00               	movlw	0
  5894   00115C  ECCB  F013         	call	_RB5_ISR
  5895   001160                     i2l2405:
  5896                           
  5897                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 109:     if((1 == INTCONbits.RBIE) && (1 == I
      +                          NTCONbits.RBIF) &&
  5898   001160  A6F2               	btfss	242,3,c	;volatile
  5899   001162  EFB5  F008         	goto	i2u126_41
  5900   001166  EFB7  F008         	goto	i2u126_40
  5901   00116A                     i2u126_41:
  5902   00116A  EFD2  F008         	goto	i2l2417
  5903   00116E                     i2u126_40:
  5904   00116E  A0F2               	btfss	242,0,c	;volatile
  5905   001170  EFBC  F008         	goto	i2u127_41
  5906   001174  EFBE  F008         	goto	i2u127_40
  5907   001178                     i2u127_41:
  5908   001178  EFD2  F008         	goto	i2l2417
  5909   00117C                     i2u127_40:
  5910   00117C  BA81               	btfsc	129,5,c	;volatile
  5911   00117E  EFC3  F008         	goto	i2u128_41
  5912   001182  EFC5  F008         	goto	i2u128_40
  5913   001186                     i2u128_41:
  5914   001186  EFD2  F008         	goto	i2l2417
  5915   00118A                     i2u128_40:
  5916   00118A  5017               	movf	_RB5_Flag^0,w,c	;volatile
  5917   00118C  A4D8               	btfss	status,2,c
  5918   00118E  EFCB  F008         	goto	i2u129_41
  5919   001192  EFCD  F008         	goto	i2u129_40
  5920   001196                     i2u129_41:
  5921   001196  EFD2  F008         	goto	i2l2417
  5922   00119A                     i2u129_40:
  5923   00119A                     
  5924                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 110:        (PORTBbits.RB5 == LOW) && (RB5_Fl
      +                          ag == 0)){;MCAL/INTERRUPT/mcall_interrupt_manager.c: 111:         RB5_Flag = 1;
  5925   00119A  0E01               	movlw	1
  5926   00119C  6E17               	movwf	_RB5_Flag^0,c	;volatile
  5927   00119E                     
  5928                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 112:         RB5_ISR(1);
  5929   00119E  0E01               	movlw	1
  5930   0011A0  ECCB  F013         	call	_RB5_ISR
  5931   0011A4                     i2l2417:
  5932                           
  5933                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 114:     if((1 == INTCONbits.RBIE) && (1 == I
      +                          NTCONbits.RBIF) &&
  5934   0011A4  A6F2               	btfss	242,3,c	;volatile
  5935   0011A6  EFD7  F008         	goto	i2u130_41
  5936   0011AA  EFD9  F008         	goto	i2u130_40
  5937   0011AE                     i2u130_41:
  5938   0011AE  EFF4  F008         	goto	i2l2429
  5939   0011B2                     i2u130_40:
  5940   0011B2  A0F2               	btfss	242,0,c	;volatile
  5941   0011B4  EFDE  F008         	goto	i2u131_41
  5942   0011B8  EFE0  F008         	goto	i2u131_40
  5943   0011BC                     i2u131_41:
  5944   0011BC  EFF4  F008         	goto	i2l2429
  5945   0011C0                     i2u131_40:
  5946   0011C0  AC81               	btfss	129,6,c	;volatile
  5947   0011C2  EFE5  F008         	goto	i2u132_41
  5948   0011C6  EFE7  F008         	goto	i2u132_40
  5949   0011CA                     i2u132_41:
  5950   0011CA  EFF4  F008         	goto	i2l2429
  5951   0011CE                     i2u132_40:
  5952   0011CE  0416               	decf	_RB6_Flag^0,w,c	;volatile
  5953   0011D0  A4D8               	btfss	status,2,c
  5954   0011D2  EFED  F008         	goto	i2u133_41
  5955   0011D6  EFEF  F008         	goto	i2u133_40
  5956   0011DA                     i2u133_41:
  5957   0011DA  EFF4  F008         	goto	i2l2429
  5958   0011DE                     i2u133_40:
  5959   0011DE                     
  5960                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 115:        (PORTBbits.RB6 == HIGH) && (RB6_F
      +                          lag == 1)){;MCAL/INTERRUPT/mcall_interrupt_manager.c: 116:         RB6_Flag = 0;
  5961   0011DE  0E00               	movlw	0
  5962   0011E0  6E16               	movwf	_RB6_Flag^0,c	;volatile
  5963   0011E2                     
  5964                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 117:         RB6_ISR(0);
  5965   0011E2  0E00               	movlw	0
  5966   0011E4  ECBE  F013         	call	_RB6_ISR
  5967   0011E8                     i2l2429:
  5968                           
  5969                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 119:     if((1 == INTCONbits.RBIE) && (1 == I
      +                          NTCONbits.RBIF) &&
  5970   0011E8  A6F2               	btfss	242,3,c	;volatile
  5971   0011EA  EFF9  F008         	goto	i2u134_41
  5972   0011EE  EFFB  F008         	goto	i2u134_40
  5973   0011F2                     i2u134_41:
  5974   0011F2  EF16  F009         	goto	i2l2441
  5975   0011F6                     i2u134_40:
  5976   0011F6  A0F2               	btfss	242,0,c	;volatile
  5977   0011F8  EF00  F009         	goto	i2u135_41
  5978   0011FC  EF02  F009         	goto	i2u135_40
  5979   001200                     i2u135_41:
  5980   001200  EF16  F009         	goto	i2l2441
  5981   001204                     i2u135_40:
  5982   001204  BC81               	btfsc	129,6,c	;volatile
  5983   001206  EF07  F009         	goto	i2u136_41
  5984   00120A  EF09  F009         	goto	i2u136_40
  5985   00120E                     i2u136_41:
  5986   00120E  EF16  F009         	goto	i2l2441
  5987   001212                     i2u136_40:
  5988   001212  5016               	movf	_RB6_Flag^0,w,c	;volatile
  5989   001214  A4D8               	btfss	status,2,c
  5990   001216  EF0F  F009         	goto	i2u137_41
  5991   00121A  EF11  F009         	goto	i2u137_40
  5992   00121E                     i2u137_41:
  5993   00121E  EF16  F009         	goto	i2l2441
  5994   001222                     i2u137_40:
  5995   001222                     
  5996                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 120:        (PORTBbits.RB6 == LOW) && (RB6_Fl
      +                          ag == 0)){;MCAL/INTERRUPT/mcall_interrupt_manager.c: 121:         RB6_Flag = 1;
  5997   001222  0E01               	movlw	1
  5998   001224  6E16               	movwf	_RB6_Flag^0,c	;volatile
  5999   001226                     
  6000                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 122:         RB6_ISR(1);
  6001   001226  0E01               	movlw	1
  6002   001228  ECBE  F013         	call	_RB6_ISR
  6003   00122C                     i2l2441:
  6004                           
  6005                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 124:     if((1 == INTCONbits.RBIE) && (1 == I
      +                          NTCONbits.RBIF) &&
  6006   00122C  A6F2               	btfss	242,3,c	;volatile
  6007   00122E  EF1B  F009         	goto	i2u138_41
  6008   001232  EF1D  F009         	goto	i2u138_40
  6009   001236                     i2u138_41:
  6010   001236  EF38  F009         	goto	i2l2453
  6011   00123A                     i2u138_40:
  6012   00123A  A0F2               	btfss	242,0,c	;volatile
  6013   00123C  EF22  F009         	goto	i2u139_41
  6014   001240  EF24  F009         	goto	i2u139_40
  6015   001244                     i2u139_41:
  6016   001244  EF38  F009         	goto	i2l2453
  6017   001248                     i2u139_40:
  6018   001248  AE81               	btfss	129,7,c	;volatile
  6019   00124A  EF29  F009         	goto	i2u140_41
  6020   00124E  EF2B  F009         	goto	i2u140_40
  6021   001252                     i2u140_41:
  6022   001252  EF38  F009         	goto	i2l2453
  6023   001256                     i2u140_40:
  6024   001256  0415               	decf	_RB7_Flag^0,w,c	;volatile
  6025   001258  A4D8               	btfss	status,2,c
  6026   00125A  EF31  F009         	goto	i2u141_41
  6027   00125E  EF33  F009         	goto	i2u141_40
  6028   001262                     i2u141_41:
  6029   001262  EF38  F009         	goto	i2l2453
  6030   001266                     i2u141_40:
  6031   001266                     
  6032                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 125:        (PORTBbits.RB7 == HIGH) && (RB7_F
      +                          lag == 1)){;MCAL/INTERRUPT/mcall_interrupt_manager.c: 126:         RB7_Flag = 0;
  6033   001266  0E00               	movlw	0
  6034   001268  6E15               	movwf	_RB7_Flag^0,c	;volatile
  6035   00126A                     
  6036                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 127:         RB7_ISR(0);
  6037   00126A  0E00               	movlw	0
  6038   00126C  ECB1  F013         	call	_RB7_ISR
  6039   001270                     i2l2453:
  6040                           
  6041                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 129:     if((1 == INTCONbits.RBIE) && (1 == I
      +                          NTCONbits.RBIF) &&
  6042   001270  A6F2               	btfss	242,3,c	;volatile
  6043   001272  EF3D  F009         	goto	i2u142_41
  6044   001276  EF3F  F009         	goto	i2u142_40
  6045   00127A                     i2u142_41:
  6046   00127A  EF5A  F009         	goto	i2l366
  6047   00127E                     i2u142_40:
  6048   00127E  A0F2               	btfss	242,0,c	;volatile
  6049   001280  EF44  F009         	goto	i2u143_41
  6050   001284  EF46  F009         	goto	i2u143_40
  6051   001288                     i2u143_41:
  6052   001288  EF5A  F009         	goto	i2l366
  6053   00128C                     i2u143_40:
  6054   00128C  BE81               	btfsc	129,7,c	;volatile
  6055   00128E  EF4B  F009         	goto	i2u144_41
  6056   001292  EF4D  F009         	goto	i2u144_40
  6057   001296                     i2u144_41:
  6058   001296  EF5A  F009         	goto	i2l366
  6059   00129A                     i2u144_40:
  6060   00129A  5015               	movf	_RB7_Flag^0,w,c	;volatile
  6061   00129C  A4D8               	btfss	status,2,c
  6062   00129E  EF53  F009         	goto	i2u145_41
  6063   0012A2  EF55  F009         	goto	i2u145_40
  6064   0012A6                     i2u145_41:
  6065   0012A6  EF5A  F009         	goto	i2l366
  6066   0012AA                     i2u145_40:
  6067   0012AA                     
  6068                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 130:        (PORTBbits.RB7 == LOW) && (RB7_Fl
      +                          ag == 0)){;MCAL/INTERRUPT/mcall_interrupt_manager.c: 131:         RB7_Flag = 1;
  6069   0012AA  0E01               	movlw	1
  6070   0012AC  6E15               	movwf	_RB7_Flag^0,c	;volatile
  6071   0012AE                     
  6072                           ;MCAL/INTERRUPT/mcall_interrupt_manager.c: 132:         RB7_ISR(1);
  6073   0012AE  0E01               	movlw	1
  6074   0012B0  ECB1  F013         	call	_RB7_ISR
  6075   0012B4                     i2l366:
  6076   0012B4  C038  FFFB         	movff	??_InterruptManager+1,pclatu
  6077   0012B8  C037  FFFA         	movff	??_InterruptManager,pclath
  6078   0012BC  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6079   0012BE  0011               	retfie		f
  6080   0012C0                     __end_of_InterruptManager:
  6081                           	callstack 0
  6082                           
  6083 ;; *************** function _RB7_ISR *****************
  6084 ;; Defined at:
  6085 ;;		line 526 in file "MCAL/INTERRUPT/mcal_external_interrupt.c"
  6086 ;; Parameters:    Size  Location     Type
  6087 ;;  RB7_Source      1    wreg     unsigned char 
  6088 ;; Auto vars:     Size  Location     Type
  6089 ;;  RB7_Source      1    0[COMRAM] unsigned char 
  6090 ;; Return value:  Size  Location     Type
  6091 ;;                  1    wreg      void 
  6092 ;; Registers used:
  6093 ;;		wreg, status,2, status,0
  6094 ;; Tracked objects:
  6095 ;;		On entry : 0/0
  6096 ;;		On exit  : 0/0
  6097 ;;		Unchanged: 0/0
  6098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6100 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6102 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6103 ;;Total ram usage:        1 bytes
  6104 ;; Hardware stack levels used: 1
  6105 ;; This function calls:
  6106 ;;		Nothing
  6107 ;; This function is called by:
  6108 ;;		_InterruptManager
  6109 ;; This function uses a non-reentrant model
  6110 ;;
  6111                           
  6112                           	psect	text42
  6113   002762                     __ptext42:
  6114                           	callstack 0
  6115   002762                     _RB7_ISR:
  6116                           	callstack 21
  6117                           
  6118                           ;incstack = 0
  6119                           ;RB7_ISR@RB7_Source stored from wreg
  6120   002762  6E36               	movwf	RB7_ISR@RB7_Source^0,c
  6121   002764                     
  6122                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 528:     (INTCONbits.RBIF=0);
  6123   002764  90F2               	bcf	242,0,c	;volatile
  6124   002766                     
  6125                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 530:     if(0 == RB7_Source){
  6126   002766  5036               	movf	RB7_ISR@RB7_Source^0,w,c
  6127   002768  A4D8               	btfss	status,2,c
  6128   00276A  EFB9  F013         	goto	i2u86_41
  6129   00276E  EFBB  F013         	goto	i2u86_40
  6130   002772                     i2u86_41:
  6131   002772  EFBD  F013         	goto	i2l2141
  6132   002776                     i2u86_40:
  6133   002776  EFBD  F013         	goto	i2l561
  6134   00277A                     i2l2141:
  6135   00277A                     i2l561:
  6136   00277A  0012               	return		;funcret
  6137   00277C                     __end_of_RB7_ISR:
  6138                           	callstack 0
  6139                           
  6140 ;; *************** function _RB6_ISR *****************
  6141 ;; Defined at:
  6142 ;;		line 511 in file "MCAL/INTERRUPT/mcal_external_interrupt.c"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;  RB6_Source      1    wreg     unsigned char 
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;  RB6_Source      1    0[COMRAM] unsigned char 
  6147 ;; Return value:  Size  Location     Type
  6148 ;;                  1    wreg      void 
  6149 ;; Registers used:
  6150 ;;		wreg, status,2, status,0
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6157 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6159 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6160 ;;Total ram usage:        1 bytes
  6161 ;; Hardware stack levels used: 1
  6162 ;; This function calls:
  6163 ;;		Nothing
  6164 ;; This function is called by:
  6165 ;;		_InterruptManager
  6166 ;; This function uses a non-reentrant model
  6167 ;;
  6168                           
  6169                           	psect	text43
  6170   00277C                     __ptext43:
  6171                           	callstack 0
  6172   00277C                     _RB6_ISR:
  6173                           	callstack 21
  6174                           
  6175                           ;incstack = 0
  6176                           ;RB6_ISR@RB6_Source stored from wreg
  6177   00277C  6E36               	movwf	RB6_ISR@RB6_Source^0,c
  6178   00277E                     
  6179                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 513:     (INTCONbits.RBIF=0);
  6180   00277E  90F2               	bcf	242,0,c	;volatile
  6181   002780                     
  6182                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 515:     if(0 == RB6_Source){
  6183   002780  5036               	movf	RB6_ISR@RB6_Source^0,w,c
  6184   002782  A4D8               	btfss	status,2,c
  6185   002784  EFC6  F013         	goto	i2u85_41
  6186   002788  EFC8  F013         	goto	i2u85_40
  6187   00278C                     i2u85_41:
  6188   00278C  EFCA  F013         	goto	i2l2131
  6189   002790                     i2u85_40:
  6190   002790  EFCA  F013         	goto	i2l553
  6191   002794                     i2l2131:
  6192   002794                     i2l553:
  6193   002794  0012               	return		;funcret
  6194   002796                     __end_of_RB6_ISR:
  6195                           	callstack 0
  6196                           
  6197 ;; *************** function _RB5_ISR *****************
  6198 ;; Defined at:
  6199 ;;		line 496 in file "MCAL/INTERRUPT/mcal_external_interrupt.c"
  6200 ;; Parameters:    Size  Location     Type
  6201 ;;  RB5_Source      1    wreg     unsigned char 
  6202 ;; Auto vars:     Size  Location     Type
  6203 ;;  RB5_Source      1    0[COMRAM] unsigned char 
  6204 ;; Return value:  Size  Location     Type
  6205 ;;                  1    wreg      void 
  6206 ;; Registers used:
  6207 ;;		wreg, status,2, status,0
  6208 ;; Tracked objects:
  6209 ;;		On entry : 0/0
  6210 ;;		On exit  : 0/0
  6211 ;;		Unchanged: 0/0
  6212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;Total ram usage:        1 bytes
  6218 ;; Hardware stack levels used: 1
  6219 ;; This function calls:
  6220 ;;		Nothing
  6221 ;; This function is called by:
  6222 ;;		_InterruptManager
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           	psect	text44
  6227   002796                     __ptext44:
  6228                           	callstack 0
  6229   002796                     _RB5_ISR:
  6230                           	callstack 21
  6231                           
  6232                           ;incstack = 0
  6233                           ;RB5_ISR@RB5_Source stored from wreg
  6234   002796  6E36               	movwf	RB5_ISR@RB5_Source^0,c
  6235   002798                     
  6236                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 498:     (INTCONbits.RBIF=0);
  6237   002798  90F2               	bcf	242,0,c	;volatile
  6238   00279A                     
  6239                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 500:     if(0 == RB5_Source){
  6240   00279A  5036               	movf	RB5_ISR@RB5_Source^0,w,c
  6241   00279C  A4D8               	btfss	status,2,c
  6242   00279E  EFD3  F013         	goto	i2u84_41
  6243   0027A2  EFD5  F013         	goto	i2u84_40
  6244   0027A6                     i2u84_41:
  6245   0027A6  EFD7  F013         	goto	i2l2121
  6246   0027AA                     i2u84_40:
  6247   0027AA  EFD7  F013         	goto	i2l545
  6248   0027AE                     i2l2121:
  6249   0027AE                     i2l545:
  6250   0027AE  0012               	return		;funcret
  6251   0027B0                     __end_of_RB5_ISR:
  6252                           	callstack 0
  6253                           
  6254 ;; *************** function _RB4_ISR *****************
  6255 ;; Defined at:
  6256 ;;		line 481 in file "MCAL/INTERRUPT/mcal_external_interrupt.c"
  6257 ;; Parameters:    Size  Location     Type
  6258 ;;  RB4_Source      1    wreg     unsigned char 
  6259 ;; Auto vars:     Size  Location     Type
  6260 ;;  RB4_Source      1    0[COMRAM] unsigned char 
  6261 ;; Return value:  Size  Location     Type
  6262 ;;                  1    wreg      void 
  6263 ;; Registers used:
  6264 ;;		wreg, status,2, status,0
  6265 ;; Tracked objects:
  6266 ;;		On entry : 0/0
  6267 ;;		On exit  : 0/0
  6268 ;;		Unchanged: 0/0
  6269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6273 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6274 ;;Total ram usage:        1 bytes
  6275 ;; Hardware stack levels used: 1
  6276 ;; This function calls:
  6277 ;;		Nothing
  6278 ;; This function is called by:
  6279 ;;		_InterruptManager
  6280 ;; This function uses a non-reentrant model
  6281 ;;
  6282                           
  6283                           	psect	text45
  6284   0027B0                     __ptext45:
  6285                           	callstack 0
  6286   0027B0                     _RB4_ISR:
  6287                           	callstack 21
  6288                           
  6289                           ;incstack = 0
  6290                           ;RB4_ISR@RB4_Source stored from wreg
  6291   0027B0  6E36               	movwf	RB4_ISR@RB4_Source^0,c
  6292   0027B2                     
  6293                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 483:     (INTCONbits.RBIF=0);
  6294   0027B2  90F2               	bcf	242,0,c	;volatile
  6295   0027B4                     
  6296                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 485:     if(0 == RB4_Source){
  6297   0027B4  5036               	movf	RB4_ISR@RB4_Source^0,w,c
  6298   0027B6  A4D8               	btfss	status,2,c
  6299   0027B8  EFE0  F013         	goto	i2u83_41
  6300   0027BC  EFE2  F013         	goto	i2u83_40
  6301   0027C0                     i2u83_41:
  6302   0027C0  EFE4  F013         	goto	i2l2111
  6303   0027C4                     i2u83_40:
  6304   0027C4  EFE4  F013         	goto	i2l537
  6305   0027C8                     i2l2111:
  6306   0027C8                     i2l537:
  6307   0027C8  0012               	return		;funcret
  6308   0027CA                     __end_of_RB4_ISR:
  6309                           	callstack 0
  6310                           
  6311 ;; *************** function _INT2_ISR *****************
  6312 ;; Defined at:
  6313 ;;		line 107 in file "MCAL/INTERRUPT/mcal_external_interrupt.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;		None
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;		None
  6318 ;; Return value:  Size  Location     Type
  6319 ;;                  1    wreg      void 
  6320 ;; Registers used:
  6321 ;;		wreg, status,2, status,0, pcl, pclath, pclatu, tosl, cstack
  6322 ;; Tracked objects:
  6323 ;;		On entry : 0/0
  6324 ;;		On exit  : 0/0
  6325 ;;		Unchanged: 0/0
  6326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6331 ;;Total ram usage:        0 bytes
  6332 ;; Hardware stack levels used: 1
  6333 ;; Hardware stack levels required when called: 1
  6334 ;; This function calls:
  6335 ;;		NULL
  6336 ;;		_APP_INT_ISR
  6337 ;; This function is called by:
  6338 ;;		_InterruptManager
  6339 ;; This function uses a non-reentrant model
  6340 ;;
  6341                           
  6342                           	psect	text46
  6343   0025AA                     __ptext46:
  6344                           	callstack 0
  6345   0025AA                     _INT2_ISR:
  6346                           	callstack 20
  6347   0025AA                     
  6348                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 109:     (INTCON3bits.INT2F=0);
  6349   0025AA  92F0               	bcf	240,1,c	;volatile
  6350   0025AC                     
  6351                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 111:     if(INT2_InterruptHandler){INT2_Inter
      +                          ruptHandler();}
  6352   0025AC  5071               	movf	_INT2_InterruptHandler^0,w,c
  6353   0025AE  1072               	iorwf	(_INT2_InterruptHandler+1)^0,w,c
  6354   0025B0  B4D8               	btfsc	status,2,c
  6355   0025B2  EFDD  F012         	goto	i2u81_41
  6356   0025B6  EFDF  F012         	goto	i2u81_40
  6357   0025BA                     i2u81_41:
  6358   0025BA  EFEB  F012         	goto	i2l435
  6359   0025BE                     i2u81_40:
  6360   0025BE  D802               	call	i2u82_48
  6361   0025C0  EFEB  F012         	goto	i2u82_49
  6362   0025C4                     i2u82_48:
  6363   0025C4  0005               	push	
  6364   0025C6  6EFA               	movwf	pclath,c
  6365   0025C8  5071               	movf	_INT2_InterruptHandler^0,w,c
  6366   0025CA  6EFD               	movwf	tosl,c
  6367   0025CC  5072               	movf	(_INT2_InterruptHandler+1)^0,w,c
  6368   0025CE  6EFE               	movwf	tosh,c
  6369   0025D0  6AFF               	clrf	tosu,c
  6370   0025D2  50FA               	movf	pclath,w,c
  6371   0025D4  0012               	return		;indir
  6372   0025D6                     i2u82_49:
  6373   0025D6                     i2l435:
  6374   0025D6  0012               	return		;funcret
  6375   0025D8                     __end_of_INT2_ISR:
  6376                           	callstack 0
  6377                           
  6378 ;; *************** function _INT1_ISR *****************
  6379 ;; Defined at:
  6380 ;;		line 98 in file "MCAL/INTERRUPT/mcal_external_interrupt.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;		None
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;		None
  6385 ;; Return value:  Size  Location     Type
  6386 ;;                  1    wreg      void 
  6387 ;; Registers used:
  6388 ;;		wreg, status,2, status,0, pcl, pclath, pclatu, tosl, cstack
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6398 ;;Total ram usage:        0 bytes
  6399 ;; Hardware stack levels used: 1
  6400 ;; Hardware stack levels required when called: 1
  6401 ;; This function calls:
  6402 ;;		NULL
  6403 ;;		_APP_INT_ISR
  6404 ;; This function is called by:
  6405 ;;		_InterruptManager
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           	psect	text47
  6410   0025D8                     __ptext47:
  6411                           	callstack 0
  6412   0025D8                     _INT1_ISR:
  6413                           	callstack 20
  6414   0025D8                     
  6415                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 100:     (INTCON3bits.INT1F=0);
  6416   0025D8  90F0               	bcf	240,0,c	;volatile
  6417   0025DA                     
  6418                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 102:     if(INT1_InterruptHandler){INT1_Inter
      +                          ruptHandler();}
  6419   0025DA  5073               	movf	_INT1_InterruptHandler^0,w,c
  6420   0025DC  1074               	iorwf	(_INT1_InterruptHandler+1)^0,w,c
  6421   0025DE  B4D8               	btfsc	status,2,c
  6422   0025E0  EFF4  F012         	goto	i2u79_41
  6423   0025E4  EFF6  F012         	goto	i2u79_40
  6424   0025E8                     i2u79_41:
  6425   0025E8  EF02  F013         	goto	i2l431
  6426   0025EC                     i2u79_40:
  6427   0025EC  D802               	call	i2u80_48
  6428   0025EE  EF02  F013         	goto	i2u80_49
  6429   0025F2                     i2u80_48:
  6430   0025F2  0005               	push	
  6431   0025F4  6EFA               	movwf	pclath,c
  6432   0025F6  5073               	movf	_INT1_InterruptHandler^0,w,c
  6433   0025F8  6EFD               	movwf	tosl,c
  6434   0025FA  5074               	movf	(_INT1_InterruptHandler+1)^0,w,c
  6435   0025FC  6EFE               	movwf	tosh,c
  6436   0025FE  6AFF               	clrf	tosu,c
  6437   002600  50FA               	movf	pclath,w,c
  6438   002602  0012               	return		;indir
  6439   002604                     i2u80_49:
  6440   002604                     i2l431:
  6441   002604  0012               	return		;funcret
  6442   002606                     __end_of_INT1_ISR:
  6443                           	callstack 0
  6444                           
  6445 ;; *************** function _INT0_ISR *****************
  6446 ;; Defined at:
  6447 ;;		line 89 in file "MCAL/INTERRUPT/mcal_external_interrupt.c"
  6448 ;; Parameters:    Size  Location     Type
  6449 ;;		None
  6450 ;; Auto vars:     Size  Location     Type
  6451 ;;		None
  6452 ;; Return value:  Size  Location     Type
  6453 ;;                  1    wreg      void 
  6454 ;; Registers used:
  6455 ;;		wreg, status,2, status,0, pcl, pclath, pclatu, tosl, cstack
  6456 ;; Tracked objects:
  6457 ;;		On entry : 0/0
  6458 ;;		On exit  : 0/0
  6459 ;;		Unchanged: 0/0
  6460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6465 ;;Total ram usage:        0 bytes
  6466 ;; Hardware stack levels used: 1
  6467 ;; Hardware stack levels required when called: 1
  6468 ;; This function calls:
  6469 ;;		NULL
  6470 ;;		_APP_INT_ISR
  6471 ;; This function is called by:
  6472 ;;		_InterruptManager
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476                           	psect	text48
  6477   002606                     __ptext48:
  6478                           	callstack 0
  6479   002606                     _INT0_ISR:
  6480                           	callstack 20
  6481   002606                     
  6482                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 91:     (INTCONbits.INT0F=0);
  6483   002606  92F2               	bcf	242,1,c	;volatile
  6484   002608                     
  6485                           ;MCAL/INTERRUPT/mcal_external_interrupt.c: 93:     if(INT0_InterruptHandler){INT0_Interr
      +                          uptHandler();}
  6486   002608  5075               	movf	_INT0_InterruptHandler^0,w,c
  6487   00260A  1076               	iorwf	(_INT0_InterruptHandler+1)^0,w,c
  6488   00260C  B4D8               	btfsc	status,2,c
  6489   00260E  EF0B  F013         	goto	i2u77_41
  6490   002612  EF0D  F013         	goto	i2u77_40
  6491   002616                     i2u77_41:
  6492   002616  EF19  F013         	goto	i2l427
  6493   00261A                     i2u77_40:
  6494   00261A  D802               	call	i2u78_48
  6495   00261C  EF19  F013         	goto	i2u78_49
  6496   002620                     i2u78_48:
  6497   002620  0005               	push	
  6498   002622  6EFA               	movwf	pclath,c
  6499   002624  5075               	movf	_INT0_InterruptHandler^0,w,c
  6500   002626  6EFD               	movwf	tosl,c
  6501   002628  5076               	movf	(_INT0_InterruptHandler+1)^0,w,c
  6502   00262A  6EFE               	movwf	tosh,c
  6503   00262C  6AFF               	clrf	tosu,c
  6504   00262E  50FA               	movf	pclath,w,c
  6505   002630  0012               	return		;indir
  6506   002632                     i2u78_49:
  6507   002632                     i2l427:
  6508   002632  0012               	return		;funcret
  6509   002634                     __end_of_INT0_ISR:
  6510                           	callstack 0
  6511                           
  6512 ;; *************** function _APP_INT_ISR *****************
  6513 ;; Defined at:
  6514 ;;		line 100 in file "app.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;		None
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;		None
  6519 ;; Return value:  Size  Location     Type
  6520 ;;                  1    wreg      void 
  6521 ;; Registers used:
  6522 ;;		wreg, status,2
  6523 ;; Tracked objects:
  6524 ;;		On entry : 0/0
  6525 ;;		On exit  : 0/0
  6526 ;;		Unchanged: 0/0
  6527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6532 ;;Total ram usage:        0 bytes
  6533 ;; Hardware stack levels used: 1
  6534 ;; This function calls:
  6535 ;;		Nothing
  6536 ;; This function is called by:
  6537 ;;		_INT0_ISR
  6538 ;;		_INT1_ISR
  6539 ;;		_INT2_ISR
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           	psect	text49
  6544   002082                     __ptext49:
  6545                           	callstack 0
  6546   002082                     _APP_INT_ISR:
  6547                           	callstack 20
  6548   002082                     
  6549                           ;app.c: 101:     if((PORTCbits.RC2==HIGH) && (PORTCbits.RC3==HIGH) && (PORTBbits.RB1==HI
      +                          GH)){
  6550   002082  A482               	btfss	130,2,c	;volatile
  6551   002084  EF46  F010         	goto	i2u69_41
  6552   002088  EF48  F010         	goto	i2u69_40
  6553   00208C                     i2u69_41:
  6554   00208C  EF5A  F010         	goto	i2l682
  6555   002090                     i2u69_40:
  6556   002090  A682               	btfss	130,3,c	;volatile
  6557   002092  EF4D  F010         	goto	i2u70_41
  6558   002096  EF4F  F010         	goto	i2u70_40
  6559   00209A                     i2u70_41:
  6560   00209A  EF5A  F010         	goto	i2l682
  6561   00209E                     i2u70_40:
  6562   00209E  A281               	btfss	129,1,c	;volatile
  6563   0020A0  EF54  F010         	goto	i2u71_41
  6564   0020A4  EF56  F010         	goto	i2u71_40
  6565   0020A8                     i2u71_41:
  6566   0020A8  EF5A  F010         	goto	i2l682
  6567   0020AC                     i2u71_40:
  6568   0020AC                     
  6569                           ;app.c: 102:        flag_mode=1;
  6570   0020AC  0E01               	movlw	1
  6571   0020AE  6E77               	movwf	_flag_mode^0,c
  6572                           
  6573                           ;app.c: 103:     }
  6574   0020B0  EF71  F010         	goto	i2l685
  6575   0020B4                     i2l682:
  6576   0020B4  A082               	btfss	130,0,c	;volatile
  6577   0020B6  EF5F  F010         	goto	i2u72_41
  6578   0020BA  EF61  F010         	goto	i2u72_40
  6579   0020BE                     i2u72_41:
  6580   0020BE  EF71  F010         	goto	i2l685
  6581   0020C2                     i2u72_40:
  6582   0020C2  AA82               	btfss	130,5,c	;volatile
  6583   0020C4  EF66  F010         	goto	i2u73_41
  6584   0020C8  EF68  F010         	goto	i2u73_40
  6585   0020CC                     i2u73_41:
  6586   0020CC  EF71  F010         	goto	i2l685
  6587   0020D0                     i2u73_40:
  6588   0020D0  B281               	btfsc	129,1,c	;volatile
  6589   0020D2  EF6D  F010         	goto	i2u74_41
  6590   0020D6  EF6F  F010         	goto	i2u74_40
  6591   0020DA                     i2u74_41:
  6592   0020DA  EF71  F010         	goto	i2l685
  6593   0020DE                     i2u74_40:
  6594   0020DE                     
  6595                           ;app.c: 105:        flag_mode=2;
  6596   0020DE  0E02               	movlw	2
  6597   0020E0  6E77               	movwf	_flag_mode^0,c
  6598   0020E2                     i2l685:
  6599   0020E2  0012               	return		;funcret
  6600   0020E4                     __end_of_APP_INT_ISR:
  6601                           	callstack 0
  6602                           
  6603                           	psect	text50
  6604   000000                     __ptext50:
  6605                           	callstack 0
  6606   000000                     
  6607                           	psect	rparam
  6608   000000                     
  6609                           	psect	temp
  6610   00007C                     btemp:
  6611                           	callstack 0
  6612   00007C                     	ds	1
  6613   000000                     int$flags	set	btemp
  6614   000000                     wtemp8	set	btemp+1
  6615   000000                     ttemp5	set	btemp+1
  6616   000000                     ttemp6	set	btemp+4
  6617   000000                     ttemp7	set	btemp+8
  6618                           
  6619                           	psect	config
  6620                           
  6621                           ; Padding undefined space
  6622   300000                     	org	3145728
  6623   300000  FF                 	db	255
  6624                           
  6625                           ;Config register CONFIG1H @ 0x300001
  6626                           ;	Oscillator Selection bits
  6627                           ;	OSC = HS, HS oscillator
  6628                           ;	Fail-Safe Clock Monitor Enable bit
  6629                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  6630                           ;	Internal/External Oscillator Switchover bit
  6631                           ;	IESO = OFF, Oscillator Switchover mode disabled
  6632   300001                     	org	3145729
  6633   300001  02                 	db	2
  6634                           
  6635                           ;Config register CONFIG2L @ 0x300002
  6636                           ;	Power-up Timer Enable bit
  6637                           ;	PWRT = OFF, PWRT disabled
  6638                           ;	Brown-out Reset Enable bits
  6639                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  6640                           ;	Brown Out Reset Voltage bits
  6641                           ;	BORV = 1, 
  6642   300002                     	org	3145730
  6643   300002  09                 	db	9
  6644                           
  6645                           ;Config register CONFIG2H @ 0x300003
  6646                           ;	Watchdog Timer Enable bit
  6647                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  6648                           ;	Watchdog Timer Postscale Select bits
  6649                           ;	WDTPS = 32768, 1:32768
  6650   300003                     	org	3145731
  6651   300003  1E                 	db	30
  6652                           
  6653                           ; Padding undefined space
  6654   300004                     	org	3145732
  6655   300004  FF                 	db	255
  6656                           
  6657                           ;Config register CONFIG3H @ 0x300005
  6658                           ;	CCP2 MUX bit
  6659                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  6660                           ;	PORTB A/D Enable bit
  6661                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  6662                           ;	Low-Power Timer1 Oscillator Enable bit
  6663                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  6664                           ;	MCLR Pin Enable bit
  6665                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  6666   300005                     	org	3145733
  6667   300005  81                 	db	129
  6668                           
  6669                           ;Config register CONFIG4L @ 0x300006
  6670                           ;	Stack Full/Underflow Reset Enable bit
  6671                           ;	STVREN = ON, Stack full/underflow will cause Reset
  6672                           ;	Single-Supply ICSP Enable bit
  6673                           ;	LVP = OFF, Single-Supply ICSP disabled
  6674                           ;	Extended Instruction Set Enable bit
  6675                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  6676                           ;	Background Debugger Enable bit
  6677                           ;	DEBUG = 0x1, unprogrammed default
  6678   300006                     	org	3145734
  6679   300006  81                 	db	129
  6680                           
  6681                           ; Padding undefined space
  6682   300007                     	org	3145735
  6683   300007  FF                 	db	255
  6684                           
  6685                           ;Config register CONFIG5L @ 0x300008
  6686                           ;	Code Protection bit
  6687                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  6688                           ;	Code Protection bit
  6689                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  6690                           ;	Code Protection bit
  6691                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  6692                           ;	Code Protection bit
  6693                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  6694   300008                     	org	3145736
  6695   300008  0F                 	db	15
  6696                           
  6697                           ;Config register CONFIG5H @ 0x300009
  6698                           ;	Boot Block Code Protection bit
  6699                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  6700                           ;	Data EEPROM Code Protection bit
  6701                           ;	CPD = OFF, Data EEPROM not code-protected
  6702   300009                     	org	3145737
  6703   300009  C0                 	db	192
  6704                           
  6705                           ;Config register CONFIG6L @ 0x30000A
  6706                           ;	Write Protection bit
  6707                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  6708                           ;	Write Protection bit
  6709                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  6710                           ;	Write Protection bit
  6711                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  6712                           ;	Write Protection bit
  6713                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  6714   30000A                     	org	3145738
  6715   30000A  0F                 	db	15
  6716                           
  6717                           ;Config register CONFIG6H @ 0x30000B
  6718                           ;	Configuration Register Write Protection bit
  6719                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  6720                           ;	Boot Block Write Protection bit
  6721                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  6722                           ;	Data EEPROM Write Protection bit
  6723                           ;	WRTD = OFF, Data EEPROM not write-protected
  6724   30000B                     	org	3145739
  6725   30000B  E0                 	db	224
  6726                           
  6727                           ;Config register CONFIG7L @ 0x30000C
  6728                           ;	Table Read Protection bit
  6729                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  6730                           ;	Table Read Protection bit
  6731                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  6732                           ;	Table Read Protection bit
  6733                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  6734                           ;	Table Read Protection bit
  6735                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  6736   30000C                     	org	3145740
  6737   30000C  0F                 	db	15
  6738                           
  6739                           ;Config register CONFIG7H @ 0x30000D
  6740                           ;	Boot Block Table Read Protection bit
  6741                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  6742   30000D                     	org	3145741
  6743   30000D  40                 	db	64
  6744                           tosu	equ	0xFFF
  6745                           tosh	equ	0xFFE
  6746                           tosl	equ	0xFFD
  6747                           stkptr	equ	0xFFC
  6748                           pclatu	equ	0xFFB
  6749                           pclath	equ	0xFFA
  6750                           pcl	equ	0xFF9
  6751                           tblptru	equ	0xFF8
  6752                           tblptrh	equ	0xFF7
  6753                           tblptrl	equ	0xFF6
  6754                           tablat	equ	0xFF5
  6755                           prodh	equ	0xFF4
  6756                           prodl	equ	0xFF3
  6757                           indf0	equ	0xFEF
  6758                           postinc0	equ	0xFEE
  6759                           postdec0	equ	0xFED
  6760                           preinc0	equ	0xFEC
  6761                           plusw0	equ	0xFEB
  6762                           fsr0h	equ	0xFEA
  6763                           fsr0l	equ	0xFE9
  6764                           wreg	equ	0xFE8
  6765                           indf1	equ	0xFE7
  6766                           postinc1	equ	0xFE6
  6767                           postdec1	equ	0xFE5
  6768                           preinc1	equ	0xFE4
  6769                           plusw1	equ	0xFE3
  6770                           fsr1h	equ	0xFE2
  6771                           fsr1l	equ	0xFE1
  6772                           bsr	equ	0xFE0
  6773                           indf2	equ	0xFDF
  6774                           postinc2	equ	0xFDE
  6775                           postdec2	equ	0xFDD
  6776                           preinc2	equ	0xFDC
  6777                           plusw2	equ	0xFDB
  6778                           fsr2h	equ	0xFDA
  6779                           fsr2l	equ	0xFD9
  6780                           status	equ	0xFD8

Data Sizes:
    Strings     39
    Constant    0
    Data        101
    BSS         26
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     43     123
    BANK0           128      3      52
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    gpio_pin_direction_init@pin	PTR struct . size(1) Largest target is 6
		 -> car_led_green(COMRAM[2]), car_led_red(COMRAM[2]), car_led_yellow(COMRAM[2]), lcd(COMRAM[6]), 
		 -> lcd$lcd_pins(COMRAM[4]), MY_INT0(BANK0[6]), pedestrian_led_green(COMRAM[2]), pedestrian_led_red(COMRAM[2]), 
		 -> pedestrian_led_yellow(COMRAM[2]), seg_green(COMRAM[5]), seg_green$seven_segment_pins(COMRAM[4]), seg_red(COMRAM[5]), 
		 -> seg_red$seven_segment_pins(COMRAM[4]), 

    gpio_pin_input_init@pin	PTR struct . size(1) Largest target is 6
		 -> MY_INT0(BANK0[6]), 

    gpio_pin_logic_write@pin	PTR struct . size(1) Largest target is 6
		 -> car_led_green(COMRAM[2]), car_led_red(COMRAM[2]), car_led_yellow(COMRAM[2]), lcd(COMRAM[6]), 
		 -> lcd$lcd_pins(COMRAM[4]), pedestrian_led_green(COMRAM[2]), pedestrian_led_red(COMRAM[2]), pedestrian_led_yellow(COMRAM[2]), 
		 -> seg_green(COMRAM[5]), seg_green$seven_segment_pins(COMRAM[4]), seg_red(COMRAM[5]), seg_red$seven_segment_pins(COMRAM[4]), 

    gpio_pin_output_low_init@pin	PTR struct . size(1) Largest target is 6
		 -> car_led_green(COMRAM[2]), car_led_red(COMRAM[2]), car_led_yellow(COMRAM[2]), lcd(COMRAM[6]), 
		 -> lcd$lcd_pins(COMRAM[4]), pedestrian_led_green(COMRAM[2]), pedestrian_led_red(COMRAM[2]), pedestrian_led_yellow(COMRAM[2]), 
		 -> seg_green(COMRAM[5]), seg_green$seven_segment_pins(COMRAM[4]), seg_red(COMRAM[5]), seg_red$seven_segment_pins(COMRAM[4]), 

    gpio_pin_toggle_logic@pin	PTR struct . size(1) Largest target is 2
		 -> car_led_yellow(COMRAM[2]), pedestrian_led_yellow(COMRAM[2]), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> APP_INT_ISR(), NULL(), 

    INT0_set_InterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> APP_INT_ISR(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> APP_INT_ISR(), NULL(), 

    INT1_set_InterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> APP_INT_ISR(), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> APP_INT_ISR(), NULL(), 

    INT2_set_InterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> APP_INT_ISR(), 

    interrupt_INTx_clear_flag@_interrupt	PTR struct . size(1) Largest target is 6
		 -> MY_INT0(BANK0[6]), 

    interrupt_INTx_clear_flag@_interrupt$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> APP_INT_ISR(), 

    interrupt_INTx_disable@_interrupt	PTR struct . size(1) Largest target is 6
		 -> MY_INT0(BANK0[6]), 

    interrupt_INTx_disable@_interrupt$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> APP_INT_ISR(), 

    interrupt_INTx_edge_init@_interrupt	PTR struct . size(1) Largest target is 6
		 -> MY_INT0(BANK0[6]), 

    interrupt_INTx_edge_init@_interrupt$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> APP_INT_ISR(), 

    interrupt_INTx_enable@_interrupt	PTR struct . size(1) Largest target is 6
		 -> MY_INT0(BANK0[6]), 

    interrupt_INTx_enable@_interrupt$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> APP_INT_ISR(), 

    interrupt_INTx_init@_interrupt	PTR struct . size(1) Largest target is 6
		 -> MY_INT0(BANK0[6]), 

    interrupt_INTx_pin_init@_interrupt	PTR struct . size(1) Largest target is 6
		 -> MY_INT0(BANK0[6]), 

    interrupt_INTx_pin_init@_interrupt$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> APP_INT_ISR(), 

    interrupt_RBx_init@_interrupt$EXT_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 0

    interrupt_RBx_init@_interrupt$EXT_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 0

    interrupt_RBx_pin_init@_interrupt$EXT_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 0

    interrupt_RBx_pin_init@_interrupt$EXT_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 0

    INTx_select_InterruptHandler@_interrupt	PTR struct . size(1) Largest target is 6
		 -> MY_INT0(BANK0[6]), 

    INTx_select_InterruptHandler@_interrupt$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> APP_INT_ISR(), 

    latx	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> LATA(BITBIGSFRll[1]), LATB(BITBIGSFRlh[1]), LATC(BITBIGSFRlh[1]), LATD(BITBIGSFRlh[1]), 
		 -> LATE(BITBIGSFRlh[1]), 

    lcd_init@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_char_data@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_char_data_pos@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_command@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_custom_char@_chr	PTR unsigned char  size(1) Largest target is 8
		 -> customChar1(BANK0[8]), customChar2(BANK0[8]), customChar3(BANK0[8]), customChar4(BANK0[8]), 

    lcd_send_custom_char@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_enable@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_nbits@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_string@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_string@str	PTR unsigned char  size(1) Largest target is 9
		 -> STR_4(CODE[9]), STR_5(CODE[9]), STR_6(CODE[9]), STR_7(CODE[9]), 

    lcd_send_string_pos@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    lcd_send_string_pos@str	PTR unsigned char  size(1) Largest target is 9
		 -> STR_4(CODE[9]), STR_5(CODE[9]), STR_6(CODE[9]), STR_7(CODE[9]), 

    lcd_set_curser@lcd	PTR struct . size(1) Largest target is 6
		 -> lcd(COMRAM[6]), 

    led_init@led	PTR struct . size(1) Largest target is 2
		 -> car_led_green(COMRAM[2]), car_led_red(COMRAM[2]), car_led_yellow(COMRAM[2]), pedestrian_led_green(COMRAM[2]), 
		 -> pedestrian_led_red(COMRAM[2]), pedestrian_led_yellow(COMRAM[2]), 

    led_off@led	PTR struct . size(1) Largest target is 2
		 -> car_led_green(COMRAM[2]), car_led_red(COMRAM[2]), car_led_yellow(COMRAM[2]), pedestrian_led_green(COMRAM[2]), 
		 -> pedestrian_led_red(COMRAM[2]), pedestrian_led_yellow(COMRAM[2]), 

    led_on@led	PTR struct . size(1) Largest target is 2
		 -> car_led_green(COMRAM[2]), car_led_red(COMRAM[2]), pedestrian_led_green(COMRAM[2]), pedestrian_led_red(COMRAM[2]), 

    led_toggle@led	PTR struct . size(1) Largest target is 2
		 -> car_led_yellow(COMRAM[2]), pedestrian_led_yellow(COMRAM[2]), 

    MY_INT0$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> APP_INT_ISR(), 

    portx	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> PORTA(BITBIGSFRll[1]), PORTB(BITBIGSFRll[1]), PORTC(BITBIGSFRll[1]), PORTD(BITBIGSFRll[1]), 
		 -> PORTE(BITBIGSFRll[1]), 

    RB4_InterruptHandler_high	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB4_InterruptHandler_low	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB5_InterruptHandler_high	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB5_InterruptHandler_low	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB6_InterruptHandler_high	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB6_InterruptHandler_low	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB7_InterruptHandler_high	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB7_InterruptHandler_low	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RBx_select_InterruptHandler@_interrupt$EXT_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 0

    RBx_select_InterruptHandler@_interrupt$EXT_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 0

    S1901$buffer	PTR unsigned char  size(2) Largest target is 0

    S1901$source	PTR const unsigned char  size(2) Largest target is 0

    S819$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> APP_INT_ISR(), 

    S972$EXT_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 0

    S972$EXT_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 0

    seven_segment_init@seg	PTR struct . size(1) Largest target is 5
		 -> seg_green(COMRAM[5]), seg_red(COMRAM[5]), 

    seven_segment_write@seg	PTR struct . size(1) Largest target is 5
		 -> seg_green(COMRAM[5]), seg_red(COMRAM[5]), 

    sp__memset	PTR void  size(2) Largest target is 0

    trisx	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> TRISA(BITBIGSFRll[1]), TRISB(BITBIGSFRhll[1]), TRISC(BITBIGSFRhll[1]), TRISD(BITBIGSFRhll[1]), 
		 -> TRISE(BITBIGSFRhll[1]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), STR_2(CODE[3]), STR_3(CODE[3]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _yellow_leds_toggle->_led_toggle
    _led_toggle->_gpio_pin_toggle_logic
    _wait_sign->_lcd_send_string_pos
    _stop_sign->_lcd_send_custom_char
    _pedestrian_green_traffic_counter->_seven_segment_write
    _seven_segment_write->_gpio_pin_logic_write
    _move_sign->_lcd_send_custom_char
    _lcd_send_custom_char->_lcd_send_char_data_pos
    _lcd_send_char_data_pos->_lcd_set_curser
    _led_on->_gpio_pin_logic_write
    _led_off->_gpio_pin_logic_write
    _harry_up_sign->_lcd_send_string_pos
    _lcd_send_string_pos->_lcd_set_curser
    _lcd_set_curser->_lcd_send_command
    _lcd_send_string->_lcd_send_char_data
    _lcd_send_char_data->_lcd_send_nbits
    _interrupt_INTx_init->_interrupt_INTx_pin_init
    _interrupt_INTx_pin_init->_gpio_pin_input_init
    _gpio_pin_input_init->_gpio_pin_direction_init
    _INTx_select_InterruptHandler->_INT0_set_InterruptHandler
    _INTx_select_InterruptHandler->_INT1_set_InterruptHandler
    _INTx_select_InterruptHandler->_INT2_set_InterruptHandler
    _ecual_init->_lcd_init
    _seven_segment_init->_gpio_pin_output_low_init
    _led_init->_gpio_pin_output_low_init
    _lcd_init->_lcd_send_command
    _lcd_send_command->_lcd_send_nbits
    _lcd_send_nbits->_gpio_pin_logic_write
    _lcd_send_enable->_gpio_pin_logic_write
    _gpio_pin_output_low_init->_gpio_pin_direction_init
    _gpio_pin_output_low_init->_gpio_pin_logic_write

Critical Paths under _InterruptManager in COMRAM

    _InterruptManager->_RB4_ISR
    _InterruptManager->_RB5_ISR
    _InterruptManager->_RB6_ISR
    _InterruptManager->_RB7_ISR

Critical Paths under _main in BANK0

    _stop_sign->_lcd_send_custom_char
    _move_sign->_lcd_send_custom_char

Critical Paths under _InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  401400
                                             41 COMRAM     2     2      0
                           _app_init
                      _harry_up_sign
                            _led_off
                             _led_on
                         _led_toggle
                      _modes_checker
                          _move_sign
                _seven_segment_write
                          _stop_sign
                          _wait_sign
 ---------------------------------------------------------------------------------
 (1) _modes_checker                                        0     0      0  189930
                      _harry_up_sign
                            _led_off
                             _led_on
                          _move_sign
   _pedestrian_green_traffic_counter
                _seven_segment_write
                          _stop_sign
                          _wait_sign
                 _yellow_leds_toggle
 ---------------------------------------------------------------------------------
 (2) _yellow_leds_toggle                                   3     3      0     762
                                             12 COMRAM     3     3      0
                         _led_toggle
 ---------------------------------------------------------------------------------
 (3) _led_toggle                                           3     2      1     716
                                              9 COMRAM     3     2      1
              _gpio_pin_toggle_logic
 ---------------------------------------------------------------------------------
 (4) _gpio_pin_toggle_logic                                6     5      1     189
                                              3 COMRAM     6     5      1
 ---------------------------------------------------------------------------------
 (1) _wait_sign                                            0     0      0   22400
                _lcd_send_string_pos
 ---------------------------------------------------------------------------------
 (1) _stop_sign                                            0     0      0   64866
               _lcd_send_custom_char
                _lcd_send_string_pos
 ---------------------------------------------------------------------------------
 (2) _pedestrian_green_traffic_counter                     4     4      0    4070
                                             17 COMRAM     4     4      0
                _seven_segment_write
 ---------------------------------------------------------------------------------
 (1) _seven_segment_write                                  6     4      2    3940
                                             11 COMRAM     6     4      2
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (1) _move_sign                                            0     0      0   64866
               _lcd_send_custom_char
                _lcd_send_string_pos
 ---------------------------------------------------------------------------------
 (2) _lcd_send_custom_char                                 8     3      5   42466
                                             36 COMRAM     5     0      5
                                              0 BANK0      3     3      0
                 _lcd_send_char_data
             _lcd_send_char_data_pos
                   _lcd_send_command
 ---------------------------------------------------------------------------------
 (3) _lcd_send_char_data_pos                               7     3      4   20902
                                             29 COMRAM     7     3      4
                 _lcd_send_char_data
                     _lcd_set_curser
 ---------------------------------------------------------------------------------
 (2) _led_on                                               3     2      1    3223
                                             11 COMRAM     3     2      1
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (2) _led_off                                              3     2      1    3403
                                             11 COMRAM     3     2      1
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (2) _harry_up_sign                                        0     0      0   22400
                _lcd_send_string_pos
 ---------------------------------------------------------------------------------
 (2) _lcd_send_string_pos                                  7     3      4   22400
                                             29 COMRAM     7     3      4
                    _lcd_send_string
                     _lcd_set_curser
 ---------------------------------------------------------------------------------
 (3) _lcd_set_curser                                       8     5      3   11548
                                             22 COMRAM     7     4      3
                   _lcd_send_command
 ---------------------------------------------------------------------------------
 (3) _lcd_send_string                                      5     3      2    9081
                                             22 COMRAM     5     3      2
                 _lcd_send_char_data
 ---------------------------------------------------------------------------------
 (4) _lcd_send_char_data                                   5     3      2    8694
                                             17 COMRAM     5     3      2
               _gpio_pin_logic_write
                    _lcd_send_enable
                     _lcd_send_nbits
 ---------------------------------------------------------------------------------
 (1) _app_init                                             0     0      0   25656
                         _ecual_init
                _interrupt_INTx_init
 ---------------------------------------------------------------------------------
 (2) _interrupt_INTx_init                                  2     1      1    2877
                                             17 COMRAM     2     1      1
       _INTx_select_InterruptHandler
          _interrupt_INTx_clear_flag
             _interrupt_INTx_disable
           _interrupt_INTx_edge_init
              _interrupt_INTx_enable
            _interrupt_INTx_pin_init
 ---------------------------------------------------------------------------------
 (3) _interrupt_INTx_pin_init                              2     1      1    1168
                                             15 COMRAM     2     1      1
                _gpio_pin_input_init
 ---------------------------------------------------------------------------------
 (4) _gpio_pin_input_init                                  4     3      1    1023
                                             11 COMRAM     4     3      1
            _gpio_pin_direction_init
 ---------------------------------------------------------------------------------
 (3) _interrupt_INTx_enable                                4     3      1     148
                                              3 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _interrupt_INTx_edge_init                             4     3      1     280
                                              3 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _interrupt_INTx_disable                               4     3      1     224
                                              3 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _interrupt_INTx_clear_flag                            4     3      1     148
                                              3 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _INTx_select_InterruptHandler                         4     3      1     649
                                              6 COMRAM     4     3      1
          _INT0_set_InterruptHandler
          _INT1_set_InterruptHandler
          _INT2_set_InterruptHandler
 ---------------------------------------------------------------------------------
 (4) _INT2_set_InterruptHandler                            3     1      2     145
                                              3 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _INT1_set_InterruptHandler                            3     1      2     145
                                              3 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _INT0_set_InterruptHandler                            3     1      2     145
                                              3 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _ecual_init                                           1     1      0   22779
                           _lcd_init
                           _led_init
                 _seven_segment_init
 ---------------------------------------------------------------------------------
 (3) _seven_segment_init                                   3     2      1    3766
                                             15 COMRAM     3     2      1
           _gpio_pin_output_low_init
 ---------------------------------------------------------------------------------
 (3) _led_init                                             3     2      1    4188
                                             15 COMRAM     3     2      1
           _gpio_pin_output_low_init
 ---------------------------------------------------------------------------------
 (3) _lcd_init                                             6     5      1   14795
                                             22 COMRAM     6     5      1
           _gpio_pin_output_low_init
                   _lcd_send_command
 ---------------------------------------------------------------------------------
 (4) _lcd_send_command                                     5     3      2   10674
                                             17 COMRAM     5     3      2
               _gpio_pin_logic_write
                    _lcd_send_enable
                     _lcd_send_nbits
 ---------------------------------------------------------------------------------
 (5) _lcd_send_nbits                                       7     5      2    3074
                                             11 COMRAM     6     4      2
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (5) _lcd_send_enable                                      3     2      1    2618
                                             11 COMRAM     2     1      1
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (4) _gpio_pin_output_low_init                             4     3      1    3478
                                             11 COMRAM     4     3      1
            _gpio_pin_direction_init
               _gpio_pin_logic_write
 ---------------------------------------------------------------------------------
 (6) _gpio_pin_logic_write                                 8     6      2    2153
                                              3 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (5) _gpio_pin_direction_init                              8     6      2     702
                                              3 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _InterruptManager                                     2     2      0     120
                                              1 COMRAM     2     2      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
                            _RB4_ISR
                            _RB5_ISR
                            _RB6_ISR
                            _RB7_ISR
 ---------------------------------------------------------------------------------
 (10) _RB7_ISR                                             1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _RB6_ISR                                             1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _RB5_ISR                                             1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _RB4_ISR                                             1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _INT2_ISR                                            0     0      0       0
                                NULL *
                        _APP_INT_ISR *
 ---------------------------------------------------------------------------------
 (10) _INT1_ISR                                            0     0      0       0
                                NULL *
                        _APP_INT_ISR *
 ---------------------------------------------------------------------------------
 (10) _INT0_ISR                                            0     0      0       0
                                NULL *
                        _APP_INT_ISR *
 ---------------------------------------------------------------------------------
 (11) _APP_INT_ISR                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (11) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _app_init
     _ecual_init
       _lcd_init
         _gpio_pin_output_low_init
           _gpio_pin_direction_init
           _gpio_pin_logic_write
         _lcd_send_command
           _gpio_pin_logic_write
           _lcd_send_enable
             _gpio_pin_logic_write
           _lcd_send_nbits
             _gpio_pin_logic_write
       _led_init
         _gpio_pin_output_low_init
       _seven_segment_init
         _gpio_pin_output_low_init
     _interrupt_INTx_init
       _INTx_select_InterruptHandler
         _INT0_set_InterruptHandler
         _INT1_set_InterruptHandler
         _INT2_set_InterruptHandler
       _interrupt_INTx_clear_flag
       _interrupt_INTx_disable
       _interrupt_INTx_edge_init
       _interrupt_INTx_enable
       _interrupt_INTx_pin_init
         _gpio_pin_input_init
           _gpio_pin_direction_init
   _harry_up_sign
     _lcd_send_string_pos
       _lcd_send_string
         _lcd_send_char_data
           _gpio_pin_logic_write
           _lcd_send_enable
           _lcd_send_nbits
       _lcd_set_curser
         _lcd_send_command
   _led_off
     _gpio_pin_logic_write
   _led_on
     _gpio_pin_logic_write
   _led_toggle
     _gpio_pin_toggle_logic
   _modes_checker
     _harry_up_sign
     _led_off
     _led_on
     _move_sign
       _lcd_send_custom_char
         _lcd_send_char_data
         _lcd_send_char_data_pos
           _lcd_send_char_data
           _lcd_set_curser
         _lcd_send_command
       _lcd_send_string_pos
     _pedestrian_green_traffic_counter
       _seven_segment_write
         _gpio_pin_logic_write
     _seven_segment_write
     _stop_sign
       _lcd_send_custom_char
       _lcd_send_string_pos
     _wait_sign
       _lcd_send_string_pos
     _yellow_leds_toggle
       _led_toggle
   _move_sign
   _seven_segment_write
   _stop_sign
   _wait_sign

 _InterruptManager (ROOT)
   _INT0_ISR
     NULL(Fake) *
     _APP_INT_ISR *
   _INT1_ISR
     NULL(Fake) *
     _APP_INT_ISR *
   _INT2_ISR
     NULL(Fake) *
     _APP_INT_ISR *
   _RB4_ISR
   _RB5_ISR
   _RB6_ISR
   _RB7_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      41        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      3      34       5       40.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     2B      7B       1       97.6%
BITBIGSFRhll        59      0       0      38        0.0%
BITBIGSFRhh          D      0       0      37        0.0%
BITBIGSFRlh          4      0       0      39        0.0%
BITBIGSFRll          4      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AF      26        0.0%
DATA                 0      0      AF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Oct 16 16:02:06 2023

                       ??_InterruptManager 0037               lcd_send_char_data_pos@column 0055  
                                        _n 0019                gpio_pin_output_low_init@pin 0041  
              gpio_pin_output_low_init@ret 0044                                         l10 2540  
                                       l13 2542                                         l21 1DFE  
                                       l24 1E00                                         l52 1A44  
                                       l62 201A                                         l57 2080  
                                       l75 1E6E                                         l69 1FB4  
                                       l86 1D8E                                         l79 1E70  
                                       l97 1B80               INT1_set_InterruptHandler@ret 003B  
                                      l120 2428                                        l123 272C  
                                      l132 1C14                                        l143 23DC  
                                      l153 2298                                        l235 170A  
                                      l148 2244                                        l254 15D6  
                                      l158 265E                                        l423 219A  
                                      l514 26DC                                        l275 2142  
                                      l187 2472                                        l451 1D1A  
                                      l524 2688                                        l460 1E9A  
                                      l268 1CA0                                        l509 1AE4  
                                      l470 1F02                                        l462 1EDE  
                                      l446 1CBA                                        l702 233C  
                                      l519 26B2                                        l471 1F08  
                                      l448 1CC8                                        l473 1F4C  
                                      l457 1E8A                                        l449 1CD2  
                                      l289 238C                                        l705 2746  
                                      l459 1E94                                        l468 1EF8  
                                      l708 2760                                        l493 1954  
                                      l718 24FE                                        l663 27DA  
                                      l498 2704                                        l691 1838  
                                      l696 24B8                                        l699 22EA  
                          ?_lcd_send_nbits 0041                  lcd_send_string_pos@column 0055  
                   ??_gpio_pin_logic_write 003B                                        _lcd 001A  
                                      _ret 00B3                                lcd_init@lcd 004C  
                              lcd_init@ret 004F                 seven_segment_init@gpio_ret 0046  
                                      tosl 0FFD                                        wreg 0FE8  
               __end_of_lcd_send_char_data 201C                  _RB5_InterruptHandler_high 006B  
                            _harry_up_sign 2748                            ?_lcd_set_curser 004C  
                          __end_of_RB4_ISR 27CA                            __end_of_RB5_ISR 27B0  
                          __end_of_RB6_ISR 2796                            __end_of_RB7_ISR 277C  
                   lcd_set_curser@gpio_ret 0051                                       l3201 1AA6  
                                     l3121 1F4A                                       l3105 1EE0  
                                     l4001 1B10                                       l3203 1AE2  
                                     l3107 1EF0                                       l3131 184A  
                                     l3211 1CA2                                       l4003 1B20  
                                     l3109 1EFA                                       l3141 188E  
                                     l3133 1852                                       l3213 1CB2  
                                     l4021 1B78                                       l4013 1B3E  
                                     l4005 1B28                                       l4101 22CE  
                                     l4031 23AA                                       l3119 1F0E  
                                     l3143 1896                                       l3135 186C  
                                     l3215 1CC0                                       l4015 1B52  
                                     l4007 1B3A                                       l4023 1B7E  
                                     l4111 24D4                                       l4103 272E  
                                     l3071 2648                                       l4033 23B2  
                                     l3081 1E72                                       l3153 18D6  
                                     l3145 18B0                                       l3137 1872  
                                     l3129 183A                                       l3225 1CDC  
                                     l4121 27CE                                       l4041 21F2  
                                     l4017 1B54                                       l4113 24E0  
                                     l4105 24BC                                       l3073 2650  
                                     l3321 2478                                       l4201 12D4  
                                     l4035 23D6                                       l4027 238E  
                                     l3083 1E82                                       l3155 18F0  
                                     l3147 18B6                                       l3139 188C  
                                     l3227 1D18                                       l4051 2242  
                                     l4043 2206                                       l4019 1B64  
                                     l4115 24F8                                       l4107 24C0  
                                     l3075 2658                                       l3323 2490  
                                     l3315 2474                                       l4131 1738  
                                     l4123 170C                                       l4211 1308  
                                     l4203 12E0                                       l4037 23DA  
                                     l4029 23A2                                       l3085 1E8C  
                                     l3157 18F6                                       l3149 18D0  
                                     l3181 26F6                                       l4061 226E  
                                     l4045 220E                                       l3077 265C  
                                     l3069 2634                                       l3325 24A6  
                                     l4141 176E                                       l4133 1744  
                                     l4125 171C                                       l4221 133A  
                                     l4213 1320                                       l4205 12E4  
                                     l4071 242A                                       l3191 1A5E  
                                     l3095 1EA0                                       l3159 1910  
                                     l3167 1916                                       l3183 2702  
                                     l4119 27CA                                       l4063 2292  
                                     l4055 2246                                       l4047 221A  
                                     l3327 24A8                                       l4151 17A2  
                                     l4143 1782                                       l4135 1750  
                                     l4127 172C                                       l4231 136E  
                                     l4223 133E                                       l4081 2452  
                                     l4073 2432                                       l3193 1A76  
                                     l3097 1EDC                                       l3169 1952  
                                     l3177 26DE                                       l4065 2296  
                                     l4057 225A                                       l4049 223E  
                                     l4161 17D8                                       l4153 17AE  
                                     l4145 1786                                       l4137 175C  
                                     l4129 1730                                       l4241 13BE  
                                     l4233 1384                                       l4217 1326  
                                     l4209 12F8                                       l4083 245A  
                                     l4075 243A                                       l3195 1A8E  
                                     l3187 1A46                                       l3179 26EE  
                                     l3291 2184                                       l3283 2144  
                                     l4059 2262                                       l4091 2304  
                                     l4171 181A                                       l4163 17E6  
                                     l4155 17BA                                       l4147 1792  
                                     l4139 1768                                       l4251 13EE  
                                     l4243 13CA                                       l4227 1352  
                                     l4219 1336                                       l4085 2462  
                                     l4077 2442                                       l4069 242A  
                                     l2901 26AC                                       l3189 1A56  
                                     l3293 218E                                       l3285 2154  
                                     l4093 2320                                       l4173 1820  
                                     l4165 17FE                                       l4157 17BE  
                                     l4149 179E                                       l4253 13F2  
                                     l4261 1420                                       l4245 13D6  
                                     l4229 136A                                       l4237 138A  
                                     l4087 246A                                       l4079 244A  
                                     l2903 26B0                                       l2911 2672  
                                     l3295 2198                                       l3287 215C  
                                     l4095 2748                                       l4175 1830  
                                     l4167 1802                                       l4159 17C6  
                                     l4271 144C                                       l4263 1430  
                                     l4255 1402                                       l4247 13DA  
                                     l4239 13BA                                       l3801 2034  
                                     l2913 267A                                       l3289 217A  
                                     l4089 22EC                                       l4097 229A  
                                     l4169 180E                                       l4273 1464  
                                     l4281 1484                                       l4265 1434  
                                     l4257 141A                                       l3803 203C  
                                     l2915 2682                                       l2907 2660  
                                     l3811 1FB6                                       l4099 22B2  
                                     l2851 1C16                                       l4275 1468  
                                     l4267 1438                                       l4195 12C0  
                                     l2781 1608                                       l3805 207A  
                                     l2917 2686                                       l2909 2660  
                                     l4461 1934                                       l3813 1FCE  
                                     l2861 1C9E                                       l2853 1C26  
                                     l4277 147E                                       l4197 12C4  
                                     l4471 16DE                                       l2791 16CA  
                                     l2783 1618                                       l3751 14D4  
                                     l3807 207E                                       l3903 2520  
                                     l4463 1EBE                                       l2871 237A  
                                     l3815 1FD6                                       l3831 1BB4  
                                     l3823 1B82                                       l2855 1C46  
                                     l4199 12C8                                       l2793 16F4  
                                     l2785 1620                                       l2777 15D8  
                                     l3761 1596                                       l3753 14E4  
                                     l3905 252A                                       l2881 26B4  
                                     l4465 1F2C                                       l2873 2386  
                                     l2865 233E                                       l3817 2014  
                                     l4457 1BEC                                       l3833 1BC6  
                                     l3825 1B8A                                       l3913 1D90  
                                     l2857 1C4E                                       l2795 1704  
                                     l2787 1676                                       l2779 15E8  
                                     l3763 15C0                                       l3755 14EC  
                                     l3747 14A4                                       l3851 2118  
                                     l3907 252C                                       l2883 26C6  
                                     l4467 1AC4                                       l4459 1CFA  
                                     l2875 238A                                       l2867 2352  
                                     l3819 2018                                       l3827 1B90  
                                     l3931 1DFA                                       l3915 1DA4  
                                     l2859 1C9A                                       l2789 16C6  
                                     l2797 1708                                       l3765 15D0  
                                     l4469 15AA                                       l3757 1542  
                                     l3749 14B4                                       l3853 2120  
                                     l3781 2416                                       l3941 198A  
                                     l3909 253C                                       l2885 26CE  
                                     l2893 268A                                       l2869 2372  
                                     l3829 1BA2                                       l3837 1BD8  
                                     l3861 1F4E                                       l3925 1DC0  
                                     l3917 1DB4                                       l3759 1592  
                                     l3767 15D4                                       l3855 213C  
                                     l3847 20E4                                       l3791 2716  
                                     l3783 2426                                       l3775 23DE  
                                     l3951 19BE                                       l3943 1992  
                                     l3935 1956                                       l2887 26D6  
                                     l2879 26B4                                       l2895 268A  
                                     l3839 1C12                                       l3871 1FAE  
                                     l3863 1F66                                       l3927 1DE8  
                                     l3919 1DBC                                       l3857 2140  
                                     l3849 20F8                                       l3793 271E  
                                     l3777 23EA                                       l3961 1A02  
                                     l3953 19CA                                       l3945 199E  
                                     l3937 196E                                       l2889 26DA  
                                     l2897 269C                                       l3881 1E2A  
                                     l3873 1FB2                                       l3865 1F76  
                                     l3929 1DEA                                       l3795 272A  
                                     l3787 2706                                       l3779 2414  
                                     l3971 1A3E                                       l3963 1A0E  
                                     l3955 19E4                                       l3947 19A0  
                                     l3939 1976                                       l2899 26A4  
                                     l3883 1E32                                       l3867 1F86  
                                     l3789 270A                                       l3965 1A1A  
                                     l3957 19EA                                       l3949 19B0  
                                     l3973 1A42                                       l3893 2500  
                                     l3885 1E4A                                       l3877 1E02  
                                     l3981 1D44                                       l3869 1F8E  
                                     l3799 201C                                       l3967 1A26  
                                     l3959 19F6                                       l3895 2514  
                                     l3887 1E4C                                       l3879 1E1A  
                                     l3991 1D88                                       l3983 1D54  
                                     l3969 1A32                                       l3897 251C  
                                     l3889 1E6A                                       l3993 1D8C  
                                     l3985 1D64                                       l3977 1D1C  
                                     l3987 1D6C                                       l3979 1D34  
                                     l3989 1D7C                                       l3997 1AE6  
                                     l3999 1B00                                       STR_1 1025  
                                     STR_4 100A                                       STR_5 1001  
                                     STR_6 1013                                       STR_7 101C  
                         ?_lcd_send_enable 0041                                       u2100 186C  
                                     u2101 1868                                       u2110 188C  
                                     u2111 1888                                       u2120 18B0  
                                     u2121 18AC                                       u2130 18D0  
                                     u2131 18CC                                       u2140 18F0  
                                     u2060 2648                                       u2141 18EC  
                                     u2061 2644                                       _LATA 0F89  
                                     u2070 1E82                                       u2150 1910  
                                     u2230 2154                                       _LATB 0F8A  
                                     u2071 1E7E                                       u2151 190C  
                                     u2231 2150                                       u3007 249A  
                                     _LATC 0F8B                                       u2080 1EF0  
                                     u2160 26EE                                       u2240 24B8  
                                     _LATD 0F8C                                       u2081 1EEC  
                                     u2161 26EA                                       u3017 24EA  
                                     u2241 24B4                                       _LATE 0F8D  
                                     u2170 1A56                                       u2090 184A  
                                     u3027 19B6                                       u2171 1A52  
                                     u2091 1846                                       u2180 1CB2  
                                     u3037 19D0                                       u2181 1CAE  
                                     u3047 19E6                                       u1704 1694  
                                     u2520 2426                                       u2600 1E1A  
                                     u1800 1C26                                       u1705 1690  
                                     u2505 15CE                                       u3057 2718  
                                     u2521 2422                                       u2601 1E16  
                                     u1801 1C22                                       u2506 15D0  
                                     u2450 14B4                                       u2514 2404  
                                     u2530 2034                                       u2610 1E2A  
                                     u1810 1C46                                       u1715 1702  
                                     u2451 14B0                                       u2515 2400  
                                     u2531 2030                                       u2611 1E26  
                                     u1811 1C42                                       u1716 1704  
                                     u1660 15E8                                       u2460 14D4  
                                     u2700 19B0                                       u2540 1FCE  
                                     u2620 1E6A                                       u1661 15E4  
                                     u2461 14D0                                       u2701 19AC  
                                     u2541 1FCA                                       u2621 1E66  
                                     u1670 1608                                       u2470 14E4  
                                     u2550 20F8                                       u2630 2514  
                                     u1830 2352                                       u2710 1D34  
                                     u1671 1604                                       u2471 14E0  
                                     u2551 20F4                                       u2631 2510  
                                     u1831 234E                                       u2711 1D30  
                                     u1680 1618                                       u2560 2118  
                                     u2800 23D2                                       u2640 253C  
                                     u1840 2372                                       u2720 1D44  
                                     u1824 1C6C                                       u1681 1614  
                                     u2561 2114                                       u2801 23CC  
                                     u2641 2538                                       u1841 236E  
                                     u2721 1D40                                       u1825 1C68  
                                     u1850 26C6                                       u2730 1D54  
                                     u2810 2206                                       u2570 1F66  
                                     u2650 1DA4                                       u1851 26C2  
                                     u2731 1D50                                       u2811 2202  
                                     u2571 1F62                                       u2651 1DA0  
                                     u2484 150A                                       u1860 269C  
                                     u2740 1D64                                       u2820 223A  
                                     u2580 1F76                                       u2660 1DB4  
                                     u2485 1506                                       u1861 2698  
                                     u2741 1D60                                       u2821 2234  
                                     u2581 1F72                                       u2661 1DB0  
                                     u1694 163E                                       u2494 1560  
                                     u2806 23D4                                       u1870 2672  
                                     u2830 225A                                       u2590 1F86  
                                     u2750 1B00                                       u2910 12F4  
                                     u1695 163A                                       u2495 155C  
                                     u1871 266E                                       u2831 2256  
                                     u2591 1F82                                       u2751 1AFC  
                                     u2911 12F0                                       u2840 228E  
                                     u2760 1B10                                       u2680 1DFA  
                                     u2920 134E                                       u2841 2288  
                                     u2761 1B0C                                       u2681 1DF6  
                                     u2921 134A                                       u2690 196E  
                                     u2826 223C                                       u2770 1B20  
                                     u2674 1DD8                                       u2850 24D0  
                                     u2930 13EA                                       u2691 196A  
                                     u2771 1B1C                                       u2675 1DD4  
                                     u2851 24CC                                       u2931 13E6  
                                     u2780 1B64                                       u2860 171C  
                                     u2940 1448                                       u2781 1B60  
                                     u2861 1718                                       u2941 1444  
                                     u2790 23A2                                       u2846 2290  
                                     u2870 17D8                                       u2791 239E  
                                     u2871 17D4                                       u2880 17E6  
                                     u2881 17E2                                       u2967 1312  
                                     u2977 1378                                       u2987 140C  
                                     u2997 1472          __end_of_interrupt_INTx_clear_flag 1F4E  
                                     _main 12C0                                       _latx 0001  
                                     fsr1h 0FE2                                       fsr2h 0FDA  
                                     indf1 0FE7                                       indf2 0FDF  
                                     fsr1l 0FE1                                       fsr2l 0FD9  
                 ?_gpio_pin_direction_init 0039                                       btemp 007C  
                 _RB4_InterruptHandler_low 006D                           ?_lcd_send_string 004C  
                 _RB7_InterruptHandler_low 0061                                       prodl 0FF3  
                                     start 000E                                led_init@led 0045  
                              led_init@ret 0047                               ___param_bank 0000  
                       _pedestrian_led_red 002E                     ?_gpio_pin_toggle_logic 0039  
                  _interrupt_INTx_pin_init 26DE                   _interrupt_INTx_edge_init 183A  
                ?_gpio_pin_output_low_init 0041                           __end_of_INT0_ISR 2634  
              ??_INT2_set_InterruptHandler 003B                           __end_of_INT1_ISR 2606  
                         __end_of_INT2_ISR 25D8                                      ?_main 0036  
                                    i2l431 2604                                      i2l427 2632  
                                    i2l435 25D6                                      i2l366 12B4  
                                    i2l537 27C8                                      i2l545 27AE  
                                    i2l553 2794                                      i2l561 277A  
                                    i2l682 20B4                                      i2l685 20E2  
                        ?_lcd_send_command 0047                                      _PORTA 0F80  
                                    _PORTB 0F81                                      _PORTC 0F82  
                                    _PORTD 0F83                                      _PORTE 0F84  
                                    _TRISA 0F92                                      _TRISB 0F93  
                                    _TRISC 0F94                                      _TRISD 0F95  
                                    _TRISE 0F96                     gpio_pin_input_init@pin 0041  
                   gpio_pin_input_init@ret 0044                             ?_harry_up_sign 0036  
                       ??_lcd_send_command 0049                            __end_of_led_off 229A  
                   lcd_send_string@lcd_ret 004F            INTx_select_InterruptHandler@ret 003F  
                                    _portx 0080                                      _trisx 000B  
                                    pclath 0FFA                                      pclatu 0FFB  
                                    tablat 0FF5                                      ttemp5 007D  
                                    ttemp6 0080                                      ttemp7 0084  
                                    status 0FD8                                      wtemp8 007D  
 __end_of_pedestrian_green_traffic_counter 2500         ??_pedestrian_green_traffic_counter 0047  
        ?_pedestrian_green_traffic_counter 0036           _pedestrian_green_traffic_counter 24BA  
                          __initialization 219C                               __end_of_main 14A4  
     __end_of_INTx_select_InterruptHandler 1AE6               _INTx_select_InterruptHandler 1A46  
               ?_INT1_set_InterruptHandler 0039                                     ??_main 005F  
                lcd_send_nbits@pin_counter 0046                              __activetblptr 0003  
                                ??_RB4_ISR 0036                                  ??_RB5_ISR 0036  
                                ??_RB6_ISR 0036                                  ??_RB7_ISR 0036  
                  lcd_send_enable@gpio_ret 0042                  _INT2_set_InterruptHandler 2660  
                   lcd_send_string_pos@lcd 0053                     _lcd_send_char_data_pos 1F4E  
                   lcd_send_string_pos@ret 0059                                     i2l2101 25AC  
                                   i2l2103 25BE                                     i2l2111 27C8  
                                   i2l2105 27B2                                     i2l2121 27AE  
                                   i2l2051 20AC                                     i2l2107 27B4  
                                   i2l2115 2798                                     i2l2131 2794  
                                   i2l2053 20C2                                     i2l2045 2082  
                                   i2l2117 279A                                     i2l2125 277E  
                                   i2l2141 277A                                     i2l2055 20D0  
                                   i2l2047 2090                                     i2l2127 2780  
                                   i2l2135 2764                                     i2l2057 20DE  
                                   i2l2049 209E                                     i2l2137 2766  
                                   i2l2401 1156                 seven_segment_write@counter 0079  
                                   i2l2091 261A                                     i2l2411 118A  
                                   i2l2403 115A                                     i2l2093 25D8  
                                   i2l2421 11C0                                     i2l2413 119A  
                                   i2l2405 1160                     lcd_send_string_pos@row 0054  
                                   i2l2087 2606                                     i2l2095 25DA  
                                   i2l2431 11F6                                     i2l2423 11CE  
                                   i2l2415 119E                                     i2l2407 116E  
                                   i2l2351 1034                                     i2l2089 2608  
                                   i2l2097 25EC                                     i2l2433 1204  
                                   i2l2441 122C                                     i2l2425 11DE  
                                   i2l2409 117C                                     i2l2417 11A4  
                                   i2l2361 1070                                     i2l2353 1042  
                                   i2l2099 25AA                                     i2l2451 126A  
                                   i2l2443 123A                                     i2l2435 1212  
                                   i2l2427 11E2                                     i2l2419 11B2  
                                   i2l2371 10A2                                     i2l2363 1074  
                                   i2l2355 1050                                     i2l2461 12AA  
                                   i2l2445 1248                                     i2l2453 1270  
                                   i2l2437 1222                                     i2l2429 11E8  
                                   i2l2373 10B0                                     i2l2381 10D8  
                                   i2l2365 1082                                     i2l2357 1054  
                   lcd_send_string_pos@str 0056                                     i2l2463 12AE  
                                   i2l2455 127E                                     i2l2447 1256  
                                   i2l2439 1226                                     i2l2391 1116  
                                   i2l2383 10E6                                     i2l2375 10BE  
                                   i2l2367 1090                                     i2l2359 1062  
                                   i2l2457 128C                                     i2l2449 1266  
                                   i2l2385 10F4                                     i2l2393 111C  
                                   i2l2377 10CE                                     i2l2369 1094  
                                   i2l2459 129A                                     i2l2395 112A  
                                   i2l2387 1102                                     i2l2379 10D2  
                                   i2l2397 1138                                     i2l2389 1112  
                                   i2l2399 1146                  ??_interrupt_INTx_pin_init 0046  
                 gpio_pin_toggle_logic@pin 0039                   gpio_pin_toggle_logic@ret 003E  
                         __end_of_app_init 27DC                           __end_of_lcd_init 1A46  
                         __end_of_led_init 23DE                  interrupt_INTx_disable@ret 003C  
     pedestrian_green_traffic_counter@time 0049                                     _led_on 21F2  
        __end_of_INT1_set_InterruptHandler 26B4                                     clear_0 21E2  
            ?_INTx_select_InterruptHandler 003C                    lcd_send_string@gpio_ret 004E  
                                   isa$std 0001                  seven_segment_init@counter 007A  
                                ??_led_off 0042                            ??_harry_up_sign 005A  
                             __pdataCOMRAM 0001                      seven_segment_init@seg 0045  
                    seven_segment_init@ret 0047                               __mediumconst 0000  
                                   tblptrh 0FF7                                     tblptrl 0FF6  
                                   tblptru 0FF8  INT2_set_InterruptHandler@InterruptHandler 0039  
INT1_set_InterruptHandler@InterruptHandler 0039  INT0_set_InterruptHandler@InterruptHandler 0039  
                               __accesstop 0080                    __end_of__initialization 21E8  
                                ?_INT0_ISR 0036                                  ?_INT1_ISR 0036  
                                ?_INT2_ISR 0036          interrupt_INTx_pin_init@_interrupt 0045  
                       _seven_segment_init 2500                              ___rparam_used 0001  
                     lcd_set_curser@column 004E                      _interrupt_INTx_enable 1CA2  
                 lcd_send_custom_char@_chr 005D                          RB5_ISR@RB5_Source 0036  
                           __pcstackCOMRAM 0036                        ?_seven_segment_init 0045  
                             __pidataBANK0 2579                       _pedestrian_led_green 002A  
                         ??_lcd_send_nbits 0043                __end_of_lcd_send_string_pos 1D90  
              lcd_send_string_pos@gpio_ret 0057                   ??_interrupt_INTx_disable 003A  
                         ??_lcd_set_curser 004F            __end_of_interrupt_INTx_pin_init 2706  
                 interrupt_INTx_enable@ret 003C                       ??_seven_segment_init 0046  
                    lcd_send_char_data@lcd 0047                      lcd_send_char_data@ret 004B  
                       lcd_send_enable@lcd 0041                      _INT0_InterruptHandler 0075  
                               ??_INT0_ISR 0036                                 ??_INT1_ISR 0036  
                               ??_INT2_ISR 0036                                 __pnvCOMRAM 007B  
             interrupt_INTx_clear_flag@ret 003C                 ??_interrupt_INTx_edge_init 003A  
                       _lcd_send_char_data 1FB6                    ??_gpio_pin_toggle_logic 003A  
             __end_of_lcd_send_custom_char 1B82               INT0_set_InterruptHandler@ret 003B  
                   interrupt_INTx_init@ret 0048                        ?_lcd_send_char_data 0047  
                            led_toggle@led 003F                                 _ecual_init 242A  
                            led_toggle@ret 0041                                    ?_led_on 0041  
                        RB7_ISR@RB7_Source 0036                                    _RB4_ISR 27B0  
                                  _RB5_ISR 2796     INTx_select_InterruptHandler@_interrupt 003C  
                                  _RB6_ISR 277C                                    _RB7_ISR 2762  
              seven_segment_write@gpio_ret 0045             ??_INTx_select_InterruptHandler 003D  
                                  i2u70_40 209E                                    i2u70_41 209A  
                                  i2u71_40 20AC                                    i2u71_41 20A8  
                                  i2u72_40 20C2                                    i2u72_41 20BE  
                                  i2u73_40 20D0                                    i2u80_48 25F2  
                                  i2u81_40 25BE                                    i2u73_41 20CC  
                                  i2u80_49 2604                                    i2u81_41 25BA  
                                  i2u74_40 20DE                                    i2u74_41 20DA  
                                  i2u82_48 25C4                                    i2u83_40 27C4  
                                  i2u82_49 25D6                                    i2u83_41 27C0  
                                  i2u84_40 27AA                                    i2u84_41 27A6  
                                  i2u69_40 2090                                    i2u77_40 261A  
                                  i2u85_40 2790                                    i2u69_41 208C  
                                  i2u77_41 2616                                    i2u85_41 278C  
                                  i2u86_40 2776                                    i2u86_41 2772  
                                  i2u78_48 2620                                    i2u79_40 25EC  
                                  i2u78_49 2632                                    i2u79_41 25E8  
                _RB6_InterruptHandler_high 0067                       ??_lcd_send_char_data 0049  
                                ?_app_init 0036                                    _MY_INT0 00AA  
                                ?_lcd_init 004C                                  ?_led_init 0045  
                               _led_toggle 2634                 interrupt_INTx_pin_init@ret 0046  
                   ?_interrupt_INTx_enable 0039                 ?_interrupt_INTx_clear_flag 0039  
                 _RB6_InterruptHandler_low 0065              lcd_send_nbits@data_or_command 0042  
                                  __Hparam 0000                                    __Lparam 0000  
                             __psmallconst 1000                ??_INT1_set_InterruptHandler 003B  
                                  __pcinit 219C              gpio_pin_logic_write@pin_logic 003A  
                                  __ramtop 1000                                    __ptext0 12C0  
                                  __ptext1 170C                                    __ptext2 2474  
                                  __ptext3 2634                                    __ptext4 1C16  
                                  __ptext5 272E                                    __ptext6 229A  
                                  __ptext7 24BA                                    __ptext8 1D90  
                                  __ptext9 22EC                                    _led_off 2246  
                                  _counter 007B                        _gpio_pin_input_init 233E  
                                  _seg_red 0025                    ?_lcd_send_char_data_pos 0053  
                               ??_app_init 0052                                 ??_lcd_init 004D  
                          lcd_init@lcd_ret 0051                             __pintcode_body 102A  
                               ??_led_init 0046                       end_of_initialization 21E8  
                           led_on@gpio_ret 0042                              _modes_checker 170C  
                                  int_func 102A                          __end_of_move_sign 233E  
                     ?_gpio_pin_input_init 0041                          __end_of_wait_sign 2748  
                 _gpio_pin_output_low_init 20E4                              _car_led_green 0030  
                                  postdec1 0FE5                                    postdec2 0FDD  
                                  postinc0 0FEE                                    postinc2 0FDE  
                              ?_ecual_init 0036                 ?_INT0_set_InterruptHandler 0039  
                    _INT1_InterruptHandler 0073                                  _PORTBbits 0F81  
                                _PORTCbits 0F82                          __end_of_stop_sign 22EC  
                         _InterruptManager 0008                              ??_APP_INT_ISR 0036  
           __end_of_lcd_send_char_data_pos 1FB6                       lcd_init@pins_counter 0050  
                     _lcd_send_custom_char 1AE6                         lcd_send_string@lcd 004C  
                       lcd_send_string@ret 0050                         lcd_send_string@str 004D  
                _INT1_set_InterruptHandler 268A                                ?_led_toggle 003F  
                           ?_modes_checker 0036                        _seven_segment_write 1D90  
         gpio_pin_output_low_init@gpio_ret 0043                      lcd_set_curser@lcd_ret 0052  
         __end_of_interrupt_INTx_edge_init 1956                      ??_gpio_pin_input_init 0042  
                   _interrupt_INTx_disable 1E72                     seven_segment_write@seg 0041  
                   seven_segment_write@ret 0046                     seven_segment_write@num 0042  
                               led_off@led 0041                                 led_off@ret 0043  
                  _gpio_pin_direction_init 15D8          __end_of_INT0_set_InterruptHandler 26DE  
                     ?_seven_segment_write 0041                          ??_lcd_send_enable 0042  
                            __pidataCOMRAM 2544                             __end_of_led_on 2246  
                    _pedestrian_led_yellow 002C                          ??_lcd_send_string 004E  
                      start_initialization 219C                      __end_of_harry_up_sign 2762  
                      _interrupt_INTx_init 2144                      ?_lcd_send_custom_char 005A  
      interrupt_INTx_clear_flag@_interrupt 0039                        __end_of_APP_INT_ISR 20E4  
                 ?_interrupt_INTx_pin_init 0045                           _lcd_send_command 201C  
              gpio_pin_input_init@gpio_ret 0043              lcd_send_char_data_pos@lcd_ret 0058  
                     ?_interrupt_INTx_init 0047              __end_of_gpio_pin_toggle_logic 1CA2  
               __end_of_yellow_leds_toggle 24BA                                   ??_led_on 0042  
                              __pdataBANK0 0080                      ??_seven_segment_write 0043  
                              _car_led_red 0034                                   ?_RB4_ISR 0036  
                                 ?_RB5_ISR 0036                                   ?_RB6_ISR 0036  
                                 ?_RB7_ISR 0036                                __pbssCOMRAM 0061  
                   lcd_send_char_data@data 0048                  lcd_send_char_data@lcd_ret 004A  
                  lcd_send_custom_char@lcd 005A                              __pcstackBANK0 00B0  
                  lcd_send_custom_char@ret 00B2                    lcd_send_custom_char@row 005B  
               lcd_send_string_pos@lcd_ret 0058                            ??_modes_checker 005F  
                  ??_interrupt_INTx_enable 003A                lcd_send_custom_char@lcd_ret 00B1  
              lcd_send_custom_char@counter 0078                      _INT2_InterruptHandler 0071  
              lcd_send_custom_char@mem_pos 005E              interrupt_INTx_init@_interrupt 0047  
                                __pnvBANK0 00B3                ??_interrupt_INTx_clear_flag 003A  
                    ??_interrupt_INTx_init 0048               __end_of_gpio_pin_logic_write 15D8  
                ??_gpio_pin_direction_init 003B                                  __pintcode 0008  
                                _flag_mode 0077                        lcd_send_command@lcd 0047  
                      lcd_send_command@ret 004B                  ?_interrupt_INTx_edge_init 0039  
                                 ?_led_off 0041                          lcd_send_nbits@lcd 0041  
                        lcd_send_nbits@ret 0045                                __smallconst 1000  
                   ??_lcd_send_custom_char 005F                                _APP_INT_ISR 2082  
                _RB4_InterruptHandler_high 006F               INT2_set_InterruptHandler@ret 003B  
                lcd_send_char_data_pos@lcd 0053                  _RB7_InterruptHandler_high 0063  
                lcd_send_char_data_pos@ret 0059                  lcd_send_char_data_pos@row 0054  
               ??_gpio_pin_output_low_init 0042         interrupt_INTx_edge_init@_interrupt 0039  
                                 _INT0_ISR 2606                                  _seg_green 0020  
                                 _INT1_ISR 25D8                                   _INT2_ISR 25AA  
                                 _RB4_Flag 0018                                   _RB5_Flag 0017  
                                 _RB6_Flag 0016                                   _RB7_Flag 0015  
                 _RB5_InterruptHandler_low 0069                          RB4_ISR@RB4_Source 0036  
                 __end_of_InterruptManager 12C0                                   i2u110_40 1062  
                                 i2u110_41 105E                                   i2u111_40 1070  
                                 i2u111_41 106C                                   i2u120_40 1102  
                                 i2u112_40 1082                                   i2u120_41 10FE  
                                 i2u112_41 107E                                   i2u121_40 1112  
                                 i2u113_40 1090                                   i2u121_41 110E  
                                 i2u113_41 108C                                   i2u130_40 11B2  
                                 i2u122_40 112A                                   i2u114_40 10A2  
                                 i2u130_41 11AE                                   i2u122_41 1126  
                                 i2u114_41 109E                                   i2u131_40 11C0  
                                 i2u123_40 1138                                   i2u115_40 10B0  
                                 i2u131_41 11BC                                   i2u123_41 1134  
                                 i2u115_41 10AC                                   i2u140_40 1256  
                                 i2u132_40 11CE                                   i2u124_40 1146  
                                 i2u116_40 10BE                                   i2u108_40 1042  
                                 i2u140_41 1252                                   i2u132_41 11CA  
                                 i2u124_41 1142                                   i2u116_41 10BA  
                                 i2u108_41 103E                                   i2u141_40 1266  
                                 i2u133_40 11DE                                   i2u125_40 1156  
                                 i2u117_40 10CE                                   i2u109_40 1050  
                                 i2u141_41 1262                                   i2u133_41 11DA  
                                 i2u125_41 1152                                   i2u117_41 10CA  
                                 i2u109_41 104C                                   i2u142_40 127E  
                                 i2u134_40 11F6                                   i2u126_40 116E  
                                 i2u118_40 10E6                                   i2u142_41 127A  
                                 i2u134_41 11F2                                   i2u126_41 116A  
                                 i2u118_41 10E2                                   i2u143_40 128C  
                                 i2u135_40 1204                                   i2u127_40 117C  
                                 i2u119_40 10F4                                   i2u143_41 1288  
                                 i2u135_41 1200                                   i2u127_41 1178  
                                 i2u119_41 10F0                                   i2u144_40 129A  
                                 i2u136_40 1212                                   i2u128_40 118A  
                                 i2u144_41 1296                                   i2u136_41 120E  
                                 i2u128_41 1186                                   i2u145_40 12AA  
                                 i2u137_40 1222                                   i2u129_40 119A  
                                 i2u145_41 12A6                                   i2u137_41 121E  
                                 i2u129_41 1196                                   i2u138_40 123A  
                                 i2u138_41 1236                                   i2u139_40 1248  
                                 i2u139_41 1244                                  _move_sign 22EC  
                                _wait_sign 272E                               ??_ecual_init 0052  
              ??_INT0_set_InterruptHandler 003B                interrupt_INTx_edge_init@ret 003C  
                _interrupt_INTx_clear_flag 1EE0                                  led_on@led 0041  
                                led_on@ret 0043            __end_of_gpio_pin_direction_init 170C  
                                _stop_sign 229A                                _INTCON2bits 0FF1  
                              _INTCON3bits 0FF0                                  copy_data0 21B0  
                                copy_data1 21D0                               ??_led_toggle 0040  
                  ?_interrupt_INTx_disable 0039                         __end_of_ecual_init 2474  
          interrupt_INTx_enable@_interrupt 0039             lcd_send_char_data_pos@gpio_ret 0057  
                          _lcd_send_enable 2706                                   __Hrparam 0000  
                               ?_move_sign 0036       gpio_pin_direction_init@pin_direction 003A  
         interrupt_INTx_disable@_interrupt 0039                                   __Lrparam 0000  
                          _lcd_send_string 1E02                                 ?_wait_sign 0036  
                 lcd_send_command@gpio_ret 0049                          RB6_ISR@RB6_Source 0036  
               ?_INT2_set_InterruptHandler 0039                         __end_of_led_toggle 2660  
                 __end_of_lcd_send_command 2082                 lcd_send_custom_char@column 005C  
                               ?_stop_sign 0036                                _customChar1 00A2  
                              _customChar2 009A                                _customChar3 0092  
                              _customChar4 008A                       _gpio_pin_logic_write 14A4  
                                 __ptext10 1AE6                                   __ptext11 1F4E  
                                 __ptext20 2144                                   __ptext12 21F2  
                                 __ptext21 26DE                                   __ptext13 2246  
                                 __ptext30 26B4                                   __ptext22 233E  
                                 __ptext14 2748                                   __ptext31 242A  
                                 __ptext23 1CA2                                   __ptext15 1D1C  
                                 __ptext40 15D8                                   __ptext32 2500  
                                 __ptext24 183A                                   __ptext16 1B82  
                                 __ptext33 238E                                   __ptext25 1E72  
                                 __ptext17 1E02                                   __ptext50 0000  
                                 __ptext42 2762                                   __ptext34 1956  
                                 __ptext26 1EE0                                   __ptext18 1FB6  
                                 __ptext43 277C                                   __ptext35 201C  
                                 __ptext27 1A46                                   __ptext19 27CA  
                                 __ptext44 2796                                   __ptext36 23DE  
                                 __ptext28 2660                                   __ptext45 27B0  
                                 __ptext37 2706                                   __ptext29 268A  
                                 __ptext46 25AA                                   __ptext38 20E4  
                                 __ptext47 25D8                                   __ptext39 14A4  
                                 __ptext48 2606                                   __ptext49 2082  
                                 _app_init 27CA             __end_of_interrupt_INTx_disable 1EE0  
              __end_of_gpio_pin_input_init 238E                                   _lcd_init 1956  
                _INT0_set_InterruptHandler 26B4                                   _led_init 238E  
  pedestrian_green_traffic_counter@counter 004A                 lcd_send_char_data@gpio_ret 0049  
                      _lcd_send_string_pos 1D1C                                   isa$xinst 0000  
                                 int$flags 007C          __end_of_INT2_set_InterruptHandler 268A  
                         lcd_init@gpio_ret 004E                                 _INTCONbits 0FF2  
             lcd_send_custom_char@gpio_ret 00B0                      ?_gpio_pin_logic_write 0039  
                          led_off@gpio_ret 0042                             _lcd_send_nbits 23DE  
                       _yellow_leds_toggle 2474                       ?_lcd_send_string_pos 0053  
                  lcd_send_command@command 0048                    lcd_send_command@lcd_ret 004A  
                        lcd_set_curser@lcd 004C                    gpio_pin_logic_write@pin 0039  
                  gpio_pin_logic_write@ret 0040                          lcd_set_curser@row 004D  
         __end_of_gpio_pin_output_low_init 2144                    __end_of_lcd_send_enable 272E  
                           _lcd_set_curser 1B82                                   intlevel2 0000  
                      ?_yellow_leds_toggle 0036              __end_of_interrupt_INTx_enable 1D1C  
                  __end_of_lcd_send_string 1E72                             fp__APP_INT_ISR 0000  
                yellow_leds_toggle@counter 0044                __end_of_seven_segment_write 1E02  
                              ??_move_sign 005F                                ??_wait_sign 005A  
                    _gpio_pin_toggle_logic 1C16                             _car_led_yellow 0032  
                 ??_lcd_send_char_data_pos 0057                       ??_yellow_leds_toggle 0042  
                   __end_of_lcd_send_nbits 242A                         led_toggle@gpio_ret 0040  
                             ?_APP_INT_ISR 0036                 __end_of_seven_segment_init 2544  
                    ??_lcd_send_string_pos 0057                                ??_stop_sign 005F  
                   __end_of_lcd_set_curser 1C16                 gpio_pin_direction_init@pin 0039  
               gpio_pin_direction_init@ret 0040                           led_init@gpio_ret 0046  
              __end_of_interrupt_INTx_init 219C                      __end_of_modes_checker 183A  
                        ?_InterruptManager 0036                 lcd_send_char_data_pos@data 0056  
